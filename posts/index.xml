<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on </title>
    <link>https://poorlydefinedbehaviour.github.io/posts/</link>
    <description>Recent content in Posts on </description>
    <image>
      <title></title>
      <url>https://poorlydefinedbehaviour.github.io/papermod-cover.png</url>
      <link>https://poorlydefinedbehaviour.github.io/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 16 Dec 2023 00:00:00 -0300</lastBuildDate>
    <atom:link href="https://poorlydefinedbehaviour.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Disagree and commit falls apart in the presence of power imbalance</title>
      <link>https://poorlydefinedbehaviour.github.io/posts/disagree_and_commit_falls_apart_in_the_presence_of_power_imbalance/</link>
      <pubDate>Sat, 16 Dec 2023 00:00:00 -0300</pubDate>
      <guid>https://poorlydefinedbehaviour.github.io/posts/disagree_and_commit_falls_apart_in_the_presence_of_power_imbalance/</guid>
      <description>Disagree and commit is a management principle which states that individuals are allowed to disagree while a decision is being made, but that once a decision has been made, everybody must commit to it1.
Sounds good in theory. I can see it working If the individuals involved are at the same level in the hierarchy or the individual disagreeing and committing has more power than the individual proposing an idea.</description>
    </item>
    <item>
      <title>Hire me</title>
      <link>https://poorlydefinedbehaviour.github.io/posts/hire_me/</link>
      <pubDate>Sat, 02 Dec 2023 20:00:00 -0300</pubDate>
      <guid>https://poorlydefinedbehaviour.github.io/posts/hire_me/</guid>
      <description>Contact me at brunotj2015@hotmail.com I can be hired as a contractor Github
Building scalable and fault-tolerant web services, interested in distributed systems. Rust is my preferred programming language but I have used several others and I&amp;rsquo;m willing to work with any of them.
OPEN SOURCE The Rust programming language
Improved compiler diagnostics Tokio – the asynchronous Rust runtime
Fixed task starvation issue PROJECTS Data structures and algorithms in more than 16 languages Single decree paxos Bitcask - A log-structured hash table for fast key/value data SWIM (gossip protocol) Hashed and hierarchical timing wheels (for implementing timers) Raft in Rust Redis protocol Bully leader election Interpreted language Task deduplicator Partial socks5 protocol Parser combinators Container orchestrator like k8s Vector clocks Key-Value store Assault cube cheat in Rust Bytecode virtual machine JSON parser in F# Merkle tree Observables Knight&amp;rsquo;s tour solver with 3D projection in C++ Cuphead boss fight in C++ INTERESTING BLOG POSTS Consistent hashing Thinking about failure, fair-loss links and two generals Database anomalies and isolation levels Do Go programs with common data races compile in Rust?</description>
    </item>
    <item>
      <title>Reading list November 2023</title>
      <link>https://poorlydefinedbehaviour.github.io/posts/reading_list_november_2023/</link>
      <pubDate>Fri, 01 Dec 2023 00:00:00 -0300</pubDate>
      <guid>https://poorlydefinedbehaviour.github.io/posts/reading_list_november_2023/</guid>
      <description>The list of things I read or watched this month How To NOT Get Screwed As A Software Engineer - https://www.youtube.com/watch?v=fcfVjd_oV1I Failing Startups : Maybe I should get a job - https://www.indiehackers.com/post/failing-startups-maybe-i-should-get-a-job-653e1efd52 Cross shard transactions at 10 million requests per second - https://dropbox.tech/infrastructure/cross-shard-transactions-at-10-million-requests-per-second Let&amp;rsquo;s implement a basic hotel reservation system with 2PC using pessimistic and optimistic locks in Go - https://blog.stackademic.com/lets-implement-a-basic-hotel-reservation-system-with-2pc-using-pessimistic-and-optimistic-locks-in-581256d142e8 Postgres: PREPARE TRANSACTION - https://www.postgresql.org/docs/current/sql-prepare-transaction.html Building a Streaming Platform in Go for Postgres - https://blog.</description>
    </item>
    <item>
      <title>Consistent hashing</title>
      <link>https://poorlydefinedbehaviour.github.io/posts/consistent_hashing/</link>
      <pubDate>Fri, 06 Oct 2023 20:00:00 -0300</pubDate>
      <guid>https://poorlydefinedbehaviour.github.io/posts/consistent_hashing/</guid>
      <description>As the World Wide Web became more popular all of sudden a server could receive way more traffic than it could handle causing the server to service requests slowly or to not be able to serve them at all1. An intuitive solution to this problem is to cache2 the content served by the servers and allow the clients to fetch content from the caches instead of going to the original server.</description>
    </item>
    <item>
      <title>Reading list September 2023</title>
      <link>https://poorlydefinedbehaviour.github.io/posts/reading_list_september_2023/</link>
      <pubDate>Sun, 01 Oct 2023 00:00:00 -0300</pubDate>
      <guid>https://poorlydefinedbehaviour.github.io/posts/reading_list_september_2023/</guid>
      <description>The list of things I read or watched this month Farewell EC2-Classic, it’s been swell - https://www.allthingsdistributed.com/2023/09/farewell-ec2-classic.html Building a Firecracker-Powered Course Platform To Learn Docker and Kubernetes - https://iximiuz.com/en/posts/iximiuz-labs-story/ The Power Of Struct Embedding And Interfaces In Golang - https://www.youtube.com/watch?v=fXZJu_JuH0A Beginners Should Think Differently When Writing Golang - https://www.youtube.com/watch?v=PyDMqgOkiR8 How to Get Transactions Between (Almost) Any Data Stores - https://petereliaskraft.net/blog/epoxy How to do Distributed Transactions the RIGHT way? Microservices - https://www.</description>
    </item>
    <item>
      <title>Reading list August 2023</title>
      <link>https://poorlydefinedbehaviour.github.io/posts/reading_list_august_2023/</link>
      <pubDate>Fri, 01 Sep 2023 00:00:00 -0300</pubDate>
      <guid>https://poorlydefinedbehaviour.github.io/posts/reading_list_august_2023/</guid>
      <description>The list of things I read or watched this month Aplicação do Open Closed Principle: Exemplo prático com metaprogramação mais polimorfismo - https://www.youtube.com/watch?v=-gOR0WXZmYg Firecracker: Lightweight Virtualization for Serverless Applications - https://www.usenix.org/system/files/nsdi20-paper-agache.pdf SEC02-BP02 Use temporary credentials - https://docs.aws.amazon.com/wellarchitected/latest/framework/sec_identities_unique.html 5 Tips for Building Resilient Architecture - https://www.youtube.com/watch?v=gm6Y4vPlOLg Containers at the edge: it’s not what you think, or maybe it is - https://blog.cloudflare.com/containers-on-the-edge/ What is a Point of Presence (PoP) in networking? - https://rahi.</description>
    </item>
    <item>
      <title>Notes on formal languages: alphabets, strings and languages</title>
      <link>https://poorlydefinedbehaviour.github.io/posts/formal_languages_alphabet_strings_and_languages/</link>
      <pubDate>Tue, 08 Aug 2023 00:00:00 -0300</pubDate>
      <guid>https://poorlydefinedbehaviour.github.io/posts/formal_languages_alphabet_strings_and_languages/</guid>
      <description>An alphabet is any set of finite symbols such as a and b. For example, the alphabet Σ = {a, b} is an alphabet that contains the strings that can be built by combining a and b and the alphabet Σ = {0, 1} is the an alphabet that contains the strings that can be built by combining 0 and 1.
Symbols such as a and b put together to form something like bbaa are called strings.</description>
    </item>
    <item>
      <title>How I write CI pipelines in 2023</title>
      <link>https://poorlydefinedbehaviour.github.io/posts/how_i_write_ci_pipelines_in_2023/</link>
      <pubDate>Sat, 05 Aug 2023 00:00:00 -0300</pubDate>
      <guid>https://poorlydefinedbehaviour.github.io/posts/how_i_write_ci_pipelines_in_2023/</guid>
      <description>Dagger is a programmable CI/CD engine that runs your pipelines inside containers1 which makes it easier to test things locally and to setup complex workflows. Not having to write yaml/bash/etc as the workflow gets more complex is a huge advantage for me.
I&amp;rsquo;m working on a personal project that will allow people to deploy their code by selecting a GitHub repository. Me and a friend have decided to use Dagger to clone the user provided Git repository and build a Docker image and it was extremely easy to get it working.</description>
    </item>
    <item>
      <title>Reading list July 2023</title>
      <link>https://poorlydefinedbehaviour.github.io/posts/reading_list_jul_31_2023/</link>
      <pubDate>Mon, 31 Jul 2023 00:00:00 -0300</pubDate>
      <guid>https://poorlydefinedbehaviour.github.io/posts/reading_list_jul_31_2023/</guid>
      <description>The list of things I read or watched this month The right way to define a C function with no arguments - https://www.youtube.com/watch?v=VsRs0H4hXEE TREE-STRUCTURED CONCURRENCY — 2023-07-01 - https://blog.yoshuawuyts.com/tree-structured-concurrency/ Myths Programmers Believe about CPU Caches - https://software.rajivprab.com/2018/04/29/myths-programmers-believe-about-cpu-caches/ Eventual vs Strong Consistency in Distributed Databases - https://hackernoon.com/eventual-vs-strong-consistency-in-distributed-databases-282fdad37cf7 Accounting For Developers, Part I - https://www.moderntreasury.com/journal/accounting-for-developers-part-i Accounting For Developers, Part II - https://www.moderntreasury.com/journal/accounting-for-developers-part-ii Accounting for Developers Part III: Building a Lending Marketplace - https://www.</description>
    </item>
    <item>
      <title>Sending logs and traces to Grafana cloud from your Rust application</title>
      <link>https://poorlydefinedbehaviour.github.io/posts/rust_sending_logs_and_traces_to_grafana_cloud/</link>
      <pubDate>Sat, 22 Jul 2023 12:00:00 -0300</pubDate>
      <guid>https://poorlydefinedbehaviour.github.io/posts/rust_sending_logs_and_traces_to_grafana_cloud/</guid>
      <description>Sending logs and traces from a Rust app to Grafana cloud Run the Grafana agent Put the Grafana agent config in grafana-agent/agent/agent.yaml. server: log_level: debug logs: configs: - name: default positions: filename: /tmp/positions.yaml scrape_configs: - job_name: varlogs static_configs: - targets: [localhost] labels: job: varlogs app: rust-grafana-metrics-logs-traces __path__: /var/log/app/*log clients: - url: &amp;lt;grafana-cloud-loki-url&amp;gt; traces: configs: - name: default receivers: otlp: protocols: grpc: remote_write: - endpoint: tempo-us-central1.grafana.net:443 insecure: false # only add this if TLS is not required basic_auth: username: &amp;lt;grafana-cloud-tempo-username&amp;gt; password: &amp;lt;grafana-cloud-tempo-password&amp;gt; batch: timeout: 5s send_batch_size: 100 Run the Grafana agent docker run \ -v $PWD/grafana-agent/data:/etc/agent/data \ -v $PWD/grafana-agent/agent.</description>
    </item>
    <item>
      <title>Thinking about failure, fair-loss links and two generals</title>
      <link>https://poorlydefinedbehaviour.github.io/posts/fair_loss_links_and_two_generals/</link>
      <pubDate>Tue, 28 Mar 2023 20:30:00 -0300</pubDate>
      <guid>https://poorlydefinedbehaviour.github.io/posts/fair_loss_links_and_two_generals/</guid>
      <description>It feels like most people are not used to thinking about how things can fail, programming as if things always work as expected is the default modus operandi of most engineers i have talked to. Some examples that come to mind: http requests without handling responses that don&amp;rsquo;t have status 200, no timeouts, no retries, publishing a message to kafka and them updating a database, having a web client orchestrate a transaction across several systems without thinking: what if the user closes the browser tab?</description>
    </item>
    <item>
      <title>The simple way to avoid deadlocks</title>
      <link>https://poorlydefinedbehaviour.github.io/posts/the_simple_way_to_avoid_deadlocks/</link>
      <pubDate>Sat, 25 Mar 2023 20:35:00 -0300</pubDate>
      <guid>https://poorlydefinedbehaviour.github.io/posts/the_simple_way_to_avoid_deadlocks/</guid>
      <description>A deadlock happens when there&amp;rsquo;s at least one resource that can be only acquired by one process at a time and there&amp;rsquo;s a process P1 that is waiting to acquire a resource currently held by a process P2 and P2 is waiting to acquire a resource currently held by P1.
The word process does not mean we are talking about just OS processes.
There are two processes: Process A wants to acquire a lock on resource 1 and then a lock on resource 2.</description>
    </item>
    <item>
      <title>Database anomalies and isolation levels</title>
      <link>https://poorlydefinedbehaviour.github.io/posts/isolation_levels/</link>
      <pubDate>Fri, 24 Mar 2023 15:43:00 -0300</pubDate>
      <guid>https://poorlydefinedbehaviour.github.io/posts/isolation_levels/</guid>
      <description>Anomalies An anomaly or read phenomena can happen when a transaction reads data that may have been modified by another concurrent transaction.
Dirty read A dirty read happens when a transaction T1 reads data that has been modified by a concurrent transaction T2 that has not has been committed or rolled back yet. T1 ends up working with stale data if T2 does not commit.
T2 starts executing and sets x to a new value, T1 starts executing and reads x, the value of x is the value just set by T2, T2 rolls back, the value of x is not persisted to the database but T1 will move forward with the stale value of x that was written before T2 rolled back.</description>
    </item>
    <item>
      <title>Avoid overloading your systems: Request coalescing</title>
      <link>https://poorlydefinedbehaviour.github.io/posts/request_coalescing/</link>
      <pubDate>Sun, 19 Mar 2023 20:54:00 -0300</pubDate>
      <guid>https://poorlydefinedbehaviour.github.io/posts/request_coalescing/</guid>
      <description>The problem You are developing an application backed by a database, something happens and then several of your users try to access the same content. Several requests are sent to your backend at almost the same time and your backend hits the database once for each request to fetch the same data.
Fetching the data only once If N requests asking for the same data arrive at the backend at around the same time, the backend could hit the database to fetch the data when the first request arrives and force the other requests to await until the data is fetched.</description>
    </item>
    <item>
      <title>Do Go programs with common data races compile in Rust?</title>
      <link>https://poorlydefinedbehaviour.github.io/posts/rust_compile_time_safety_1/</link>
      <pubDate>Mon, 23 May 2022 20:39:07 -0300</pubDate>
      <guid>https://poorlydefinedbehaviour.github.io/posts/rust_compile_time_safety_1/</guid>
      <description>Uber has adopted Go as its primary programming language for developing microservices and has a post on its blog called Data Race Patterns in Go where they talk about data races found in their Go codebase.
I was reading it and thought to myself that many of the problems presented in the post would not even compile in Rust. Can Rust help us avoid writing code with common data races?</description>
    </item>
    <item>
      <title>Logs</title>
      <link>https://poorlydefinedbehaviour.github.io/posts/logs/</link>
      <pubDate>Sat, 30 Apr 2022 16:46:09 -0300</pubDate>
      <guid>https://poorlydefinedbehaviour.github.io/posts/logs/</guid>
      <description>What is a log A log is just a immutable sequence of records wih strong ordering semantics that can be used to provide durability, replication and to model consensus. It is usually a 0 indexed file that new entries are appended to because expensive disk seeks can usually be avoided when appending to a file1.
Not to be confused with the type of logs most people are used to: application logs that are meant to be read by humans although application logs are a degenerative case of the log we are talking about2.</description>
    </item>
    <item>
      <title>Contributing to Rust and tokio</title>
      <link>https://poorlydefinedbehaviour.github.io/posts/contributing_to_tokio/</link>
      <pubDate>Sun, 17 Apr 2022 14:29:20 -0300</pubDate>
      <guid>https://poorlydefinedbehaviour.github.io/posts/contributing_to_tokio/</guid>
      <description>Contributing for the first time I have been trying to force myself to do harder things lately in order to practice and learn new things. Since i&amp;rsquo;m doing Rust full time now, i thought it would be a good a idea to contribute to the ecosystem, so i went and enabled notifications for a bunch of Rust related projects and for the Rust project itself.
I thought i would be able to keep up with the notifications.</description>
    </item>
    <item>
      <title>Why Rc&lt;T&gt; is not Send</title>
      <link>https://poorlydefinedbehaviour.github.io/posts/why_rc_is_not_send/</link>
      <pubDate>Sun, 27 Mar 2022 17:20:07 -0300</pubDate>
      <guid>https://poorlydefinedbehaviour.github.io/posts/why_rc_is_not_send/</guid>
      <description>Why Rc cannot be sent between threads We get a compile error if we try to send Rc&amp;lt;T&amp;gt; to another thread:
use std::rc::Rc; fn main() { let rc = Rc::new(1); std::thread::spawn(|| { println!(&amp;#34;{}&amp;#34;, *rc); }) .join(); } error[E0277]: `Rc&amp;lt;i32&amp;gt;` cannot be shared between threads safely --&amp;gt; src/main.rs:5:3 | 5 | std::thread::spawn(|| { | ^^^^^^^^^^^^^^^^^^ `Rc&amp;lt;i32&amp;gt;` cannot be shared between threads safely | = help: the trait `Sync` is not implemented for `Rc&amp;lt;i32&amp;gt;` = note: required because of the requirements on the impl of `Send` for `&amp;amp;Rc&amp;lt;i32&amp;gt;` = note: required because it appears within the type `[closure@src/main.</description>
    </item>
    <item>
      <title>Token bucket</title>
      <link>https://poorlydefinedbehaviour.github.io/posts/token_bucket/</link>
      <pubDate>Sun, 20 Mar 2022 22:21:07 -0300</pubDate>
      <guid>https://poorlydefinedbehaviour.github.io/posts/token_bucket/</guid>
      <description>Intro Token bucket is an algorithm that can be used to rate limit requests made or received by a service.
How it works The algorithm is called token bucket because of the way it works: imagine we have a bucket with x tokens where each accepted request consumes one token from the bucket and a token is added back to the bucket at an interval.
A bucket with 1 token that is refilled each second means the service accepts one request per second.</description>
    </item>
    <item>
      <title>Notes taken from the Raft paper</title>
      <link>https://poorlydefinedbehaviour.github.io/posts/raft_notes/</link>
      <pubDate>Fri, 04 Mar 2022 17:48:19 -0300</pubDate>
      <guid>https://poorlydefinedbehaviour.github.io/posts/raft_notes/</guid>
      <description>Replicated And Fault Tolerant Raft is a consensus algorithm for managing a replicated log.
The authors claim Raft to be more understandable than Paxos because Raft separates the key elements of consensus
Leader election Log replication Safety and enforces a stronger degree of coherency to reduce the number of states that must be considered.
Raft also includes a new mechanism for changing cluster membership.
What is a consensus algorithm Consensus algorithms allow a collection of machines to work as a coherent group that can survive the failures of some of its members.</description>
    </item>
    <item>
      <title>Bloom filter</title>
      <link>https://poorlydefinedbehaviour.github.io/posts/bloom_filter/</link>
      <pubDate>Thu, 03 Mar 2022 20:56:31 -0300</pubDate>
      <guid>https://poorlydefinedbehaviour.github.io/posts/bloom_filter/</guid>
      <description>What&amp;rsquo;s a Bloom filter A bloom filter is a data-structure that can be used to check if a set contains an element. It uses way less memory than a conventional set data-structure by sacrificing accuracy.
Example Say we are building a log-structured merge-tree, we can use a bloom filter to find out if the LSM-tree contains a particular key in O(1) time in most cases, the downside is that sometimes the bloom filter would say that the LSM-tree contains a key, but it actually does not and we would go searching for the value that&amp;rsquo;s mapped to the key and never actually find it.</description>
    </item>
  </channel>
</rss>
