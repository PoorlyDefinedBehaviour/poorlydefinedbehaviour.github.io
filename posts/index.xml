<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on </title>
    <link>https://poorlydefinedbehaviour.github.io/posts/</link>
    <description>Recent content in Posts on </description>
    <image>
      <url>https://poorlydefinedbehaviour.github.io/papermod-cover.png</url>
      <link>https://poorlydefinedbehaviour.github.io/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 30 Apr 2022 16:46:09 -0300</lastBuildDate><atom:link href="https://poorlydefinedbehaviour.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Logs</title>
      <link>https://poorlydefinedbehaviour.github.io/posts/logs/</link>
      <pubDate>Sat, 30 Apr 2022 16:46:09 -0300</pubDate>
      
      <guid>https://poorlydefinedbehaviour.github.io/posts/logs/</guid>
      <description>What is a log A log is just a immutable sequence of records that can be used to provide durability, replication and to model consensus. It is usually a 0 indexed file where new entries are appended because expensive disk seeks can usually be avoided when appending to a file1.
 Not to be confused with the type of logs most people are used to: application logs that are meant to be read by humans.</description>
    </item>
    
    <item>
      <title>Contributing to Rust and tokio</title>
      <link>https://poorlydefinedbehaviour.github.io/posts/contributing_to_tokio/</link>
      <pubDate>Sun, 17 Apr 2022 14:29:20 -0300</pubDate>
      
      <guid>https://poorlydefinedbehaviour.github.io/posts/contributing_to_tokio/</guid>
      <description>Contributing for the first time I have been trying to force myself to do harder things lately in order to practice and learn new things. Since i&amp;rsquo;m doing Rust full time now, i thought it would be a good a idea to contribute to the ecosystem, so i went and enabled notifications for a bunch of Rust related projects and for the Rust project itself.
I thought i would be able to keep up with the notifications.</description>
    </item>
    
    <item>
      <title>Why Rc&lt;T&gt; is not Send</title>
      <link>https://poorlydefinedbehaviour.github.io/posts/why_rc_is_not_send/</link>
      <pubDate>Sun, 27 Mar 2022 17:20:07 -0300</pubDate>
      
      <guid>https://poorlydefinedbehaviour.github.io/posts/why_rc_is_not_send/</guid>
      <description>Why Rc cannot be sent between threads We get a compile error if we try to send Rc&amp;lt;T&amp;gt; to another thread:
use std::rc::Rc;  fn main() {  let rc = Rc::new(1);  std::thread::spawn(|| {  println!(&amp;#34;{}&amp;#34;, *rc);  })  .join(); }  error[E0277]: `Rc&amp;lt;i32&amp;gt;` cannot be shared between threads safely  --&amp;gt; src/main.rs:5:3  | 5 | std::thread::spawn(|| {  | ^^^^^^^^^^^^^^^^^^ `Rc&amp;lt;i32&amp;gt;` cannot be shared between threads safely  |  = help: the trait `Sync` is not implemented for `Rc&amp;lt;i32&amp;gt;`  = note: required because of the requirements on the impl of `Send` for `&amp;amp;Rc&amp;lt;i32&amp;gt;`  = note: required because it appears within the type `[closure@src/main.</description>
    </item>
    
    <item>
      <title>Token bucket</title>
      <link>https://poorlydefinedbehaviour.github.io/posts/token_bucket/</link>
      <pubDate>Sun, 20 Mar 2022 22:21:07 -0300</pubDate>
      
      <guid>https://poorlydefinedbehaviour.github.io/posts/token_bucket/</guid>
      <description>Intro Token bucket is an algorithm that can be used to rate limit requests made or received by a service.
How it works The algorithm is called token bucket because of the way it works: imagine we have a bucket with x tokens where each accepted request consumes one token from the bucket and a token is added back to the bucket at an interval.
A bucket with 1 token that is refilled each second means the service accepts one request per second.</description>
    </item>
    
    <item>
      <title>Notes taken from the Raft paper</title>
      <link>https://poorlydefinedbehaviour.github.io/posts/raft_notes/</link>
      <pubDate>Fri, 04 Mar 2022 17:48:19 -0300</pubDate>
      
      <guid>https://poorlydefinedbehaviour.github.io/posts/raft_notes/</guid>
      <description>Replicated And Fault Tolerant Raft is a consensus algorithm for managing a replicated log.
The authors claim Raft to be more understandable than Paxos because Raft separates the key elements of consensus
 Leader election Log replication Safety  and enforces a stronger degree of coherency to reduce the number of states that must be considered.
Raft also includes a new mechanism for changing cluster membership.
What is a consensus algorithm Consensus algorithms allow a collection of machines to work as a coherent group that can survive the failures of some of its members.</description>
    </item>
    
    <item>
      <title>Bloom filter</title>
      <link>https://poorlydefinedbehaviour.github.io/posts/bloom_filter/</link>
      <pubDate>Thu, 03 Mar 2022 20:56:31 -0300</pubDate>
      
      <guid>https://poorlydefinedbehaviour.github.io/posts/bloom_filter/</guid>
      <description>What&amp;rsquo;s a Bloom filter A bloom filter is a data-structure that can be used to check if a set contains an element. It uses way less memory than a conventional set data-structure by sacrificing accuracy.
Example Say we are building a log-structured merge-tree, we can use a bloom filter to find out if the LSM-tree contains a particular key in O(1) time in most cases, the downside is that sometimes the bloom filter would say that the LSM-tree contains a key, but it actually does not and we would go searching for the value that&amp;rsquo;s mapped to the key and never actually find it.</description>
    </item>
    
  </channel>
</rss>
