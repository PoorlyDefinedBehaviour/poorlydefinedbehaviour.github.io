<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>rust on </title>
    <link>https://poorlydefinedbehaviour.github.io/categories/rust/</link>
    <description>Recent content in rust on </description>
    <image>
      <title></title>
      <url>https://poorlydefinedbehaviour.github.io/papermod-cover.png</url>
      <link>https://poorlydefinedbehaviour.github.io/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 05 Aug 2023 00:00:00 -0300</lastBuildDate><atom:link href="https://poorlydefinedbehaviour.github.io/categories/rust/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How I write CI pipelines in 2023</title>
      <link>https://poorlydefinedbehaviour.github.io/posts/how_i_write_ci_pipelines_in_2023/</link>
      <pubDate>Sat, 05 Aug 2023 00:00:00 -0300</pubDate>
      
      <guid>https://poorlydefinedbehaviour.github.io/posts/how_i_write_ci_pipelines_in_2023/</guid>
      <description>Dagger is a programmable CI/CD engine that runs your pipelines in containers1. It runs your pipelines inside containers which makes it easier to test things locally. Not having to write yaml/bash/etc is a huge advantage for me.
I&amp;rsquo;m working on a personal project that will allow people to deploy their code by selecting a GitHub repository. We have decided to use Dagger to clone the user provided Git repository and build a Docker image and it was extremely easy to get it working.</description>
    </item>
    
    <item>
      <title>Sending logs and traces to Grafana cloud from your Rust application</title>
      <link>https://poorlydefinedbehaviour.github.io/posts/rust_sending_logs_and_traces_to_grafana_cloud/</link>
      <pubDate>Sat, 22 Jul 2023 12:00:00 -0300</pubDate>
      
      <guid>https://poorlydefinedbehaviour.github.io/posts/rust_sending_logs_and_traces_to_grafana_cloud/</guid>
      <description>Sending logs and traces from a Rust app to Grafana cloud Run the Grafana agent Put the Grafana agent config in grafana-agent/agent/agent.yaml. server: log_level: debug logs: configs: - name: default positions: filename: /tmp/positions.yaml scrape_configs: - job_name: varlogs static_configs: - targets: [localhost] labels: job: varlogs app: rust-grafana-metrics-logs-traces __path__: /var/log/app/*log clients: - url: &amp;lt;grafana-cloud-loki-url&amp;gt; traces: configs: - name: default receivers: otlp: protocols: grpc: remote_write: - endpoint: tempo-us-central1.grafana.net:443 insecure: false # only add this if TLS is not required basic_auth: username: &amp;lt;grafana-cloud-tempo-username&amp;gt; password: &amp;lt;grafana-cloud-tempo-password&amp;gt; batch: timeout: 5s send_batch_size: 100 Run the Grafana agent docker run \ -v $PWD/grafana-agent/data:/etc/agent/data \ -v $PWD/grafana-agent/agent.</description>
    </item>
    
    <item>
      <title>Why Rc&lt;T&gt; is not Send</title>
      <link>https://poorlydefinedbehaviour.github.io/posts/why_rc_is_not_send/</link>
      <pubDate>Sun, 27 Mar 2022 17:20:07 -0300</pubDate>
      
      <guid>https://poorlydefinedbehaviour.github.io/posts/why_rc_is_not_send/</guid>
      <description>Why Rc cannot be sent between threads We get a compile error if we try to send Rc&amp;lt;T&amp;gt; to another thread:
use std::rc::Rc; fn main() { let rc = Rc::new(1); std::thread::spawn(|| { println!(&amp;#34;{}&amp;#34;, *rc); }) .join(); } error[E0277]: `Rc&amp;lt;i32&amp;gt;` cannot be shared between threads safely --&amp;gt; src/main.rs:5:3 | 5 | std::thread::spawn(|| { | ^^^^^^^^^^^^^^^^^^ `Rc&amp;lt;i32&amp;gt;` cannot be shared between threads safely | = help: the trait `Sync` is not implemented for `Rc&amp;lt;i32&amp;gt;` = note: required because of the requirements on the impl of `Send` for `&amp;amp;Rc&amp;lt;i32&amp;gt;` = note: required because it appears within the type `[closure@src/main.</description>
    </item>
    
  </channel>
</rss>
