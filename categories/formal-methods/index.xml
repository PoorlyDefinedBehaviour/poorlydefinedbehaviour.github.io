<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Formal Methods on </title>
    <link>https://poorlydefinedbehaviour.github.io/categories/formal-methods/</link>
    <description>Recent content in Formal Methods on </description>
    <image>
      <title></title>
      <url>https://poorlydefinedbehaviour.github.io/papermod-cover.png</url>
      <link>https://poorlydefinedbehaviour.github.io/papermod-cover.png</link>
    </image>
    <generator>Hugo -- 0.148.1</generator>
    <language>en</language>
    <lastBuildDate>Sun, 20 Jul 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://poorlydefinedbehaviour.github.io/categories/formal-methods/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Generating tests from a TLA&#43; specification</title>
      <link>https://poorlydefinedbehaviour.github.io/posts/tla_test_generation_1/</link>
      <pubDate>Sun, 20 Jul 2025 00:00:00 +0000</pubDate>
      <guid>https://poorlydefinedbehaviour.github.io/posts/tla_test_generation_1/</guid>
      <description>&lt;h2 id=&#34;formal-methods&#34;&gt;Formal methods&lt;/h2&gt;
&lt;p&gt;Formal methods are techniques – usually based on mathematics – used for the specification, analysis and verification of software and hardware.&lt;/p&gt;
&lt;h2 id=&#34;why-would-anyone-be-interested-in-formal-methods&#34;&gt;Why would anyone be interested in formal methods?&lt;/h2&gt;
&lt;p&gt;The main reasons to consider formal methods are verifying that a design is correct, verifying that a change is correct, analysing a system to learn about it and developing an intuition about the system.&lt;/p&gt;
&lt;div align=&#34;center&#34;&gt;
&lt;img style=&#34;width:50%&#34; src=&#34;https://lh7-rt.googleusercontent.com/docsz/AD_4nXeItStmwei-06gHeLcBczgo2RjIandofBbnfTbpzcvatoJg0EwARIEXpCLo5hGK0bDcYvoggtmOmhsA-HXdCW858FWr7Ry6gUxnP4o0NN8AkXNeDpy7gpSLSC5z5mXyktIDxl1HSg?key=CZuYqiYDpsuzokR8yCzjpg&#34;&gt;
&lt;/div&gt;
&lt;div style=&#34;font-style:italic;text-align:center;font-size:90%&#34;&gt;
Formal methods is the umbrella term that contains several techniques inside of it
&lt;/div&gt;
&lt;p&gt;We&amp;rsquo;ll be considering only model checking because I believe it is the easiest to get started with and get a return on the investment quickly.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Model checking The Deadlock Empire</title>
      <link>https://poorlydefinedbehaviour.github.io/posts/the_deadlock_empire/</link>
      <pubDate>Thu, 15 Aug 2024 00:00:00 +0000</pubDate>
      <guid>https://poorlydefinedbehaviour.github.io/posts/the_deadlock_empire/</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://poorlydefinedbehaviour.github.io/posts/the_deadlock_empire/images/banner.jpeg&#34;&gt;&lt;/p&gt;
&lt;p&gt;This post contains &lt;a href=&#34;https://learntla.com/&#34;&gt;TLA+&lt;/a&gt; solutions for &lt;a href=&#34;https://deadlockempire.github.io/&#34;&gt;The Deadlock Empire&lt;/a&gt; which is a collection of challenges where the objective is to break multithreaded programs by playing the role of a scheduler that can context switch at any time.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://deadlockempire.github.io/#T2-Expansion&#34;&gt;Non atomic instructions&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s two threads executing the following code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a = a + &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (a == &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  critical_section();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Since the &lt;code&gt;a&lt;/code&gt; increment is not atomic, conceptually, it is like setting a temporary variable to the value of &lt;code&gt;a&lt;/code&gt;&amp;ndash; &lt;code&gt;tmp = a&lt;/code&gt; and then setting &lt;code&gt;a&lt;/code&gt; to the temporary variable value incremented by 1 &amp;ndash; &lt;code&gt;a = tmp + 1&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
