[{"content":"The list of things I read or watched in 2024 December Catching up with async Rust\nSeconds Since the Epoch\nUse of Time in Distributed Databases (part 3): Synchronized clocks in databases\nUse of Time in Distributed Databases (part 2): Use of logical clocks in databases\nsans-IO: The secret to effective Rust for network services\nTuring machines\nUse of Time in Distributed Databases (part 1)\nVerifying Kafka transactions - Diary entry 5 - AddPartitionsToTxn in TLA+\nJack Vanlightly — Distributed systems showdown — TLA + vs real code\nDr. TLA+ Series - Fast Paxos\nSpecification Refinement\nHow OCaml Represents Values in Memory\nDr. TLA+ Series - Raft\nNetwork protocols for anyone who knows a programming language\nFormally modeling dreidel, the sequel\nProactively monitor user journeys with Grafana Cloud Synthetic Monitoring\nDr. TLA+ Series: Paxos - Andrew Helwer\nTLA+ in Practice and Theory Part 2: The + in TLA+\nTLA+ in Practice and Theory Part 1: The Principles of TLA+\nWeeks Of Debugging Can Save You Hours of TLA+\nA More Flexible Paxos\nModeling Paxos and Flexible Paxos in Pluscal and TLA+\nThe Paxos algorithm, when presented in plain English, is very simple\nPractical Tips on using TLA+ and P\nModelling the archetype of a message-passing bug with TLA+\nTLA+ is hard to learn\nPragmatic formal modeling\nUtilizing highly synchronized clocks in distributed databases\nMost Important Cloud Concepts - Episode 3 - Autoscaling\nMost Important Cloud Concepts - Episode 2 - Load Balancing\nFormal methods\nWhere is HTTP/3 right now?\nRust nomicon: Leaking\nThe Future of TLA+\nAn introduction to symmetry in TLA+\nPaxos on Steroids and a Crash Course in TLA+\nA snapshot isolated database modeling in TLA+\nCrash-only software\nWhat are the Magical Clocks for?\nThreads On Multicore Systems\nProgramming Language Memory Models: Memory Models part 2\nA primer on formal verification and TLA+\nVerifying Kafka transactions - Diary entry 3 - Getting confidence in the TLA+ spec\nTLA+ conference 2024\nIntroducing Limbo: A complete rewrite of SQLite in Rust\nThe Computer That Runs The World\nTLA+: Weak and Strong Fairness\nComing in Go 1.24: testing/synctest experiment for time and concurrency testing\nMajority agreement is not necessary for consensus\nState Machine and Synchronization\nHow To Make The Most Out of Your 20s\nTo be atomic or non-atomic, that is the question (Fizzbee)\nVerifying Kafka transactions - Diary entry 4 - Writing an initial Fizzbee spec\nChoose Boring Technology\nEgoless engineering\nBuilding a distributed log using S3 (under 150 lines of Go)\nVerifying Kafka transactions - Diary entry 2 - Writing an initial TLA+ spec\nVerifying Kafka transactions - Diary entry 1 - A first step\nNovember How Floating-Point Numbers Are Represented\nYou could have designed state of the art positional encoding\nWhere http2 hits its limit\nWhy Are Threads Needed On Single Core Processors\nHow To Start A Dev Tools Company | Startup School\nZero to One: Notes on Startups, or How to Build the Future\nHow Much Memory Do You Need in 2024 to Run 1 Million Concurrent Tasks?\nAnnouncing Rust 1.83.0\n\u0026ldquo;RDF and the future of LLMs\u0026rdquo; by Luke VanderHart\n\u0026ldquo;Correctness proofs of distributed systems with Isabelle\u0026rdquo; by Martin Kleppmann\nS3 Now Supports One MILLION Buckets\nVerifying distributed systems with Isabelle/HOL\nThe Futuristic Business of Arcades\nLarge Language Models explained briefly\nThis is your brain on false sharing\nPreemption in Go: an introduction\nVirtual Threads in Clojure\nDTOs \u0026amp; Mapping : The Good, The Bad, And The Excessive\nHope for Argentina Javier Milei: President of Argentina - Freedom, Economics, and Corruption | Lex Fridman Podcast #453\nWhere Old Money Lives in London New York \u0026amp; Chicago\nOpenAI Email Archives (from Musk v. Altman)\nDarwin’s Deceptive Durability\nUserland Disk I/O\nAWS Lambda turns 10: A rare look at the doc that started it\nNo Code Observability with Grafana Beyla and eBPF | Explainer | Grafana\nThe Defiant Business of Barbers\nSimulation Testing For Liveness\nSafety\nGo Turns 15\nNo Brasil, professores de universidades públicas são como médicos que só tratam os sadios\nEnsuring data reaches disk\nPSA: SQLite does not do checksums\nPSA: Most databases do not do checksums by default\nThe Founders: The Story of Paypal and the Entrepreneurs Who Shaped Silicon Valley\nOverton window\nPaxos Made Simple\nCSci 340: Database \u0026amp; Web systems: Logging\nUsing Lightweight Formal Methods to Validate a Key-Value Storage Node in Amazon S3 (SOSP21)\nAmazon SQS delay queues\nHow Not to Disagree\nFF meetup #4 - Deterministic simulation testing\nThe Baffling Economics of Scooters\nHow SSH Really Works\nUnfortunate things about performance reviews\nWhy does SQLite (in production) have such a bad rep?\nDisaggregated Storage - a brief introduction\nDear CTO: it\u0026rsquo;s not 2015 anymore\nY Combinator Application Guide\nSingle-Decree Paxos\nLeaving Stripe\nWhy doesn\u0026rsquo;t Cloudflare use containers in their Workers platform infrastructure?\nA crash course on building a distributed message broker like Kafka from scratch - Part 1\nRust Collections \u0026amp; Iterators Demystified\nOctober Understanding Round Robin DNS\nUnikraft: Concepts\nPrisma Postgres®: Building a Modern PostgreSQL Service Using Unikernels \u0026amp; MicroVMs\nThe Heartbeat of Computing: How Clocks Drive CPUs Forward\nNetworking Basics For Ethical Hackers (EP1): IP Addresses, Subnetting, TCP \u0026amp; UDP Protocols\nMeta’s AI Abundance\nPsychological Safety vs. High Standards: A Misunderstood Dynamic\nSteve Ballmer was an underrated CEO\nThe hard truth: Americans don’t trust the news media\nThe Strange Business of Ice Cream\nLearn the Anatomy of a Grafana Plugin | Grafana Plugin Development\nQuery Language Not Required! Explore Apps Suite Demo (Logs, Metrics, Traces, Profiles) | Grafana\nAnnouncing Toasty, an async ORM for Rust\nThe fallacy of impostor syndrome\nA deep look into our new massive multitenant architecture\nTypes and the Zig Programming Language\nTesting at the boundaries\nNotes on structured concurrency, or: Go statement considered harmful\nHow to Test\nAn unexpected discovery: Automated reasoning often makes systems more efficient and easier to maintain\nThe Essence of the Flyweight Design Pattern\nHow to Configure the OpenTelemetry Operator With Your Kubernetes Cluster | Tutorial | Grafana\nLessons from Peter Thiel\nReflections on Palantir\nMySQL replication: Best practices and considerations\nCategorizing How Distributed Databases Utilize Consensus Algorithms\nState Machine and Synchronization\nIgor Konnov (Informal System) - Quint Language\nSagas\nPattern: Saga\nExplaining linear regression\nThe Accumulator\nThe Fetch Decode Execute Cycle\nWhy is Kubernetes Popular | What is Kubernetes?\nGo sync.Map: The Right Tool for the Right Job\nP: Safe Asynchronous Event-Driven Programming\nThe Dirty Business of Weight Loss Drugs\nPaxos lecture (Raft user study)\nThe Closed-Loop Benchmark Trap\nViewstamped Replication: The Less-Famous Consensus Protocol\nBenchmarks That Aren\u0026rsquo;t Your Friends\nSingle-Decree Paxos\nTime and Order\nFile Storage VS Object Storage | System Design\nthe tech inside your credit card, explained\nA Beginner’s Guide to the True Order of SQL Operations\nIntroduction to durable execution\nHow to Use OCaml\u0026rsquo;s Coercion Operator\nKeeping CALM: When Distributed Consistency is Easy\nThe Saga Pattern in Microservices (EDA - part 2)\nP: A Domain-Specific Language for Asynchronous Event-Driven Programming\nModel-based Testing Distributed Systems with P Language\nCan I use connect with UDP sockets?\nSeptember Threat Detection For k8s The RIGHT Way\nEncrypt database secrets using AWS KMS\nTop Kafka Use Cases You Should Know\nThe fundamental unit of work in modern computer systems\nPractical TLA+\nWhat is io_uring?\nTime Complexity of Loops (Solved Problem 5)\nBasic System Monitoring and Observability Terms and Fundamentals | sudoCODE\nThe Booming Business of Boba\nThe biggest beef in statistics explained\nTime Complexity of Loops (Solved Problem 4)\nAll the components of Loki explained\nA User\u0026rsquo;s Guide to the Open Source Grafana App Platform | GrafanaCON 2024 | Grafana\nChain replication for supporting high throughput and availability\nConstraining writers in distributed systems\nDo you really need that abstraction or generic code? (YAGNI)\nTime Perspective Therapy\nIs this consensus?\nHow to Reduce Metrics Costs with Grafana Cloud Adaptive Metrics | Grafana Labs\nLeader Election vs Distributed Consensus - Which One Is Harder?\nA PROGRAM is not a PROCESS.\nWhat are DNS Zones And Records?\nA friendly introduction to assembly for high-level programmers — Conditionals\nA friendly introduction to assembly for high-level programmers — Hello\nCAROL MATSUSE - Co-founder da Insider | Gigacast #49\nHow to Improve Cohort Retention | Startup School\nPrimary and Secondary DNS: A Complete Guide\nVASCO OLIVEIRA - Ceo nstech e Sócio Tarpon | Gigacast #47\nAnnouncing Rust 1.81.0\nMulti-Tenant: Database Per Tenant or Shared?\nThe Crooked Business of Esports\nDonald Trump Interview | Lex Fridman Podcast #442\nGUGA STOCCO - Co-founder Futurum Capital | Colunista MIT Technology Review Brasil | Gigacast #47\nFree speech isn\u0026rsquo;t guaranteed to be forever\nAugust How computer processors run conditions and loops\nGrafana 11.2 Now GA: Here\u0026rsquo;s our TL;DR Video | Grafana\nJepsen 15: What Even Are Transactions? by Kyle Kingsbury\nk8s Attack/Hacker Paths (What Can Attackers See?)\nHow the Internet Works in 9 Minutes\nThe Statistics of Clinical Trials\nIntroduction to Frontend Observability in Grafana Cloud (Demo) | Grafana\nLeader Election With S3 Conditional Writes\n#205 CEO Snowflake, Sridhar Ramaswamy\nConstraints breed innovation and so does tenacity\nYour Domain Model isn\u0026rsquo;t your Data Model\nMANOELA MITCHELL - CEO AND CO-FOUNDER AT PIPO SAÚDE | Gigacast #45\nAmazon S3 now supports conditional writes\nHow To Influence Decision Makers\nA Programmer-Friendly I/O Abstraction Over io_uring and kqueue\nWhat\u0026rsquo;s the big deal about Deterministic Simulation Testing?\nWhat P vs NP is actually about\nBeneath C++: Understanding Assembly\nThe Shrinking Business of Sneakers\nGo Maps Explained: How Key-Value Pairs Are Actually Stored\nHow to Query Span Events with TraceQL | Tempo Tutorial | Grafana Labs\nCo-Founder Equity Mistakes to Avoid | Startup School\nLinux Performance Tools!\nGetting Started with Grafana Plugin Development | Grafana Plugin Development\nCategory theory illustrated: Sets\nPart 3 Pmarca Guide to Career Planning: Where to go and why\nPart 2 Pmarca Guide to Career Planning: Skills and education\nPart 1 Pmarca Guide to Career Planning: Opportunity\nDarkside of Event-Driven Architecture\nLock striping\nNotes for new hires\nThe many faces of consistency\nLinearizability\nLinearizability: A Correctness Condition for Concurrent Objects\nCall Me Maybe?\nError Handling in a Correctness-Critical Rust Project\nsled simulation guide (jepsen-proof engineering)\nFormal verification makes RSA faster — and faster to deploy\nHiisi architecture\nGUILHERME ASSIS - CO-FOUNDER AND CEO AT GORILA | Gigacast #44\nProofs are Programs: A Few Examples of the Curry-Howard Correspondence\nAsync Runtimes\nARTHUR ABRANTES - COMPUTER SCIENCE AT HARVARD | Gicacast #43\nSo good, they can\u0026rsquo;t ignore you\nData Replication Design Spectrum\nHow AI Learned to Feel | 75 Years of Reinforcement Learning\n#201 CEO Lyft, David Risher\nJuly How Primary Keys Work in ClickHouse\nGetting Started with ClickHouse\n\u0026ldquo;Design in Practice\u0026rdquo; by Rich Hickey\nCrafting Interpreters with Rust: On Garbage Collection\nUnderstanding B-Trees: The Data Structure Behind Modern Databases\nThe BIG 3 Embedded Protocols - I2C, SPI, UART\nTHE ACTUAL REASON RAM BOTTLENECKS PROCESSORS\nHMAC (Hash-Based Message Authentication Codes) Definition\nAdvice to the young\nMy advice to the 2012 class\nSolving Concurrency Bugs Using Schedules and Imagination\nThe Rigged Economics of Airlines\nLARA LEMANN - CO-FOUNDER AT MAYA CAPITAL | Gicacast #42\nA* Search: How Your Map Applications Find Shortest Routes\nFiles are hard\nHOW COMPUTERS CAST STRING TO NUMBERS\nWhy Startup Founders Should Launch Companies Sooner Than They Think\nYou Could Have Invented Monads! (And Maybe You Already Have.)\nSession Vs JWT: The Differences You May Not Know!\nHow To Price For B2B | Startup School\nVertical Slice Architecture isn\u0026rsquo;t technical\nData Plane vs. Control Plane\nTarpit Ideas: The Sequel\nWhy does Neon use Paxos instead of Raft, and what’s the difference?\nANDERSON SILVA - FOUNDER AT IGLU | Gicacast #41\nSoftware engineers are not (and should not be) technicians\nRediscovering Transaction Processing From History and First Principles\nThe Territorial Business of Tacos\nANAMAÍRA SPAGGIARI - MANAGING DIRECTOR AT FUNDAÇÃO ESTUDAR | Gigacast #38\nHow To Know When It\u0026rsquo;s Time To Go\nMARIO AUGUSTO - CO-FOUNDER AT NG.CASH | Gicacast #40\nLecture 2: Basic Macroeconomic Concepts\nLecture 1: Introduction to 14.02 Principles of Macroeconomics\nFINDING GOROUTINE BUGS WITH TLA+\nThe deadlock empire\nThe right kind of stubborn\nUnanimous 2PC: Fault-tolerant Distributed Transactions Can be Fast and Simple\nAnomaly detection and root cause analysis with Application Observability | Grafana Cloud\nFunctional core, imperative shell\nEnterprise Sales | Startup School\nGoldman Sachs: Top of mind - GEN AI: TOO MUCH SPEND, TOO LITTLE BENEFIT?\nMy favorite Erlang Program\nProperly Testing Concurrent Data Structures\nPostgreSQL and UUID as primary key\nSynchronous Core, Asynchronous Shell\nRutgers: Understanding Paxos\nUnix\u0026rsquo;s fsync(), write ahead logs, and durability versus integrity\nsans-IO: The secret to effective Rust for network services\nOne process programming notes (with Go and SQLite)\nSystems Distributed \u0026lsquo;24\nHow to understand/retain complex concepts 10x better\nWhat Goes Around Comes Around\u0026hellip; And Around\u0026hellip;\nHow to create software quality.\nCRCs and Reed-Solomon coding: better together\nCoding for SSDs – Part 3: Pages, Blocks, and the Flash Translation Layer\nCoding for SSDs – Part 2: Architecture of an SSD and Benchmarking\nCoding for SSDs – Part 1: Introduction and Table of Contents\nCoding for SSDs – Part 5: Access Patterns and System Optimizations\nA write-ahead log is not a universal part of durability\nJune The Tortoise and the Hare in TLA+\nOpenAPI with a sprinkle ✨ of Hypermedia\nEND-TO-END ARGUMENTS IN SYSTEM DESIGN\nRedis Explained\nMark Zuckerberg on Creators, AI Studio, Neural Wristbands, Holographic Smart Glasses, Picasso \u0026amp; More\nSIGMOD 2022: Dissecting, Designing, and Optimizing LSM-based Data Stores (Tutorial)\nELF File Format Explained\nKubernetes Architecture: Deep Dive - Part 2\nIntroduction to Kubernetes - Part 1\nWriting I/O-Free (Sans-I/O) Protocol Implementations\nThe plan-execute pattern\nWEAK AND STRONG FAIRNESS\nGrafana 11.1 Now GA: Here\u0026rsquo;s our TL;DR Video | Grafana\nFairness and Liveness\nMy spiciest take on tech hiring\nNoSQL Data Modeling and the LSM Tree data structure\nKarpathy: Doing well in your courses\nPublish algorithms with testable code\nUsing TLA⁺ at Work: Designing a snapshot coordination system\nNewSQL database systems are failing to guarantee consistency, and I blame Spanner\nSimple Simulations for System Builders\nFormal Methods: Just Good Engineering Practice?\nFizzBee Quick Start for TLA+ Users\nJeff Dean: Challenges in Building Large-Scale Information Retrieval Systems\nMissing Manuals - io_uring worker pool\nHistorical records with PostgreSQL, temporal tables and SQL:2011\nWhy Your SSD (Probably) Sucks and What Your Database Can Do About It\nYou\u0026rsquo;re not as loosely coupled as you think!\nIntroducing FizzBee: Simplifying Formal Methods for All\nSOFTWARE FRICTION\nS3 to SQS Trigger Tutorial\nIntroducing Distill CLI: An efficient, Rust-powered tool for media summarization\nReflecting on My Failure to Build a Billion-Dollar Company\nIGOR GONTIJO - FOUNDER AT HACKR ADS | Gigacast #36\nImplementing Temporal Features in PostgreSQL: SQL Standard and Beyond | Citus Con 2023\nIntroduction to Ingesting OpenTelemetry Logs with Loki | Zero to Hero: Loki | Grafana\nAvoiding Beginner Mistakes Hampering You to Scale Backend\nTHREADS - Program in Parallel!\nHow do foreign keys work in MariaDB system versioned tables?\nGoodbye Joe\nImmutability Changes Everything\nSSD performance 2015\nElements of Scale: Composing and Scaling Data Platforms\nShared Nothing v.s. Shared Disk Architectures: An Independent View\nFallacies of Distributed Systems\nEncrypting Streams in Go\nTesting Distributed Systems the right way ft. Will Wilson\nHOW TRANSISTORS REMEMBER DATA\nIntroduction to Ingesting logs with Loki | Zero to Hero: Loki | Grafana\nExploring the Hidden Secrets within OCaml’s Local Function Types | OCaml Unboxed\nRuntime representation of numbers in OCaml\nMemory allocation in OCaml and beyond\nHow to do distributed locking\nWhat is Data Pipeline? | Why Is It So Popular?\nHow does B-tree make your queries fast?\nWrite code that is easy to delete, not easy to extend.\nGUI AZEVEDO - CO-FOUNDER DA ALICE | Gigacast #35\nThe art of the pivot, part 2: How, why, and when to pivot\nKnow Yourself\nMoving Beyond Type Systems\nMake Your Program Slower With Threads\nMapReduce: Simplified Data Processing on Large Clusters\nHow to Install Grafana on Every OS | Grafana\nYour customers don\u0026rsquo;t care about JS\nNot Just Scale\nRedis.io: REDIS QUEUE\nQueueing: An interactive study of queueing strategies\nIntroduction to AWS Web Application Firewall (WAF)\nUnderstanding Weak Isolation Is a Serious Problem\nRust Tidbits: Box Is Special\nDAVID PIRES - CRIADOR DA ZIG | Gigacast #34\nThe Advantages Of Queues On Logs\nStrong arrows: a new approach to gradual typing\nThe pitfalls of request/response over messaging\nConsensus: the Big Misunderstanding\nMay A way to do atomic writes\nAre Files Appends Really Atomic?\nGetting Clojure: Build Your Functional Skills One Idea at a Time\nJoe Armstrong: A week with Elixir\nStartup Experts Discuss Doing Things That Don\u0026rsquo;t Scale\nThe BENEFITS of Programming Under CONSTRAINTS\nThe day I became a millionaire\nHTTP APIs don\u0026rsquo;t magically remove Coupling (Part 2)\nDid we learn anything from Microservices? (Part 1)\nUnofficial guide to Datomic internals\nDatomic: Look at all the things I\u0026rsquo;m not doing! (Cont.) Taking Learning Seriously\nDatomic: Look at all the things I\u0026rsquo;m not doing!\nsled simulation guide (jepsen-proof engineering)\nWhat We Look for in Founders\nAVOIDING OVER-RELIANCE ON MPSC CHANNELS IN RUST\n#192 CTO and Co-Founder Discord, Stanislav Vishnevskiy\nHow To Be Successful\nDRAM vs SRAM | Computer Architecture\nMediocre Engineer’s guide to HTTPS\n(Mostly) Deterministic Simulation Testing in Go\nDr. K Chats with @Mizkif\nHow New Technology Creates New Businesses\nORKUT BÜYÜKKÖKTEN - CRIADOR DO ORKUT | Gigacast #33\nWhy AI Is Tech\u0026rsquo;s Latest Hoax\nDead simple core.async job system in Clojure\nOptimizing your talking points\nMark Zuckerberg: Future of AI at Meta, Facebook, Instagram, and WhatsApp | Lex Fridman Podcast #383\nLinear transformations and matrices | Chapter 3, Essence of linear algebra\nLinear combinations, span, and basis vectors | Chapter 2, Essence of linear algebra\nVectors | Chapter 1, Essence of linear algebra\nDo You Know How Mobile Apps Are Released?\nHTMX: What\u0026rsquo;s Old is New Again\nA History of Clojure by Rich Hickey with Q\u0026amp;A\nClojure 1.12.0-alpha12\ntryclojure\nLWN: Ensuring data reaches disk\nDurability: Linux File APIs\nHow to debug Kubernetes? (Deployments, Services \u0026amp; Ingress)\nImplementing MVCC and major SQL transaction isolation levels\nDecidable vs. Undecidable Problems in Algorithms\nYour CTO Should Actually Be Technical\nThe Stanford Startup and the MIT Startup\nKleiner Perkins: #191 CEO and Co-Founder Intercom, Eoghan McCabe\nJepsen: MongoDB (2013)\nBut, what is Virtual Memory?\nio uring gets even faster\nYou will never get moving until you just start\nJapan Spent 60 Billion Dollars Defending The Yen!\nTaking Risk\nBRUNO BANNACH - CRIADOR DA JESTOR | Gigacast #32\nLessons learnt from building a distributed system in Rust\nHow are Microchips Made?\nHow Schools Detect ChatGPT - AI Detecting AI\nBuilding an Observability Solution with ClickHouse - Part 1 - Logs\nRich Hickey: Open Source is Not About You\nDeno KV internals: building a database for the modern web\nProgramação Funcional | Building Nu Engineering Meetup #06\nWindows PE File Format Explained\nJepsen: Datomic Pro 1.0.7075\nJepsen: Snapshot Isolation\nJepsen: Sequential Consistency\nThe Notifier Pattern for Applications That Use Postgres\nI Interviewed The Prime Minister of Canada on Housing and the Economy\nFoxconn\u0026rsquo;s Plan To Dominate Electric Vehicles\nEven Better Errors in Go\nBuilding resilient serverless patterns by combining messaging services\nJohn Doerr: Ideas are easy, execution is everything.\nNEUMA LEITE - Especial dia das mães | Gigacast #31\nAmazon S3: Multipart Upload\nETag\nAPI Error Messages for a GOOD Developer Experience\nP=BPP And this year\u0026rsquo;s Turing Award goes to\u0026hellip;\nShell\u0026rsquo;s Fake Carbon Credit Scandal Explained!\nThe Evolving Business of Doughnuts\nLAURA DUBUGRAS - Y combinator, Stanford, Opensea e Harley AI | Gigacast #30\nSolving Complex Ordering Challenges with Amazon SQS FIFO Queues\nGetting started with Amazon SQS FIFO queues\nIt’s always TCP_NODELAY. Every damn time.\napollographql: Tags Navigation controls Namespacing by separation of concerns\nWhat is the AWS Serverless Application Model (AWS SAM)?\nDDD, Hexagonal, Onion, Clean, CQRS, … How I put it all together\nHow to Stream AWS Logs to Grafana Cloud via Amazon Data Firehose | Grafana\nDeep Dive into Primary/Secondary Replication for Fault Tolerance\nHow Branch Prediction Works in CPUs - Computerphile\nClojure: managing throughput with virtual threads\nPitfalls with Tail Calls and Locals in OCaml | OCaml Unboxed\nWhat is a Columnar Database? (vs. Row-oriented Database)\nUnderstanding Dashboards in Grafana | Panels, Visualizations, Queries, and Transformations\n8 Wastes of Lean (for Software Developers)\nGabriel Guimarães | Gigacast #29\nWHY IS THE STACK SO FAST?\nARRAYLIST VS LINKEDLIST\nHOW TRANSISTORS INTERPRET INSTRUCTIONS AND DO MATH?\nHow Leap Day Took Down Microsoft Azure\nCalling Conventions For Reverse Engineering\nWeb-Queue-Worker Architecture Style for Scaling\nBeginners Guide - All about Flame Graphs visualization | Grafana\nSimple Design Docs explained in under 4 minutes\nSREcon23 Europe/Middle East/Africa - Cache Me If You Can: How Grafana Labs Scaled Up Their memcached cluster\nAnnouncing Rust 1.78.0\nJane Street’s $1 Billion Trade Puts Spotlight on Indian Options\nJane Street: the top Wall Street firm ‘no one’s heard of’\nJane Street is big. Like, really, really big\nThat\u0026rsquo;s impossible!\nSynchrony, Asynchrony and Partial synchrony\nOnly Use Inheritance If You Want Both of These\nApril How to debug Kubernetes Ingress? (TLS - Cert-Manager - HTTP-01 \u0026amp; DNS-01 Challenges)\nWorking with Strings in MySQL (four functions)\nHarry Truman, The Most Average Person to Ever Become President\nMale Weepies: A Misunderstood Genre\nShould Google Sell YouTube?\n#188 CEO and Co-Founder Synthesia, Victor Riparbelli w/ Josh Coyne\nKeep your project structure simple!\nIs Britain Falling Behind?\nWhy Lemonade Failed To Disrupt Insurance\nMapReduce: Simplified Data Processing on Large Clusters\nExternal sorting\nPractical Understanding of FLP Impossibility for Distributed Consensus\nThe arms race of internet bots (web scraping)\nJoão Miranda - FOUNDER DA HASH | Gigacast #28\nWill The Halving Bankrupt Bitcoin Miners?\nThe Big Business of Bubble Tea\nSized, DynSized, and Unsized\nYou Are What You Read, Even If You Don’t Always Remember It\nWhy TLA+ is important(for concurrent programming)\nPhysical vs Logical Time\nPOSIX write() is not atomic in the way that you might like\nLinear Algebra of Types\nThe Four Quadrants of Conformism\nFierce nerds\nAsynchronous Programming in Rust\nManaging users and Permissions in Grafana | Grafana for Beginners Ep 12\nBeginners guide to - Visualizing Geomaps | Grafana\nDemystifying Stream Processing Fundamentals\nBeginners Guide - How to Configure a Candlestick Visualization | Grafana\n7 Tips to Grow as a Developer\nGoogle Reader Shutdown Tidbits\nThe unreasonable effectiveness of just showing up everyday\nImprove your MySQL database performance with this key setting\nWhy Golang\u0026rsquo;s IO.READER Is More Important Than You Think\nRodrigo Colmonero - Founder \u0026amp; CEO da Gringo| Gigacast #27\nCoroutines and effects\nWhat High Performers Do That You Don\u0026rsquo;t\nDepend on Abstractions, not Concretions (Framework)\nLearn Assembly for Game Hacking\nChanges to u128/i128 layout in 1.77 and 1.78\nI/O is no longer the bottleneck\nDebunking Kafka Top 5 Use Cases\nWorkload isolation using shuffle-sharding\nFault isolation using shuffle sharding | Andrew Robinson | Conf42 SRE 2021\nAn unfair advantage: multi-tenant queues in Postgres\nMark Zuckerberg - Llama 3, $10B Models, Caesar Augustus, Bioweapons, \u0026amp; 1 GW Datacenters\nTop 12 Tips For API Security\nSelling Lisp by the Pound\nWhen Should You Trust Your Gut?\n1000x the telemetry at 0.01x the cost\nWhat makes concurrency so hard?\nWoovi deixa AWS e lança data center próprio para aumentar eficiência do Pix | Podcast Tech 40+\nHow Render Enforces Access Controls with Go Generics\nOpaque data type\nLeandro Noel - Co-CEO da BRLA Digital | Gigacast #26\nSignals. I spent 2 years to understand this part.\nDeclarations Gone Wrong\nWHY Waterfall Doesn\u0026rsquo;t Work\n20 Years of Experience Later: Rediscovering Quake’s Groundbreaking Graphics\nShutting Down My Job Board for Software Engineering Positions After 2.5 Years\nSecurity advisory for the standard library (CVE-2024-24576)\nHow Woovi is building a self hosted cloud native CI/CD platform with Tekton and Argocd Learning lower-level programming\nUnderstanding Covariance and Contravariance\nThey Knew Waterfall Didn\u0026rsquo;t Work\nMore on the Performance of Go Pointers\nKubernetes RBAC Explained\nThe matrix math behind transformer neural networks, one step at a time!!!\nMy First Distributed System\nThe Law of Leaky Abstractions\nHow Are Cruise Ships Cheaper Than Hotels?\nDecrusting the tokio crate\nIntelligence: A 600 Million Year Story\nJuliana Hadad - StarkBank \u0026amp; VC | Forbes Under 30 | Gigacast #25\nOwnership in Rust\nWhy are EV Sales Falling?\nRedesigning OLTP for a New Order of Magnitude\nThe V8 Sandbox\nCreating alerts with Grafana | Grafana for Beginners Ep 11\nEvent Sourcing Core Concepts\nThread-per-core\nWhen Will the GenAI Bubble Burst?\nMySQL: 15.1.20.2 CREATE TEMPORARY TABLE Statement\nA impagável DÍVIDA AMERICANA, uma ameaça à segurança nacional\nReducing the Scope of Impact with Cell-Based Architecture\nCell-Based Architecture\nHow to Survive the Crypto Boom \u0026amp; Bust Cycle\nIntroducing Glommio, a Thread-per-Core Crate for Rust \u0026amp; Linux\nAWS Lambda + Bedrock Tutorial\nHow Vitess powers your PlanetScale database\nAlways Use Interfaces\nGo: Pointers for performance redux\nComputer Science vs Engineering from a guy doing BOTH\nMarch OTÁVIO COSTA MIRANDA - CO-FOUNDER DA GABRIEL | Gigacast #24\nmalicious backdoor found in ssh libraries\nLinux Foundation Launches Open Source Valkey Community\nMy WORST Mistakes as a Software Developer\nGo: Pointers for Performance?\nnew linux exploit is absolutely insane\nHow to Configure a Histogram Visualization | Grafana\nWhat the End of Japan’s Negative Interest Rates Means\nIntroducing Sig by Syndica, an RPS-focused Solana validator client written in Zig\nWhy choose async/await over threads?\nHow To Criticize Computer Scientists or Avoiding Ineffective Deprecation And Making Insults More Pointed\nThe What, Why and How of Containers\nP99 CONF 2023 | HTTP 3: Moving on From TCP by Brian Sletten\nSQLite Internals: Pages \u0026amp; B-trees\nReturn Address Spoofing For Game Hacking\nOCaml Locals Save Allocations | OCaml Unboxed\nCreating a 100 gigabyte index on 1 billion+ rows\nFUNDAMENTALS OF OBJECT STORAGE\nWhat Is a Graph Database? (Animated + Practice)\nRust nomicon: Send and Sync\nRust: 2024 Edition Update\nIVAN ROLLEMBERG - MÉDICO/EMPRESÁRIO FOUNDER DA HUMAN | Gigacast #23\nProgramming Elixir 1.6\nAnti-Debug with Structured Exception Handling + Trap Flag\nWhat is LangChain?\nMapReduce: Simplified Data Processing on Large Clusters\nBankruptcies Rising Around the World\nWhy Founders Shouldn\u0026rsquo;t Think Like Investors\nNode.js: The Documentary | An origin story\nAnnouncing Rust 1.77.0\nHow to start Google\nWhat is a Reverse Proxy? (vs. Forward Proxy) | Proxy servers explained\n3 Ideas on Refactoring by Martin Fowler\nThe Autism Constellation\nThe LeetCode Fallacy\nFeature Flags are more than just Toggles\nRAFAEL STARK - CEO da StarkBank | Gigacast #22\nClojure Superpower: Interactive programming with REPL\nMore powerful Go execution traces\nWhere Is The REAL Cerebral Valley?\nCh02 Ep02: Generic function Part 2\n\u0026ldquo;Serverless sucks!\u0026rdquo;\u0026hellip; or does it?\nFirst month on a database team\nAll About Epoll - Scalable I/O Syscalls in Linux!\nANDRÉ BERNARDES - CEO da Zippi | Gigacast #21\nI Could Never Be a VP of Engineering\nThe actor model in 10 minutes\nHarnessing your tech stack for a competitive Fintech advantage\nThe Only Time You Should Use Polymorphism\nSpotify – Large Scale, Low Latency, P2P Music-on-Demand Streaming\nPOV: I\u0026rsquo;m on my third coffee and you just asked me how the internet works\nJoe Armstrong: The Road we didn\u0026rsquo;t go down\nCS101++ - What Are The Parts of a Computer?\nDesigning Your Postgres Database for Multi-tenancy\nAn Overview of Distributed PostgreSQL Architectures\nWHY IS THE HEAP SO SLOW?\nAnatomical similarities and differences between Paxos and blockchain consensus protocols\nCEO and Co-Founder Verkada, Filip Kaliszan: Outlier\nColumn vs Row Oriented Databases Explained\nEnsuring rollback safety during deployments\nStop leaking and implying logic in your Frontend\nThe Golang Compiler Feature You Might Not Know!?\nCaching Pitfalls Every Developer Should Know\nThe Rise and Fall of Online Dating\nScylla: Log Structured Merge Tree\nGoogle Patches Linux kernel with 40% TCP performance\nRich Hickey: Deconstructing the Database\nSSTable and Log Structured Storage: LevelDB\nDatomic: Indexes\nDesign a Distributed Priority Queue | SQL DB | FOQS\nCADU GUERRA - CEO da Allu | Gigacast #20\nBuilding Confidence In Yourself and Your Ideas\nFebruary The Magic of Bitcoin\nWhat Kind Of Software Architecture Is This? Monolith or Microservices?\nDANILO COSTA - FOUNDER do Educbank | Giga Elenco #19\nTop 3 Things You Should Know About Webhooks!\nWhy arguing generals matter for the Internet\nMIT 6.824: Lecture 1: Introduction\nRiak: Why Vector Clocks are Easy\nWhy Cassandra Doesn’t Need Vector Clocks\nHow are vector clocks used in Dynamo?\nDatabase Isolation Levels and MVCC\nHow RocksDB works\nCan you earn money playing Blackjack? (The software engineer\u0026rsquo;s approach)\nBattle Of The Software Architectures: Which One Reigns Supreme?\nCan I Improve Go\u0026rsquo;s Error Handling?\nAmazon States Language (ASL) Introduction\nDocker vs Kubernetes vs Containerd\nScaling ChatGPT: Five Real-World Engineering Challenges\nControl planes and data planes\nHow Pinterest Scaled to 11 Million Users With Only 6 Engineers\nNoSQL and Distributed SQL: A Comparison of Distributed Database Systems\nScylla: Lightweight Transactions\nScyllaDB Ring Architecture - Overview\nRelational vs. Non-Relational Databases\n“What are your salary expectations?” | Salary Negotiation Interview\nPEDRO LUCENA - Head de Growth em Rei do Pitaco | Giga Elenco #18\nGo Constants Aren\u0026rsquo;t Constant?\nStop Innovating (On The Wrong Things)\nSimple JavaScript Aimbot - HTML5 Game Hacking\nIncrease speed and durability with MySQL replication (2 easy ways)\nPast the \u0026ldquo;Top 10\u0026rdquo;! - 2023 in Programming Languages\nAvoiding long running HTTP API requests.\nEnd-to-End Arguments in System Design\nJames Mickens: The Saddest Moment\nWhy Linear regression for Machine Learning?\nAn intuition for distributed consensus in OLTP systems\nRAID-5 (striping with parity)\nHow does RAID and RAID Parity work?\nWhat is RAID 0, 1, 5, \u0026amp; 10?\nThe Scrum Guide\nCan I make a Better map than the Go Developers?\nHow Can A Line Predict Future?\nIs something bugging you?\nClassification vs. Regression in Machine Learning\nWhat is the Prototype Design Pattern?\nApache Kafka Architecture\nGrit Podcast - Chairman \u0026amp; CEO ServiceNow, Bill McDermott\nThe paradox of the derivative | Chapter 2, Essence of calculus\nThe essence of calculus\nMy bad opinions: A Distributed Systems Reading List\nMastering Dynamic Programming - How to solve any interview problem (Part 1)\nThe Truth About Building AI Startups Today\nLeaky abstraction\nGrit Podcast - CEO and Chairman of Palo Alto Networks, Nikesh Arora\nInferring Locality in OCaml | OCaml Unboxed\n\u0026ldquo;Works on my machine!\u0026rdquo;\u0026hellip; but you don\u0026rsquo;t have production data.\nClojure for the brave and true Grit Podcast - Former COO and Corporate Officer at Stripe, Claire Hughes Johnson\n4 Secrets Of High-Performing Teams\nGrit Podcast - PagerDuty CEO, Jennifer Tejada\nMark Zuckerberg at Startup School 2012\nMark Zuckerberg at Startup School 2013\nFunctional Programming is not weird: you just need some new patterns\nGrit Podcast - Founder \u0026amp; CEO Productboard, Hubert Palan w/ special guest Ilya Fushman\nRust-Lang Game Hacking - Internal Cheat on MacOS\nShould Your Startup Bootstrap or Raise Venture Capital?\nGrit with CEO and Co-Founder Rippling, Parker Conrad and Kleiner Perkins Partner, Mamoon Hamid\nWhat is the Dual Write Problem? | Microservices 101\nHow to Design a Network Messaging Protocol!\nEsse ex UBER era engenheiro civil e hoje cuida de toda a precificação da RIACHUELO\nBest practices for container isolation\nSANDBOXING CONTAINERS RUN UNTRUSTED CODE IN A CONTAINER\nContainers and Virtualization\nThe difference between VMs and containers\nSandboxing Untrusted Code\nContainers, Virtualisation, and Sandboxes: What Does it All Mean?\nContainer isolation is not safety\nFederico Ponzi: Lamport clocks\nFunctional Design: Applying past software architecture and design by Janet Carr\nEvolution of Computers (Part 3)\nEvolution of Computers (Part 1)\nEvolution of Computers (Part 2)\nDesign a Coding Contest Platform | Leetcode | Codeforces\nLinux File System Explained!\nConstructors Are Broken\nI loaded 100,000,000 rows into MySQL (fast)\nCS101++ - What Are Nibbles, Bits, Bytes and Words\nREINALDO RABELO - CEO Mercado Bitcoin | Giga Cast #17\nYuri Gricheno | CEO e Fundador da Insider | Giga Cast #12\nKubernetes Architecture\nHow Facebook Scaled a Distributed Priority Queue\nPedro Dias | Fundador \u0026amp; Presidente da Mevo | Giga Cast #10\nGabriel Benarrós - CEO \u0026amp; Founder da Ingresse | Giga Cast #2\nJoão Costa | Empreendedor - Founder \u0026amp; CEO da Zarv | Giga Cast #6\nJanuary My thoughts on OCaml\nSingle Writer Principle\nReinventing the Processor\nHow I explore domain problems cheaply and fast with OCaml: modeling a web router\nHow to build type-safe State Machines using type-state\nA quick guide to GADTs and why you ain\u0026rsquo;t gonna need them\nGitHub Actions Feels Bad\nMath is your insurance policy\nDatabase Sharding in 200 Seconds\nI\u0026rsquo;m Starting To Like This Configuration Pattern In Go\nExtra, Extra - Read All About It: Nearly All Binary Searches and Mergesorts are Broken\nThe Bulkhead Pattern: How To Make Your System Fault-tolerant\nLLMs and Programming in the first days of 2024\nA CAP tradeoff in the wild\nA data corruption bug in OpenZFS?\nRunning WebAssembly from my hobby compiler!\nLive #17 Dev Eficiente Disseca: Entrando na mente crítica de Rafael Ponte\nThe checklist manifesto (Dr. Atul Gawande, 2009)\nThe Million Dollar Matrix Multiply\n50 Founders Share How They Got Their First Customers\nHow To Go From Startup Dream To Reality\nStatQuest: Histograms, Clearly Explained\nThe Main Ideas behind Probability Distributions\nThe Normal Distribution, Clearly Explained!!!\nPopulation and Estimated Parameters, Clearly Explained!!!\nCalculating the Mean, Variance and Standard Deviation, Clearly Explained!!!\nConsumer Startup Metrics | Startup School\nwhy do arrays start at zero? (and why does THIS compile??)\nWhy Logical Clocks are Easy: Sometimes all you need is the right language.\nMartin Fowler: Version Vector\nThe Pulse: Will US companies hire fewer engineers due to Section 174?\nLessons from Bootstrapped Companies Founded by Software Engineers\nWhere we’re going, we don’t need threads: Simulating Distributed Systems\nClojure: Transient Data Structures\nWikipedia: Actor model\nWikipedia: Elixir (programming language)\nIntroducing the OCaml Local Mode | OCaml Unboxed\nKubernetes Health Checks: Liveness vs. Readiness vs. Startup Probe\nWorking with time series data in MySQL\nDesign a Stock Exchange | HLD | Data Model | Low Latency\nHaskell'23 The Evolution of Effects\nHow Rama is tested: a primer on testing distributed systems\nLessons from Writing a Compiler\nHow To Launch Anything\nHow Stacks are Handled in Go\nThe Four Team Types from Team Topologies\nMy B2B SaaS just hit 10 years old. A personal story about how it all started\nDid I Just Build A Faster AWS Lambda With WASM?\nPostgres Auditing in 150 lines of SQL\nShould I Open Source my Company?\nThe end of 0% interest rates: what it means for tech startups and the industry\nHow to keep Programming from Hurting You.\nEverything You NEED to Know About Client Architecture Patterns\nBeware! Anti-patterns in Event-Driven Architecture\nI quit my job to work full time on my open source project\nSigns that it’s time to leave a company…\nAmazon\u0026rsquo;s Silent Sacking\nHow did PayPal handle a billion daily transactions with eight virtual machines?\nDo Technical Founders Need Business Co-Founders?\nScaling Golang to 192 Cores with Heavy I/O\nThe tech layoffs continue\nDeploying And Running VMs On Kubernetes\nProgramming Clojure, Third Edition\nThe Beauty of Functional Languages in Deep Learning — Clojure and Haskell\nClojure Concurrency Tutorial\nNotes on Virtual Threads and Clojure\nSam Altman\u0026rsquo;s Advice To People In Their 20\u0026rsquo;s\nConstruindo um servidor de live streaming com NGINX\nMacOS Game Hacking In Rust-Lang\nPATTERN SCANNING 101 (for game hackers)\nLearn Reverse Engineering (for hacking games)\nTestable IO in Haskell\nFunctional architecture is Ports and Adapters\nCats Effect 3 - Racing IOs\nA developer’s guide to prompt engineering and LLMs\nRetrieval Augmented Generation (RAG): What, Why and How?\nWhy You NEED a DRIVER (for hacking games)\nAWS API Gateway Introduction\nAsynchronous, Concurrent, or Parallel?\nSystem Models\nClojure: core.async Walkthrough\nRespondendo perguntas sobre Empreender nos dias de Hoje\nOCaml Survey: Developers\u0026rsquo; Perception, Interest, and Perceived Barriers\nImplement a DNS-based Load Balancer\nSam Altman : How to Build the Future\nMark Zuckerberg : How to Build the Future\nAdvice from the Top 1% of Software Engineer l Exaltitude Jean Lee\nClojure Data Structures Tutorial\nHENRIQUE DUBUGRAS - Co-CEO Brexhq | Giga Cast #16\nMastering Concurrent Processes with core.async\nFrom 2005: Four young internet entrepreneurs\nMichael Seibel - How to get your first ten customers?\nHow do Digital and Analog Clocks Work?\nRSA is deceptively simple (and fun)\nGoodbye long procedural code! Fix it with workflows\nRedis®* Persistence Deep Dive\nCODING Jorge January 2024 ARTICLE Using mem::take to reduce heap allocations\nModern software engineering for a small team\nDeveloper Initiates I/O Operation. You Won\u0026rsquo;t Believe What Happens Next.\na strange but powerful interview question\nMy Journey from Haskell to Go to Rust\nDUAL WRITE: MANTENDO A CONSISTÊNCIA\nAlexandre Liuzzi | Co-Founder na Remessa Online | Giga Cast #9\nStartups Are Shutting Down!\nPedro Rabelo - Sócio Fundador da Bagy | Giga Cast #4\nLeaderless Replication In Distributed System\nWhat Is a Graph Database?\nAlexandre Dubugras e Renner Lucena - GigaCast #1\nSorting in C: Why the double pointers when sorting pointers? (qsort)\n398 - Sênior, Staff e acima: os três pilares do seu trabalho 🚀 | theWiseDev Staff+\nAnnotating OCaml Variables and Returns with local_ | OCaml Unboxed\nmachine code for function calls\nComo funciona uma plataforma de vídeo para devs\nOperate at all levels\nAlexandre Dubugras e Renner Lucena - GigaCast #11 [EPISÓDIO ESPECIAL]\nDiogo Públio | Founder e CEO da Speedio | Giga Cast #8\nHow a Machine Becomes a Router | ip_forward\nJota Junior - Founder da Alude | Giga Cast #3\nRoberta Antunes - Co-Founder da Hurb e Sócia da Hashdex | Giga Cast #5\nAnother Amazing Use Case For The FOP Pattern In Go\nEnums aren\u0026rsquo;t evil. Conditionals everywhere are\nAlexandre Dubugras e Renner Lucena - GigaCast #15\nYou Suck at Marketing\nSentry: From the Beginning\nFunding Sentry\nSingle Leader Replication\nHow A Steam Bug Deleted Someone’s Entire PC\nOptimizing for Taste\nEdsger Dijkstra: The Man Who Carried Computer Science on His Shoulders\nSocial 175 com Henrique Dubugras, co-criador do Pagar.me\nWhen Optimisations Work, But for the Wrong Reasons\nGrit Podcast - Founder and co-CEO Brex, Henrique Dubugras\nCatharsis Episode 1: Pedro Franceschi\nHow to do things if you\u0026rsquo;re not that smart and don\u0026rsquo;t have any talent\nEle saiu da PLANILHA e virou TECH LEAD em 2 anos\nHow to sort part of an array in C\nHow Disney Hotstar Captures One Billion Emojis!\nGrit Podcast - CEO GitHub, Thomas Dohmke\nComo entrar na Y Combinator com Alexandre Dubugras, Alexandre Maluli, e Rodrigo Tognini\nChasing the American Dream - Pedro Franceschi\nTom Blomfield: How I Created Two Billion-Dollar Fintech Startups\nAlexandre Zolko | CEO CRM\u0026amp;Bônus | Giga Cast #13\nUnderstanding OCaml Locals as a Mode (with Sub-Moding) | OCaml Unboxed\n","permalink":"https://poorlydefinedbehaviour.github.io/posts/reading_list_2024/","summary":"\u003ch1 id=\"the-list-of-things-i-read-or-watched-in-2024\"\u003eThe list of things I read or watched in 2024\u003c/h1\u003e\n\u003ch2 id=\"december\"\u003eDecember\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://www.youtube.com/watch?v=bnmln9HtqEI\"\u003eCatching up with async Rust\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://aphyr.com/posts/378-seconds-since-the-epoch\"\u003eSeconds Since the Epoch\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://muratbuffalo.blogspot.com/2024/12/use-of-time-in-distributed-databases_30.html\"\u003eUse of Time in Distributed Databases (part 3): Synchronized clocks in databases\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://muratbuffalo.blogspot.com/2024/12/use-of-time-in-distributed-databases_26.html\"\u003eUse of Time in Distributed Databases (part 2): Use of logical clocks in databases\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://www.firezone.dev/blog/sans-io\"\u003esans-IO: The secret to effective Rust for network services\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://samwho.dev/turing-machines/\"\u003eTuring machines\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://muratbuffalo.blogspot.com/2024/12/use-of-time-in-distributed-databases.html\"\u003eUse of Time in Distributed Databases (part 1)\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://jack-vanlightly.com/analyses/2024/12/22/verifying-kafka-transactions-diary-entry-5-addpartitionstotxn-in-tla\"\u003eVerifying Kafka transactions - Diary entry 5 - AddPartitionsToTxn in TLA+\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://www.youtube.com/watch?v=sPSPEgz3o9U\"\u003eJack Vanlightly — Distributed systems showdown — TLA + vs real code\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://www.youtube.com/watch?v=eW6Zv0X53T4\"\u003eDr. TLA+ Series - Fast Paxos\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://hillelwayne.com/post/refinement/\"\u003eSpecification Refinement\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://www.youtube.com/watch?v=QpAstGlAiWI\"\u003eHow OCaml Represents Values in Memory\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://www.youtube.com/watch?v=6Kwx8zfGW0Y\"\u003eDr. TLA+ Series - Raft\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://www.destroyallsoftware.com/compendium/network-protocols?share_key=97d3ba4c24d21147\"\u003eNetwork protocols for anyone who knows a programming language\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://buttondown.com/hillelwayne/archive/formally-modeling-dreidel-the-sequel/\"\u003eFormally modeling dreidel, the sequel\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://www.youtube.com/watch?v=vEaJ9tH5NAM\"\u003eProactively monitor user journeys with Grafana Cloud Synthetic Monitoring\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://www.youtube.com/watch?v=zCaJSrTmUFA\"\u003eDr. TLA+ Series: Paxos - Andrew Helwer\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://pron.github.io/posts/tlaplus_part2\"\u003eTLA+ in Practice and Theory Part 2: The + in TLA+\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://pron.github.io/posts/tlaplus_part1\"\u003eTLA+ in Practice and Theory Part 1: The Principles of TLA+\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://www.youtube.com/watch?v=RpY14Yleyzo\"\u003eWeeks Of Debugging Can Save You Hours of TLA+\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://www.sougou.io/a-more-flexible-paxos/\"\u003eA More Flexible Paxos\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://muratbuffalo.blogspot.com/2016/11/modeling-paxos-and-flexible-paxos-in.html\"\u003eModeling Paxos and Flexible Paxos in Pluscal and TLA+\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://www.mydistributed.systems/2021/04/paxos.html\"\u003eThe Paxos algorithm, when presented in plain English, is very simple\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://www.mydistributed.systems/2022/06/some-practical-tips-on-using-tla-and-p.html\"\u003ePractical Tips on using TLA+ and P\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://medium.com/@polyglot_factotum/modelling-a-message-passing-bug-with-tla-baaf090a688d\"\u003eModelling the archetype of a message-passing bug with TLA+\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://surfingcomplexity.blog/2018/12/24/tla-is-hard-to-learn/\"\u003eTLA+ is hard to learn\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://elliotswart.github.io/pragmaticformalmodeling/\"\u003ePragmatic formal modeling\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://muratbuffalo.blogspot.com/2024/12/utilizing-highly-synchronized-clocks-in.html\"\u003eUtilizing highly synchronized clocks in distributed databases\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://www.youtube.com/watch?v=p_ae4BFESj4\"\u003eMost Important Cloud Concepts - Episode 3 - Autoscaling\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://www.youtube.com/watch?v=PB_2g24e-Ys\"\u003eMost Important Cloud Concepts - Episode 2 - Load Balancing\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://en.wikipedia.org/wiki/Formal_methods\"\u003eFormal methods\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://daniel.haxx.se/blog/2021/04/02/where-is-http-3-right-now/\"\u003eWhere is HTTP/3 right now?\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://doc.rust-lang.org/nightly/nomicon/leaking.html\"\u003eRust nomicon: Leaking\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://lamport.azurewebsites.net/tla/future.pdf\"\u003eThe Future of TLA+\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://jack-vanlightly.com/blog/2024/12/5/an-introduction-to-symmetry-in-tla\"\u003eAn introduction to symmetry in TLA+\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://tschottdorf.github.io/single-decree-paxos-tla-compare-and-swap\"\u003ePaxos on Steroids and a Crash Course in TLA+\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://muratbuffalo.blogspot.com/2023/09/a-snapshot-isolated-database-modeling.html\"\u003eA snapshot isolated database modeling in TLA+\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://en.wikipedia.org/wiki/Crash-only_software\"\u003eCrash-only software\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://buttondown.com/jaffray/archive/what-are-the-magical-clocks-for/\"\u003eWhat are the Magical Clocks for?\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://www.youtube.com/watch?v=5sw9XJokAqw\"\u003eThreads On Multicore Systems\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://research.swtch.com/plmm\"\u003eProgramming Language Memory Models: Memory Models part 2\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://jack-vanlightly.com/blog/2023/10/10/a-primer-on-formal-verification-and-tla\"\u003eA primer on formal verification and TLA+\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://jack-vanlightly.com/analyses/2024/12/4/verifying-kafka-transactions-diary-entry-3-getting-confidence-in-the-tla-spec\"\u003eVerifying Kafka transactions - Diary entry 3 - Getting confidence in the TLA+ spec\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://muratbuffalo.blogspot.com/2024/04/tla-conference-2024.html\"\u003eTLA+ conference 2024\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://turso.tech/blog/introducing-limbo-a-complete-rewrite-of-sqlite-in-rust\"\u003eIntroducing Limbo: A complete rewrite of SQLite in Rust\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://www.youtube.com/watch?v=DLg5tyxmXqQ\"\u003eThe Computer That Runs The World\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://www.hillelwayne.com/post/fairness/\"\u003eTLA+: Weak and Strong Fairness\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://danp.net/posts/synctest-experiment/\"\u003eComing in Go 1.24: testing/synctest experiment for time and concurrency testing\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"http://hh360.user.srcf.net/blog/2016/08/majority-agreement-is-not-necessary/\"\u003eMajority agreement is not necessary for consensus\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://blog.the-pans.com/state-machine-and-sync/\"\u003eState Machine and Synchronization\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://www.youtube.com/watch?v=H_XMqRhLhic\"\u003eHow To Make The Most Out of Your 20s\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://jack-vanlightly.com/blog/2024/12/6/to-be-atomic-or-non-atomic-that-is-the-question-fizzbee\"\u003eTo be atomic or non-atomic, that is the question (Fizzbee)\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://jack-vanlightly.com/analyses/2024/12/5/verifying-kafka-transactions-diary-entry-4-writing-an-initial-fizzbee-spec\"\u003eVerifying Kafka transactions - Diary entry 4 - Writing an initial Fizzbee spec\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://boringtechnology.club\"\u003eChoose Boring Technology\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://egoless.engineering/\"\u003eEgoless engineering\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://avi.im/blag/2024/s3-log/\"\u003eBuilding a distributed log using S3 (under 150 lines of Go)\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://jack-vanlightly.com/analyses/2024/12/3/verifying-kafka-transactions-diary-entry-2-writing-an-initial-tla-spec\"\u003eVerifying Kafka transactions - Diary entry 2 - Writing an initial TLA+ spec\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://jack-vanlightly.com/analyses/2024/12/2/verifying-kafka-transactions-diary-entry-1-a-first-step\"\u003eVerifying Kafka transactions - Diary entry 1 - A first step\u003c/a\u003e\u003c/p\u003e","title":"Reading list 2024"},{"content":"𝔇𝔢𝔱𝔢𝔯𝔪𝔦𝔫𝔦𝔰𝔱𝔦𝔠 𝔰𝔦𝔪𝔲𝔩𝔞𝔱𝔦𝔬𝔫 𝔱𝔢𝔰𝔱𝔦𝔫𝔤 deterministic: of or relating to a process or model in which the output is determined solely by the input and initial conditions, thereby always returning the same results ( stochastic ): The algorithms are simple and deterministic, so the results are predictable and reproducible.\nExample based testing Example based testing works fine for simple cases where there\u0026rsquo;s only a small number of actions that matter.\nlet%test_unit \u0026#34;append entries: truncates the log on entry conflict\u0026#34; = let storage = make { dir = Test_util.temp_dir () } in (* Leader adds some entries to the replica\u0026#39;s log. *) append_entries storage (last_log_index storage) [ { term = 1L; data = \u0026#34;1\u0026#34; }; { term = 2L; data = \u0026#34;2\u0026#34; }; { term = 3L; data = \u0026#34;3\u0026#34; }; ]; (* Another leader overrides the replica\u0026#39;s log. *) append_entries storage 2L [ { term = 4L; data = \u0026#34;3\u0026#34; }; { term = 4L; data = \u0026#34;4\u0026#34; } ]; assert (entry_at_index storage 1L = Some { term = 1L; data = \u0026#34;1\u0026#34; }); assert (entry_at_index storage 2L = Some { term = 2L; data = \u0026#34;2\u0026#34; }); (* Entry at index 3 has been overwritten. *) assert (entry_at_index storage 3L = Some { term = 4L; data = \u0026#34;3\u0026#34; }); (* Entry at index 4 is new. *) assert (entry_at_index storage 4L = Some { term = 4L; data = \u0026#34;4\u0026#34; }) It becomes way harder to think of and write the examples when the bugs you\u0026rsquo;re looking for only happen after several events that need to happen in a specific order.\nA bug found deep in the input tree. Property based testing Property based testing is a testing technique where a wide range of inputs are generated automatically unlike traditional example based testing where the inputs have to be manually thought of and written. The idea is that by auto generating inputs, the system will end up being tested with inputs that the programmer wouldn\u0026rsquo;t think of otherwise.\nBasic input\nProblem: Create a function that given a vec of integers nums and an integer k, returns the kth largest element in the vec.\nIn this case, the implementation uses a max heap to find the kth largest element in the vec in O(k log n).\nfn find_kth_largest(nums: Vec\u0026lt;i32\u0026gt;, k: i32) -\u0026gt; i32 { let mut heap: BinaryHeap\u0026lt;_\u0026gt; = nums.into_iter().collect(); for _ in 0..k as usize - 1 { let _ = heap.pop(); } heap.pop().unwrap() } The test generates a random Vec\u0026lt;i32\u0026gt;, finds the kth largest element by sorting the vec \u0026ndash; using a different and probably easier to understand implementation than the function being tested \u0026ndash; and asserts that the function returns the same value.\n#[cfg(test)] mod tests { use super::*; use quickcheck::quickcheck; fn check(nums: Vec\u0026lt;i32\u0026gt;, k: usize, f: fn(Vec\u0026lt;i32\u0026gt;, i32) -\u0026gt; i32) -\u0026gt; bool { if nums.is_empty() { return true; } let k = 1 + k % nums.len(); let result = f(nums.clone(), k as i32); let mut nums = nums; nums.sort_unstable(); nums.reverse(); let expected = nums[k - 1]; expected == result } quickcheck! { #[test] fn test_find_kth_largest(nums: Vec\u0026lt;i32\u0026gt;, k: usize) -\u0026gt; bool { check(nums, k, find_kth_largest) } } } Ideally, one or more properties would be defined and checked against the output but starting simple by just checking that the output makes sense works well in a lot of cases.\nfn sort(nums: \u0026amp;mut Vec\u0026lt;i32\u0026gt;) { ... } #[cfg(test)] mod tests { use quickcheck::quickcheck; use super::*; quickcheck! { #[test] fn test_sort(nums: Vec\u0026lt;i32\u0026gt;) -\u0026gt; bool { let mut nums = nums; sort(\u0026amp;mut nums); if !nums.is_empty() { for i in 0..nums.len()-1 { assert!(nums[i] \u0026lt;= nums[i+1]); } } true } } } Property: After sorting, every nums[i] is less than or equal to nums[i + 1].\nGenerate a large number of inputs randomly instead of writing just a few of them manually. More sophisticated inputs\nIt may be possible to interact with the system under test in several ways. Imagine that a max heap with a different implementation from the std library was being written. Sometimes a bug will be found only when a specific set of events happen in a specific order, popping from an empty heap, pushing two elements and popping 3 times, for example.\nInstead of thinking of all possible operation interleavings, generate a list of operations at random and apply them to the heap. The std heap could be used as a model \u0026ndash; by having the same operations applied to it \u0026ndash; to check that our heap behaves correctly from the user\u0026rsquo;s point of view. Run the test several times to increase the chance of a finding a bug.\n#[cfg(test)] mod tests { ... quickcheck! { #[test] fn test_heap(actions: Vec\u0026lt;Action\u0026gt;) -\u0026gt; bool { let mut heap = Heap::new(); let mut model = BinaryHeap::new(); for action in actions { match action { Action::Push(v) =\u0026gt; { model.push(v); heap.push(v); }, Action::Pop =\u0026gt; { assert_eq!(model.pop(), heap.pop()); } } } true } } } The same idea could be used to test other systems, the difference is that instead of using the std heap, a simplified model of the real thing \u0026ndash; that hopefully behaves correctly \u0026ndash; would be used, for example, an in memory map that models a disk-based key-value store. Here\u0026rsquo;s an example of a append-only log in Go that uses an in-memory slice as the model.\nfunc TestFileStorage(t *testing.T) { t.Parallel() const ( OpAppendEntries = \u0026#34;AppendEntries\u0026#34; OpTruncateLogStartingFrom = \u0026#34;TruncateLogStartingFrom\u0026#34; OpGetEntryAtIndex = \u0026#34;GetEntryAtIndex\u0026#34; OpGetBatch = \u0026#34;GetBatch\u0026#34; OpLastLogIndex = \u0026#34;LastLogIndex\u0026#34; ) rapid.Check(t, func(t *rapid.T) { storage, err := NewFileStorage(fmt.Sprintf(\u0026#34;%s/raft-go/%s\u0026#34;, os.TempDir(), uuid.New().String())) assert.NoError(t, err) model := newModel() ops := rapid.SliceOf(rapid.SampledFrom([]string{ OpAppendEntries, OpTruncateLogStartingFrom, OpGetEntryAtIndex, OpGetBatch, OpLastLogIndex, })). Draw(t, \u0026#34;ops\u0026#34;) for _, op := range ops { switch op { case OpAppendEntries: entries := rapid.SliceOf(entryGenerator()).Draw(t, \u0026#34;append: entries\u0026#34;) assert.NoError(t, storage.AppendEntries(entries)) assert.NoError(t, model.AppendEntries(entries)) t.Logf(\u0026#34;appended %d entries\\n\u0026#34;, len(entries)) case OpTruncateLogStartingFrom: maybeExistingIndex := rapid.Uint64Range(1, uint64(len(model.entries)*2)+1).Draw(t, \u0026#34;truncate: maybeExistingIndex\u0026#34;) storageErr := storage.TruncateLogStartingFrom(maybeExistingIndex) modelErr := model.TruncateLogStartingFrom(maybeExistingIndex) t.Logf(\u0026#34;truncated from index %d len(model.entries)=%+v storageErr=%+v modelErr=%+v\\n\u0026#34;, maybeExistingIndex, len(model.entries), storageErr, modelErr) assert.ErrorIs(t, storageErr, modelErr) case OpGetEntryAtIndex: maybeExistingIndex := rapid.Uint64Range(1, uint64(len(model.entries)*2)+1).Draw(t, \u0026#34;get entry: maybeExistingIndex\u0026#34;) storageEntry, storageErr := storage.GetEntryAtIndex(maybeExistingIndex) modelEntry, modelErr := model.GetEntryAtIndex(maybeExistingIndex) t.Logf(\u0026#34;getting entry at index %d storageErr=%+v modelErr=%+v\\n\u0026#34;, maybeExistingIndex, storageErr, modelErr) assert.Equal(t, modelEntry, storageEntry) assert.ErrorIs(t, storageErr, modelErr) case OpGetBatch: maybeExistingIndex := rapid.Uint64Range(1, uint64(len(model.entries)*2)+1).Draw(t, \u0026#34;get batch: maybe existing index\u0026#34;) batchSize := rapid.Uint64Range(1, uint64(len(model.entries)*2)+1).Draw(t, \u0026#34;get batch: batch size\u0026#34;) storageBatch, storageErr := storage.GetBatch(maybeExistingIndex, batchSize) modelBatch, modelErr := model.GetBatch(maybeExistingIndex, batchSize) t.Logf(\u0026#34;get batch index=%d batchSize=%d len(storageBatch)=%+v storageErr=%+v len(modelBatch)=%+v modelErr=%+v\\n\u0026#34;, maybeExistingIndex, batchSize, len(storageBatch), storageErr, len(modelBatch), modelErr, ) assert.ErrorIs(t, storageErr, modelErr) assert.Equal(t, modelBatch, storageBatch) case OpLastLogIndex: storageLastLogIndex := storage.LastLogIndex() modelLastLogIndex := model.LastLogIndex() assert.Equal(t, modelLastLogIndex, storageLastLogIndex) default: panic(fmt.Sprintf(\u0026#34;unexpected op: %s\u0026#34;, op)) } } }) } Deterministic simulation testing For more complicated systems with several components, it may be complicated to write useful tests. What if the input space could be explored automatically by generating inputs in the same way inputs are generated for property based testing and the events that led to the bug replayed without effort? After defining a model of how the system should work \u0026ndash; which actions and events the system should be able to handle \u0026ndash; component failures can be injected according to the failure model \u0026ndash; the failures the system should be able to handle \u0026ndash;.\nStart by removing non-determinism introduced by things such as threads or iterating over a data structure that yields a different order in each iteration. This means moving IO to the edges of the system and replacing the real implementation \u0026ndash; where it is not deterministic or fast enough \u0026ndash; with a fake version that behaves like the real thing.\nNext, generate actions such as simulating an user request using a seeded prng. When a bug is found, the simulation can be re-run with the same seed to hit the same bug over and over again.\nBugs are reproducible by running the simulation with the seed that was used when the bug was found. Example: Applying deterministic simulation testing to single-decree Paxos Given a set of computers that can propose values, how to get the computers to decide on a value?\nThe chosen value must be proposed by one of the computers Only a single value can be chosen Paxos is one of the algorithms that can be used to solve the consensus problem.\nThe model Computers run at different speeds Computers may stop and restart at any time Messages sent from one computer to another can be lost, delayed or duplicated Single-decree Paxos The algorithm can be explained in two phases:\nPhase 1\nA computer that proposes values is called a proposer. A value is proposed by broadcasting a Prepare(n) message to the computers in the cluster where n is a unique monotonically increasing number. When a computer receives a Prepare(n) message, it responds with Ok(accepted_proposal_number, accepted_value) if n is the greatest proposal number it has seen so far where accepted_proposal_number and accepted_value are from latest proposal the computer has accepted, if any. impl Replica { // Phase 1. fn on_start_proposal(\u0026amp;mut self, value: String) { let proposal_number = self.next_proposal_number().unwrap(); self.broadcast_prepare(proposal_number, value); } // Phase 1. fn on_prepare(\u0026amp;mut self, input: PrepareInput) { if input.proposal_number \u0026gt; self.state.min_proposal_number { let mut state = self.state.clone(); state.min_proposal_number = input.proposal_number; self.storage.store(\u0026amp;state).unwrap(); self.state = state; self.bus.send_prepare_response( input.from_replica_id, PrepareOutput { from_replica_id: self.config.id, request_id: input.request_id, accepted_proposal_number: self.state.accepted_proposal_number, accepted_value: self.state.accepted_value.clone(), }, ); } } ... Phase 2\nAfter broadcasting Prepare(n), the proposer waits for responses from a majority of computers in the cluster After receiving responses from the majority, the proposer broadcasts a Accept(n, v) message to the computers in the cluster where n is the same proposal number sent in Prepare(n) message and v is the accepted_value from the message with the highest accepted_proposal_number received in response to the Prepare(n) messages or the value the proposer would like the computers to decide on if no proposals have been accepted yet. When a computer receives a Accept(n, v) message, it responds with Ok() if n is greater than or equal to the greatest proposal number it has seen in Phase 1. The last used proposal number, the highest proposal number seen by a computer, the accepted proposal number and the accepted value are stored in durable storage. ... // Phase 2. fn on_prepare_response(\u0026amp;mut self, input: PrepareOutput) { let majority = self.majority(); let request_id = input.request_id; if let Some(req) = self.inflight_requests.get_mut(\u0026amp;request_id) { req.responses.insert(input); if req.responses.len() \u0026lt; majority { return; } let value = req .responses .iter() .filter(|response| response.accepted_proposal_number.is_some()) .max_by_key(|response| response.accepted_proposal_number) .map(|response| response.accepted_value.clone().unwrap()) .unwrap_or_else(|| req.proposed_value.clone().unwrap()); let proposal_number = req.proposal_number; self.broadcast_accept(proposal_number, value); self.inflight_requests.remove(\u0026amp;request_id); } } // Phase 2. fn on_accept(\u0026amp;mut self, input: AcceptInput) { if input.proposal_number \u0026gt;= self.state.min_proposal_number { let mut state = self.state.clone(); state.min_proposal_number = input.proposal_number; state.accepted_proposal_number = Some(input.proposal_number); state.accepted_value = Some(input.value); self.storage.store(\u0026amp;state).unwrap(); self.state = state; self.bus.send_accept_response( input.from_replica_id, AcceptOutput { from_replica_id: self.config.id, request_id: input.request_id, proposal_number: input.proposal_number, }, ); } } } An example of a Paxos round. The simulation\nThe network calls were replaced by a fake implementation to make it easier to drop, duplicate and delay messages. Insteading of sending messages using TCP or UDP, messages are held in an in-memory queue and are delivered by calling a method since every replica is running in memory.\nstruct SimMessageBus { queue: RefCell\u0026lt;MessageQueue\u0026gt;, } Generate a seed for the prng. The prng will be used to generate actions during the simulation. The seed can be passed as input the program to generate the same sequence of inputs after a test failure.\n#[cfg(test)] mod tests { ... #[test] fn action_simulation() -\u0026gt; Result\u0026lt;()\u0026gt; { let seed: u64 = std::env::var(\u0026#34;SEED\u0026#34;) .map(|v| v.parse::\u0026lt;u64\u0026gt;().unwrap()) .unwrap_or_else(|_| rand::thread_rng().gen()); eprintln!(\u0026#34;SEED={seed}\u0026#34;); let rng = Rc::new(RefCell::new(rand::rngs::StdRng::seed_from_u64(seed))); ... } } The simulator uses the seeded prng to generate actions, which include actions such as delivering a message, crashing a replica, generating a user request and more. The simulator generates max_actions actions where each action is generated based on the current state of the system, this is done to improve the number of interesting input sequences.\nIt is not that useful to crash a replica that\u0026rsquo;s already in the crashed state or to crash more than F replicas if we are interested in testing that a cluster with 2F + 1 replicas can make progress as long as the majority of replicas are up. In general, actions that trigger failures should be generated according to the failure model.\nstruct ActionSimulator { config: ActionSimulatorConfig, rng: Rc\u0026lt;RefCell\u0026lt;StdRng\u0026gt;\u0026gt;, bus: Rc\u0026lt;SimMessageBus\u0026gt;, replicas: Vec\u0026lt;Replica\u0026gt;, } enum Action { SendUserRequest, CrashReplica, RestartReplica, DeliverMessage, DropMessage, DuplicateMessage, } impl ActionSimulator { fn next_action(\u0026amp;mut self) -\u0026gt; Action { // Use the prng + knowledge about the current system state to generate the next action. // It\u0026#39;s not that useful to crash a replica that\u0026#39;s already in the crashed state. } fn run(\u0026amp;mut self) { for i in 0..self.config.max_actions { let action = self.next_action(); match action { Action::SendUserRequest =\u0026gt; { // Trigger a proposal from a replica. } Action::CrashReplica =\u0026gt; { // Crash a random replica. } Action::RestartReplica =\u0026gt; { // Restart a random replica. } Action::Delivermessage =\u0026gt; { // Deliver a random message from the messages in flight. } Action::DropMessage =\u0026gt; { // Drop a random message from the messages in flight. } Action::DuplicateMessage =\u0026gt; { // Duplicate a random message from the messages in flight. } } ... } } } When a Action::DeliverMessage is generated, a random message is removed from the queue and delivered to the target replica:\nfn pop(\u0026amp;mut self) -\u0026gt; Option\u0026lt;PendingMessage\u0026gt; { if self.items.is_empty() { return None; } let i = self .rng .as_ref() .borrow_mut() .gen_range(0..self.items.len()); let item = self.items.swap_remove(i); Some(item) } Replicas get instantiated and passed to the simulator along with the configuration. The simulation will run 10000 times where each run will generate 1000 actions (e.g. CrashReplica, DeliverMessage). This simulator is actually running several threads with one simulation each to find bugs faster. The simulation in each thread is deterministic and isolated.\n#[cfg(test)] mod tests { ... #[test] fn action_simulation() -\u0026gt; Result\u0026lt;()\u0026gt; { let count = if std::env::var(\u0026#34;SEED\u0026#34;).is_ok() { 1 } else { std::env::var(\u0026#34;MAX_THREADS\u0026#34;) .map(|v| v.parse::\u0026lt;usize\u0026gt;().unwrap()) .unwrap_or_else(|_| std::thread::available_parallelism().unwrap().get()) }; let max_iters = std::env::var(\u0026#34;MAX_ITERS\u0026#34;) .map(|v| v.parse::\u0026lt;u64\u0026gt;().unwrap()) .unwrap_or_else(|_| 10_000); let max_actions = std::env::var(\u0026#34;MAX_ACTIONS\u0026#34;) .map(|v| v.parse::\u0026lt;u32\u0026gt;().unwrap()) .unwrap_or_else(|_| 100); eprintln!(\u0026#34;Spawning {count} threads\u0026#34;); let handles = (0..count) .map(|thread_id| { std::thread::Builder::new() .name(format!(\u0026#34;Thread({thread_id})\u0026#34;)) .spawn(move || { let seed: u64 = std::env::var(\u0026#34;SEED\u0026#34;) .map(|v| v.parse::\u0026lt;u64\u0026gt;().unwrap()) .unwrap_or_else(|_| rand::thread_rng().gen()); eprintln!(\u0026#34;SEED={seed}\u0026#34;); let rng = Rc::new(RefCell::new(rand::rngs::StdRng::seed_from_u64(seed))); for i in 0..max_iters { if i % 1_000 == 0 { eprintln!(\u0026#34;Thread({thread_id}) Running simulation {i}\u0026#34;); } let simulator_config = { let mut rng = rng.borrow_mut(); ActionSimulatorConfig { max_actions, max_user_requests: rng.gen::\u0026lt;u32\u0026gt;() % 100 + 1, } }; let activity_log = Rc::new(RefCell::new(ActivityLog::new())); let servers = vec![1, 2, 3]; let majority = servers.len() / 2 + 1; let bus: Rc\u0026lt;SimMessageBus\u0026gt; = Rc::new(SimMessageBus::new( Rc::clone(\u0026amp;rng), Oracle::new(majority, Rc::clone(\u0026amp;activity_log)), Rc::clone(\u0026amp;activity_log), )); let nodes: Vec\u0026lt;_\u0026gt; = servers .iter() .map(|id| { let fs = Rc::new(SimFileSystem::new()); Node { replica: Replica::new( Config { id: *id, replicas: servers.clone(), }, Rc::clone(\u0026amp;bus) as Rc\u0026lt;dyn contracts::MessageBus\u0026gt;, Rc::new( FileStorage::new( Rc::clone(\u0026amp;fs) as Rc\u0026lt;dyn contracts::FileSystem\u0026gt;, PathBuf::from(\u0026#34;dir\u0026#34;), ) .unwrap(), ), ), fs, } }) .collect(); let mut sim = ActionSimulator::new( simulator_config, Rc::clone(\u0026amp;rng), nodes, Rc::clone(\u0026amp;bus), Rc::clone(\u0026amp;activity_log), ); let result = std::panic::catch_unwind(move || { sim.run(); assert!(sim.bus.is_empty()); }); if result.is_err() { activity_log.borrow_mut().print_events(); eprintln!(\u0026#34;SEED={seed}\u0026#34;); std::process::exit(1); } } }) }) .collect::\u0026lt;Result\u0026lt;Vec\u0026lt;_\u0026gt;, _\u0026gt;\u0026gt;()?; for handle in handles { handle.join().unwrap(); } Ok(()) } } In a sense, the number of times the simulation runs can be understood as the max number of paths we would like to visit from an input tree and max_actions can be thought of as the depth of every path in the tree. The simulation may end up visiting the same path multiple times, solving that is an optimization for the future.\nAn example of a path in the input tree where a message is delivered and then the replica crashes. Verifying the system state is valid\nAt the moment, the simulation doesn\u0026rsquo;t do anything because there are no assertions. Let\u0026rsquo;s add an oracle \u0026ndash; something that has a bird\u0026rsquo;s eye view of the system \u0026ndash; that will receive a copy of the messages sent from replicas.\nimpl Oracle { pub fn on_accept_sent(\u0026amp;mut self, _to_replica_id: ReplicaId, input: \u0026amp;AcceptInput) { ... } pub fn on_proposal_accepted(\u0026amp;mut self, _to_replica_id: ReplicaId, output: \u0026amp;AcceptOutput) { ... } } The basic oracle keeps track of accepted proposals, after a proposal has been accepted by a majority of replicas, it asserts that no other value is even chosen.\nIn this case, the system state is seen from the perspective of an outside observer that only has access to the messages sent from the replicas but there\u0026rsquo;s nothing stopping assertions from being added to the internal modules or having the oracle inspect the internal state of the system under test.\nEven basic simulations can catch bugs. Let\u0026rsquo;s ignore the requirement the proposal numbers must be unique by accepting proposal numbers that are the highest the replica has seen.\nimpl Replica { fn on_prepare(\u0026amp;mut self, input: PrepareInput) { --\u0026gt; Change from `\u0026gt;` to `\u0026gt;=` // if input.proposal_number \u0026gt; self.state.min_proposal_number { if input.proposal_number \u0026gt;= self.state.min_proposal_number { ... } } ... } Run the simulation:\ncargo t action_simulation -- --nocapture ... thread \u0026#39;Thread(3)\u0026#39; panicked at src/simulation/oracle.rs:75:17: assertion failed: `(left == right)` left: `Some(\u0026#34;V(1, 44)\u0026#34;)`, right: `Some(\u0026#34;V(2, 93)\u0026#34;)`: majority of replicas decided on a different value after a value was accepted note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace SEED=6948436056757512111 Replay the bug by running the simulation with the seed to get the same sequence of inputs:\nSEED=6948436056757512111 cargo t action_simulation -- --nocapture ... [BUS] Replica(1) -\u0026gt; Replica(3) RECEIVED Prepare(RID(R1, P9)) [BUS] Replica(3) -\u0026gt; Replica(1) RECEIVED AcceptResponse(RID(R1, P12), 12) [BUS] Replica(1) -\u0026gt; Replica(1) RECEIVED PrepareResponse(RID(R1, P12), None, None) [ORACLE] value accepted by majority of replicas: majority=2 RID(R1, P12) value=V(1, 44) replicas=[2, 3] [BUS] Replica(2) -\u0026gt; Replica(1) RECEIVED AcceptResponse(RID(R1, P12), 12) [BUS] Replica(2) -\u0026gt; Replica(1) RECEIVED Accept(RID(R2, P12), 12, V(2, 93)) [BUS] Replica(1) -\u0026gt; Replica(2) QUEUED AcceptResponse(RID(R2, P12), 12) [BUS] Replica(2) -\u0026gt; Replica(2) RECEIVED AcceptResponse(RID(R2, P12), 12) [ORACLE] value accepted by majority of replicas: majority=2 RID(R2, P12) value=V(2, 93) replicas=[3, 2] SEED=6948436056757512111 The simulator will generate 1000 actions by default but it only needs to generate 2 actions to find this bug. The advantage of generating less actions is that the error trace will contain less events:\nMAX_ACTIONS=2 cargo t action_simulation -- --nocapture ... [BUS] Replica(2) -\u0026gt; Replica(2) QUEUED AcceptResponse(RID(R2, P1), 1) [BUS] Replica(1) -\u0026gt; Replica(2) RECEIVED AcceptResponse(RID(R2, P1), 1) [ORACLE] value accepted by majority of replicas: majority=2 RID(R2, P1) value=V(2, 0) replicas=[2, 1] [BUS] Replica(2) -\u0026gt; Replica(2) RECEIVED AcceptResponse(RID(R2, P1), 1) [BUS] Replica(1) -\u0026gt; Replica(1) RECEIVED Accept(RID(R1, P1), 1, V(1, 1)) [BUS] Replica(1) -\u0026gt; Replica(1) QUEUED AcceptResponse(RID(R1, P1), 1) [BUS] Replica(2) -\u0026gt; Replica(2) RECEIVED PrepareResponse(RID(R2, P1), None, None) [BUS] Replica(2) -\u0026gt; Replica(3) RECEIVED Accept(RID(R2, P1), 1, V(2, 0)) [BUS] Replica(3) -\u0026gt; Replica(2) QUEUED AcceptResponse(RID(R2, P1), 1) [BUS] Replica(1) -\u0026gt; Replica(2) RECEIVED Accept(RID(R1, P1), 1, V(1, 1)) [BUS] Replica(2) -\u0026gt; Replica(1) QUEUED AcceptResponse(RID(R1, P1), 1) [BUS] Replica(1) -\u0026gt; Replica(3) RECEIVED Accept(RID(R1, P1), 1, V(1, 1)) [BUS] Replica(3) -\u0026gt; Replica(1) QUEUED AcceptResponse(RID(R1, P1), 1) [BUS] Replica(3) -\u0026gt; Replica(1) RECEIVED AcceptResponse(RID(R1, P1), 1) [ORACLE] value accepted by majority of replicas: majority=2 RID(R1, P1) value=V(1, 1) replicas=[3, 1] SEED=9075634049329737353 Always remove the current bug before introducing a new one.\nLet\u0026rsquo;s have the replica reuse a proposal number:\nimpl Replica { fn next_proposal_number(\u0026amp;mut self) -\u0026gt; Result\u0026lt;u64\u0026gt; { ... // Comment this line // self.storage.store(\u0026amp;state)?; ... Ok(proposal_number) } } Run the simulation:\ncargo t action_simulation -- --nocapture ... assertion failed: `(left == right)` left: `Some(\u0026#34;V(2, 14)\u0026#34;)`, right: `Some(\u0026#34;V(2, 98)\u0026#34;)`: majority of replicas decided on a different value after a value was accepted note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace SEED=6875993431596082141 The accepted proposal number and value must be persisted to durable storage. Let\u0026rsquo;s forget to do that and see what happens.\nimpl Replica { fn on_accept(\u0026amp;mut self, input: AcceptInput) { if input.proposal_number \u0026gt;= self.state.min_proposal_number { let mut state = self.state.clone(); self.min_proposal_number = input.proposal_number; state.accepted_proposal_number = Some(input.proposal_number); state.accepted_value = Some(input.value); // self.storage.store(\u0026amp;state).unwrap(); self.state = state; self.bus.send_accept_response( input.from_replica_id, AcceptOutput { from_replica_id: self.config.id, request_id: input.request_id, min_proposal_number: self.state.min_proposal_number, }, ); } } } Run the simulation:\ncargo t action_simulation -- --nocapture ... assertion `left == right` failed: majority of replicas decided on a different value after a value was accepted left: Some(\u0026#34;V(1, 17)\u0026#34;) right: Some(\u0026#34;V(2, 38)\u0026#34;) SEED=6875993431596082141 After sending a Prepare(n) message and receiving responses from a quorum, the value sent in Accept(n, v) messages must be the value accepted in the proposal with the highest proposal number. Let\u0026rsquo;s forget to look for the accepted value and always send the value the proposer wants to.\nimpl Replica { fn on_prepare_response(\u0026amp;mut self, input: PrepareOutput) { let majority = self.majority(); let request_id = input.request_id; if let Some(req) = self.inflight_requests.get_mut(\u0026amp;request_id) { req.responses.insert(input); if req.responses.len() \u0026lt; majority { return; } // let value = req // .responses // .iter() // .filter(|response| response.accepted_proposal_number.is_some()) // .max_by_key(|response| response.accepted_proposal_number) // .map(|response| response.accepted_value.clone().unwrap()) // .unwrap_or_else(|| req.proposed_value.clone().unwrap()); let value = req.proposed_value.clone().unwrap(); let proposal_number = req.proposal_number; self.broadcast_accept(proposal_number, value); self.inflight_requests.remove(\u0026amp;request_id); } } } Run the simulation:\ncargo t action_simulation -- --nocapture ... assertion `left == right` failed: majority of replicas decided on a different value after a value was accepted left: Some(\u0026#34;V(1, 99)\u0026#34;) right: Some(\u0026#34;V(1, 40)\u0026#34;) ... [BUS] Replica(1) -\u0026gt; Replica(1) RECEIVED AcceptResponse(RID(R1, P10), 10) [ORACLE] value accepted by majority of replicas: majority=2 RID(R1, P10) value=V(1, 40) replicas=[1, 2] SEED=6369495520157998847 Even better, let\u0026rsquo;s forget to fsync the file that contains the replica state:\nimpl FileStorage { fn store(\u0026amp;self, state: \u0026amp;contracts::DurableState) -\u0026gt; std::io::Result\u0026lt;()\u0026gt; { ... // Comment this line. // file.sync_all()?; ... Ok(()) } } Run the simulation:\ncargo t action_simulation -- --nocapture ... assertion failed: `(left == right)` left: `Some(\u0026#34;V(1, 0)\u0026#34;)`, right: `Some(\u0026#34;V(1, 58)\u0026#34;)`: majority of replicas decided on a different value after a value was accepted ... [BUS] Replica(3) -\u0026gt; Replica(1) QUEUED AcceptResponse(RID(R1, P5), 5) [BUS] Replica(1) -\u0026gt; Replica(1) RECEIVED AcceptResponse(RID(R1, P5), 5) [ORACLE] value accepted by majority of replicas: majority=2 RID(R1, P5) value=V(3, 59) replicas=[1, 2] SEED=7923659261799353388 Atomically writing to a file is complicated, let\u0026rsquo;s forget to fsync the directory since the atomic rename trick is being used:\nimpl FileStorage { fn store(\u0026amp;self, state: \u0026amp;contracts::DurableState) -\u0026gt; std::io::Result\u0026lt;()\u0026gt; { ... // Comment this line. // self.dir_file.sync_all()?; ... Ok(()) } } Run the simulation:\ncargo t action_simulation -- --nocapture ... assertion failed: `(left == right)` left: `Some(\u0026#34;V(1, 2)\u0026#34;)`, right: `Some(\u0026#34;V(3, 27)\u0026#34;)`: majority of replicas decided on a different value after a value was accepted note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace SEED=11856967350924232882 In the accept phase, the highest proposal number the replica has seen must be updated as well. Let\u0026rsquo;s forget to do that.\nimpl Replica { pub fn on_accept(\u0026amp;mut self, input: AcceptInput) { if input.proposal_number \u0026gt;= self.state.min_proposal_number { ... // state.min_proposal_number = input.proposal_number; ... } } } Run the simulation:\ncargo t action_simulation -- --nocapture ... assertion failed: `(left == right)` left: `Some(\u0026#34;V(3, 93)\u0026#34;)`, right: `Some(\u0026#34;V(3, 53)\u0026#34;)`: majority of replicas decided on a different value after a value was accepted note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace SEED=10068138891262037375 Without introducing any bugs, let\u0026rsquo;s run the simulator and see what happens:\nRun the simulation:\ncargo t action_simulation -- --nocapture Spawning 4 threads SEED=3616773477915676583 Thread(0) Running simulation 0 SEED=10055364015445278185 Thread(1) Running simulation 0 SEED=17460562123704731307 Thread(2) Running simulation 0 SEED=6671866141078837726 Thread(3) Running simulation 0 Thread(3) Running simulation 1000 Thread(1) Running simulation 1000 Thread(2) Running simulation 1000 Thread(0) Running simulation 1000 Thread(3) Running simulation 2000 Thread(0) Running simulation 2000 Thread(2) Running simulation 2000 Thread(1) Running simulation 2000 Thread(0) Running simulation 3000 Thread(3) Running simulation 3000 Thread(2) Running simulation 3000 Thread(0) Running simulation 4000 Thread(1) Running simulation 3000 Thread(3) Running simulation 4000 Thread(2) Running simulation 4000 Thread(0) Running simulation 5000 Thread(2) Running simulation 5000 Thread(1) Running simulation 4000 Thread(3) Running simulation 5000 Thread(1) Running simulation 5000 Thread(0) Running simulation 6000 Thread(3) Running simulation 6000 Thread(2) Running simulation 6000 Thread(1) Running simulation 6000 Thread(3) Running simulation 7000 Thread(2) Running simulation 7000 Thread(0) Running simulation 7000 Thread(3) Running simulation 8000 Thread(1) Running simulation 7000 Thread(2) Running simulation 8000 Thread(0) Running simulation 8000 Thread(3) Running simulation 9000 Thread(1) Running simulation 8000 Thread(2) Running simulation 9000 Thread(0) Running simulation 9000 Thread(1) Running simulation 9000 test simulation::simulator::tests::action_simulation ... ok The code for the Paxos implementation and the simulator can be found here.\nNote on P P is a state machine programming language for modeling and specifying distributed systems. P is used for modeling while the simulator is used to test the real system, using the real components whenever possible. The overall structure of the system is pretty similar to the structure of a P program.\nThe implementation:\ntype request_id = (node_id: int, request_number: int); type prepareReq = (node: Node, request_id: request_id, proposal_number: int); type prepareResp = (node: Node, request_id: request_id, node_id: int, proposal_number: int, accepted_proposal_number: int, accepted_value: int); type acceptReq = (node: Node, request_id: request_id, node_id: int, proposal_number: int, value: int); type acceptResp = (request_id: request_id, node_id: int, min_proposal_number: int); type valueAcceptedReq = (node_id: int, value: int); type setNodesReq = (m: machine, nodes: seq[Node]); event eSetNodes: setNodesReq; event eSetNodesResponse; event eTriggerPrepare; event ePrepare: prepareReq; event ePrepareResp: prepareResp; event eAccept: acceptReq; event eAcceptResp: acceptResp; event eValueAccepted: valueAcceptedReq; event eRestart; event eCrash; enum MessageType { PREPARE, ACCEPT } machine Node { start state Init { entry (node_id: int) { ... } } state Crashed { on eRestart goto Restarting; ignore eCrash, eTriggerPrepare, ePrepare, ePrepareResp, eAccept, eAcceptResp; } state Restarting { entry { requests = default(map[(MessageType, int), (value: int, responses: set[(node_id: int, accepted_proposal_number: int, accepted_value: int)])]); goto HandleRequests; } } state HandleRequests { ignore eRestart; on eCrash goto Crashed; on eTriggerPrepare do { ... } on ePrepare do (req: prepareReq) { ... } on ePrepareResp do (req: prepareResp) { ... } on eAccept do (req: acceptReq) { ... } on eAcceptResp do (req: acceptResp) { ... } } } fun quorum(num_nodes: int): int { return num_nodes / 2 + 1; } The spec:\nevent spec_EventuallyDecideOnSameValue_num_nodes: int; spec EventuallyDecideOnSameValue observes spec_EventuallyDecideOnSameValue_num_nodes, eValueAccepted { // Node id -\u0026gt; value the node accepted. Node ids for nodes that haven\u0026#39;t accepted a value aren\u0026#39;t in the map. var accepted_values: map[int, int]; // The value accepted by a majority of nodes. 0 means unset. var accepted_value: int; // The minimum number of nodes that form a majority in the cluster. var majority: int; start state Init { on spec_EventuallyDecideOnSameValue_num_nodes do (num_nodes: int) { majority = num_nodes / 2 + 1; goto WaitingForDecision; } } // Nodes must eventually decide. hot state WaitingForDecision { on eValueAccepted do (req: valueAcceptedReq) { accepted_values[req.node_id] = req.value; accepted_value = getValueAcceptedByMajority(); print format(\u0026#34;debug: WaitingForDecision accepted_values={0}\u0026#34;, accepted_values); // No value accepted yet. if(accepted_value == 0) { return; } goto EnsuringDecisionDoesntChange; } } // After a majority of the nodes decide on a value, the value cannot change. state EnsuringDecisionDoesntChange { on eValueAccepted do (req: valueAcceptedReq) { var value: int; accepted_values[req.node_id] = req.value; value = getValueAcceptedByMajority(); assert accepted_value == value, format(\u0026#34;nodes decided on a new value after a value has already been decided. old={0} new={1}\u0026#34;, accepted_value, value); } } } The P implementation includes a failure injector as well. The code can be found here.\nCan\u0026rsquo;t catch them all It\u0026rsquo;s obvious that some bugs won\u0026rsquo;t be found because the inputs are generated randomly and some components will end up being replaced by fake implementations to remove non-determinism or to make the simulation run at an acceptable speed. Combine dst with other testing and modeling techniques for maximum effectiveness.\nReferences Paxos made simple\nP\nTigerbeetle\n\u0026ldquo;Testing Distributed Systems w/ Deterministic Simulation\u0026rdquo; by Will Wilson\nFF meetup #4 - Deterministic simulation testing\nWhat\u0026rsquo;s the big deal about Deterministic Simulation Testing?\n","permalink":"https://poorlydefinedbehaviour.github.io/posts/deterministic_simulation_testing/","summary":"\u003ch1 id=\"𝔇𝔢𝔱𝔢𝔯𝔪𝔦𝔫𝔦𝔰𝔱𝔦𝔠-𝔰𝔦𝔪𝔲𝔩𝔞𝔱𝔦𝔬𝔫-𝔱𝔢𝔰𝔱𝔦𝔫𝔤\"\u003e\u003ccenter\u003e𝔇𝔢𝔱𝔢𝔯𝔪𝔦𝔫𝔦𝔰𝔱𝔦𝔠 𝔰𝔦𝔪𝔲𝔩𝔞𝔱𝔦𝔬𝔫 𝔱𝔢𝔰𝔱𝔦𝔫𝔤\u003c/center\u003e\u003c/h1\u003e\n\u003cp\u003e\u003cem\u003e\u003ca href=\"https://www.dictionary.com/browse/deterministic\"\u003edeterministic\u003c/a\u003e\u003c/em\u003e:  of or relating to a process or model in which the output is determined solely by the input and initial conditions, thereby always returning the same results ( stochastic ):\nThe algorithms are simple and deterministic, so the results are predictable and reproducible.\u003c/p\u003e\n\u003ch3 id=\"example-based-testing\"\u003eExample based testing\u003c/h3\u003e\n\u003cp\u003eExample based testing works fine for simple cases where there\u0026rsquo;s only a small number of actions that matter.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-ocaml\" data-lang=\"ocaml\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003etest_unit \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;append entries: truncates the log on entry conflict\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e storage \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e make \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e dir \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Test_util.temp_dir () \u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003ein\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e(* Leader adds some entries to the replica\u0026#39;s log. *)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  append_entries storage \u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003elast_log_index storage\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e term \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 1L\u003cspan style=\"color:#f92672\"\u003e;\u003c/span\u003e data \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;1\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e term \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 2L\u003cspan style=\"color:#f92672\"\u003e;\u003c/span\u003e data \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;2\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e term \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 3L\u003cspan style=\"color:#f92672\"\u003e;\u003c/span\u003e data \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;3\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e(* Another leader overrides the replica\u0026#39;s log. *)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  append_entries storage 2L\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e term \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 4L\u003cspan style=\"color:#f92672\"\u003e;\u003c/span\u003e data \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;3\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e};\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e term \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 4L\u003cspan style=\"color:#f92672\"\u003e;\u003c/span\u003e data \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;4\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eassert\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003eentry_at_index storage 1L \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSome\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e term \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 1L\u003cspan style=\"color:#f92672\"\u003e;\u003c/span\u003e data \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;1\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e});\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eassert\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003eentry_at_index storage 2L \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSome\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e term \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 2L\u003cspan style=\"color:#f92672\"\u003e;\u003c/span\u003e data \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;2\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e});\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e(* Entry at index 3 has been overwritten. *)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eassert\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003eentry_at_index storage 3L \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSome\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e term \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 4L\u003cspan style=\"color:#f92672\"\u003e;\u003c/span\u003e data \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;3\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e});\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e(* Entry at index 4 is new. *)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eassert\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003eentry_at_index storage 4L \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSome\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e term \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 4L\u003cspan style=\"color:#f92672\"\u003e;\u003c/span\u003e data \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;4\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e})\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIt becomes way harder to think of and write the examples when the bugs you\u0026rsquo;re looking for only happen after several events that need to happen in a specific order.\u003c/p\u003e","title":"𝔇𝔢𝔱𝔢𝔯𝔪𝔦𝔫𝔦𝔰𝔱𝔦𝔠 𝔰𝔦𝔪𝔲𝔩𝔞𝔱𝔦𝔬𝔫 𝔱𝔢𝔰𝔱𝔦𝔫𝔤"},{"content":"\nThis post contains TLA+ solutions for The Deadlock Empire which is a collection of challenges where the objective is to break multithreaded programs by playing the role of a scheduler that can context switch at any time.\nNon atomic instructions\nThere\u0026rsquo;s two threads executing the following code:\na = a + 1; if (a == 1) { critical_section(); } Since the a increment is not atomic, conceptually, it is like setting a temporary variable to the value of a\u0026ndash; tmp = a and then setting a to the temporary variable value incremented by 1 \u0026ndash; a = tmp + 1.\n---- MODULE spec ---- EXTENDS TLC, Integers, FiniteSets (*--algorithm spec variables a = 0, threads = 1..2, Enterd_critical_section = {}; define OnlyOneThreadEntersCriticalSection == Cardinality(Enterd_critical_section) \u0026lt;= 1 end define; process Thread \\in threads variables tmp = 0; begin Load: tmp := a; Store: a := tmp + 1; CriticalSectionCheck: if a = 1 then Enterd_critical_section := Enterd_critical_section \\union {self}; end if; end process; end algorithm; *) ==== State Thread a Thread b Description a = 0 Init Init Both threads are at the initial state a = 0, thread1.tmp = 0 Load Init Thread a stores the value of a in a temporary variable a = 0, thread1.tmp = 0, thread2.tmp = 0 Load Load Thread b stores the value of a in a temporary variable a = thread1.tmp + 1, thread1.tmp = 0, thread2.tmp = 0 Store Load Thread a sets a to 0 + 1 using the temporary variable a = thread2.tmp + 1, thread1.tmp = 0, thread2.tmp = 0 Store Store Thread b sets a to 0 + 1 using the temporary variable a = 1 CriticalSectionCheck Store Thread a enters the critical section since a is equal to 1 a = 1 CriticalSectionCheck CriticalSectionCheck Thread b enters the critical section since a is equal to 1 at the same time as thread 1 Boolean Flags Are Enough For Everyone\nflag = false while (true) { while (flag != false) { ; } flag = true; critical_section(); flag = false; } ---- MODULE spec ---- EXTENDS TLC, Integers, FiniteSets (*--algorithm spec variables threads = 1..2, flag = FALSE, threads_in_criticial_section = {}; define OnlyOneThreadEntersCriticalSection == Cardinality(threads_in_criticial_section) \u0026lt;= 1 end define; process Thread \\in threads begin SpinLock: while flag do skip; end while; SetFlag: flag := TRUE; CriticalSection1: threads_in_criticial_section := threads_in_criticial_section \\union {self}; CriticalSection2: threads_in_criticial_section := threads_in_criticial_section \\ {self}; UnsetFlag: flag := FALSE; end process; end algorithm; *) ==== State Thread a Thread b Description flag = false Init Init Both threads are at the initial state flag = false SpinLock Init Thread a enters the spinlock flag = false SpinLock SpinLock Thread b enters the spinlock flag = true SpinLock SetFlag Thread b sees that flag is false so it leaves the spinlock and sets flag to true flag = true SetFlag SetFlag Thread a was in the spinlock and read the value of flag before thread 2 set it to true. Thread a leaves the spinlock and sets flag to true flag = true CriticalSection1 CriticalSection1 Both threads enter the critical section at the same time Simple counter\nwhile (true) { counter++; if (counter == 5) { critical_section(); } } ---- MODULE spec ---- EXTENDS TLC, Integers, FiniteSets (*--algorithm spec variables threads = {3, 5}, threads_in_critical_section = {}, counter = 0; define MutualExclusion == Cardinality(threads_in_critical_section) \u0026lt;= 1 end define; process Thread \\in threads variables tmp = 0, done = FALSE; begin Loop: while ~done do Load: tmp := counter; Store: counter := tmp + 1; EnterCriticalSection: if counter = self then threads_in_critical_section := threads_in_critical_section \\union {self}; done := TRUE; end if; LeaveCriticalSection: threads_in_critical_section := threads_in_critical_section \\ {self}; end while; end process; end algorithm; *) ==== State Thread a Thread b Description counter = 0 Loop Loop Thread a updates the counter until it reaches 3 while thread 2 is in the Loop state counter = 0 Load Loop counter = 1 Store Loop counter = 1 Loop Loop counter = 1 Load Loop counter = 2 Store Loop counter = 2 Loop Loop counter = 2 Load Loop counter = 3 Store Loop counter = 3 EnterCriticalSection Loop Counter reached 3, so thread 1 enters the critical section counter = 3 LeaveCriticalSection Loop While thread 1 is in the critical section, thread 2 updates the counter to 5 counter = 3 LeaveCriticalSection Load counter = 4 LeaveCriticalSection Store counter = 4 LeaveCriticalSection Loop counter = 4 LeaveCriticalSection Load counter = 5 LeaveCriticalSection Store counter = 5 LeaveCriticalSection EnterCriticalSection And thread 2 enters the critical section while thread 1 is still there Thread a is in the LeaveCriticalSection state but it has not executed the step yet.\nConfused counter\n// Thread a business_logic(); first++; second++; if (second == 2 \u0026amp;\u0026amp; first != 2) { Debug.Assert(false); } // Thread b business_logic(); first++; second++; ---- MODULE spec ---- EXTENDS TLC, Integers (*--algorithm spec variables first = 0, second = 0, assertion_failed = FALSE; define AssertionNeverFails == assertion_failed = FALSE end define; process ThreadA = \u0026#34;a\u0026#34; variables tmp = 0; begin LoadFirst: tmp := first; StoreFirst: first := tmp + 1; LoadSecond: tmp := second; StoreSecond: second := tmp + 1; CriticalSection: if second = 2 /\\ first # 2 then assertion_failed := TRUE; end if; end process; process ThreadB = \u0026#34;b\u0026#34; variables tmp = 0; begin LoadFirst: tmp := first; StoreFirst: first := tmp + 1; LoadSecond: tmp := second; StoreSecond: second := tmp + 1; end process; end algorithm; *) ==== State Thread a Thread b Description first = 0, second = 0 LoadFirst LoadFirst Both threads load first into thread1.tmp first = 0, second = 0, thread1.tmp = 0, thread2.tmp = 0 StoreFirst StoreFirst Thread a updates first by setting it to thread1.tmp + 1 first = 1, second = 0, thread1.tmp = 0, thread2.tmp = 0 LoadSecond StoreFirst Thread a loads second into thread1.tmp. Note that Thread b is still in the StoreFirst state since it has not executed yet first = 1, second = 0, thread1.tmp = 0, thread2.tmp = 0 StoreSecond StoreFirst Thread a updates second by setting it to thread1.tmp + 1 first = 1, second = 1, thread1.tmp = 0, thread2.tmp = 0 CriticalSection StoreFirst Thread a moves to the CriticalSection state but does not execute yet first = 1, second = 1, thread1.tmp = 0, thread2.tmp = 0 CriticalSection StoreFirst Thread 2 updates first by setting it to thread2.tmp + 1. Note that thread2.tmp is still 0 since the variable was set in a previous state before Thread b got paused first = 1, second = 1, thread1.tmp = 0, thread2.tmp = 0 CriticalSection LoadSecond Thread b loads second into thread2.tmp first = 1, second = 1, thread1.tmp = 0, thread2.tmp = 1 CriticalSection StoreSecond Thread b updates second by setting it to thread2.tmp + 1. Note that thread2.tmp is 1 first = 1, second = 1, thread1.tmp = 0, thread2.tmp = 1 CriticalSection Done Thread a resumes executions and the condition in the if the statement succeeds Insuffient lock\nTwo threads use a mutex to protect i. The mutex works as expected, the problem is that exists an execution order where thread 1 hits the assertion.\n// Thread a while (true) { Monitor.Enter(mutex); i = i + 2; critical_section(); if (i == 5) { Debug.Assert(false); } Monitor.Exit(mutex); } // Thread b while (true) { Monitor.Enter(mutex); i = i - 1; critical_section(); Monitor.Exit(mutex); } ---- MODULE spec ---- EXTENDS TLC, Integers (*--algorithm spec variables lock = FALSE, assertion_failed = FALSE, i = 0; define AssertionNeverFails == assertion_failed = FALSE end define; process ThreadA = \u0026#34;a\u0026#34; begin Loop: while TRUE do AcquireLock: await lock = FALSE; lock := TRUE; Modify: i := i + 2; If: if i = 5 then assertion_failed := TRUE; end if; ReleaseLock: lock := FALSE; end while; end process; process ThreadB = \u0026#34;b\u0026#34; begin Loop: while TRUE do AcquireLock: await lock = FALSE; lock := TRUE; Modify: i := i - 1; ReleaseLock: lock := FALSE; end while; end process; end algorithm; *) ==== State Thread a Thread b Description i = 0 Loop Loop Threads start i = 0 AcquireLock AcquireLock Thread a acquires the lock repeatedly until i reaches 4. Thread b is stuck trying to acquire the lock i = 0 Modify AcquireLock i = 2 If AcquireLock i = 2 ReleaseLock AcquireLock i = 2 AcquireLock AcquireLock i = 2 Modify AcquireLock i = 2 If AcquireLock i = 4 ReleaseLock AcquireLock i = 4 ReleaseLock Modify Thread b finally acquires the lock i = 3 ReleaseLock If i = 3 ReleaseLock ReleaseLock i = 3 AcquireLock AcquireLock i = 3 Modify AcquireLock Thread a acquires the lock again i = 5 If AcquireLock Thread i is equal to 5 this time, thread 1 hits the assertion Deadlock\nNote that the order in which each thread tries to acquire the locks is different.\n// Thread a Monitor.Enter(mutex); Monitor.Enter(mutex2); critical_section(); Monitor.Exit(mutex); Monitor.Exit(mutex2); // Thread b Monitor.Enter(mutex2); Monitor.Enter(mutex); critical_section(); Monitor.Exit(mutex2); Monitor.Exit(mutex); ---- MODULE spec ---- EXTENDS TLC (*--algorithm spec variables mutex1 = FALSE, mutex2 = FALSE; process ThreadA = \u0026#34;a\u0026#34; begin AcquireLock1: await mutex1 = FALSE; mutex1 := TRUE; AcquireLock2: await mutex2 = FALSE; mutex2 := TRUE; ReleaseLocks: mutex1 := FALSE; mutex2 := FALSE; end process; process ThreadB = \u0026#34;b\u0026#34; begin AcquireLock1: await mutex2 = FALSE; mutex2 := TRUE; AcquireLock2: await mutex1 = FALSE; mutex1 := TRUE; ReleaseLocks: mutex2 := FALSE; mutex1 := FALSE; end process; end algorithm; *) ==== State Thread a Thread b Description mutex1 = FALSE, mutex2 = FALSE AcquireLock1 AcquireLock1 Both threads start acquiring the locks mutex1 = TRUE, mutex2 = FALSE AcquireLock2 AcquireLock1 Thread a acquires the first lock and tries to acquire the second mutex1 = TRUE, mutex2 = TRUE AcquireLock2 AcquireLock2 Thread b acquires the second lock before thread 1 is able to acquire it mutex1 = TRUE, mutex2 = TRUE Deadlock Deadlock No thread can progress because one thread holds the lock the other thread needs A More Complex Thread\n// Thread a while (true) { if (Monitor.TryEnter(mutex)) { Monitor.Enter(mutex3); Monitor.Enter(mutex); critical_section(); Monitor.Exit(mutex); Monitor.Enter(mutex2); flag = false; Monitor.Exit(mutex2); Monitor.Exit(mutex3); } else { Monitor.Enter(mutex2); flag = true; Monitor.Exit(mutex2); } } // Thread b while (true) { if (flag) { Monitor.Enter(mutex2); Monitor.Enter(mutex); flag = false; critical_section(); Monitor.Exit(mutex); Monitor.Enter(mutex2); } else { Monitor.Enter(mutex); flag = false; Monitor.Exit(mutex); } } ---- MODULE spec ---- EXTENDS TLC, Sequences, FiniteSets, Integers NULL == \u0026lt;\u0026lt;\u0026#34;-1\u0026#34;, -1\u0026gt;\u0026gt; (*--algorithm spec variables mutex = NULL, mutex2 = NULL, mutex3 = NULL, flag = FALSE; macro enter(mutex, thread) begin await mutex = NULL \\/ mutex[1] = thread; if mutex = NULL then mutex := \u0026lt;\u0026lt;thread, 1\u0026gt;\u0026gt;; else mutex := \u0026lt;\u0026lt;thread, mutex[2] + 1\u0026gt;\u0026gt;; end if; end macro; macro exit(mutex, thread) begin assert mutex[1] = thread; assert mutex[2] \u0026gt; 0; if mutex[2] = 1 then mutex := NULL; else mutex := \u0026lt;\u0026lt;mutex[1], mutex[2] - 1\u0026gt;\u0026gt;; end if; end macro; macro try_enter(mutex, thread) begin if mutex = NULL then mutex := \u0026lt;\u0026lt;thread, 1\u0026gt;\u0026gt;; try_enter_result := TRUE; elsif mutex[1] = thread then mutex := \u0026lt;\u0026lt;thread, mutex[2] + 1\u0026gt;\u0026gt;; try_enter_result := TRUE; else try_enter_result := FALSE; end if; end macro; process thread_a = \u0026#34;a\u0026#34; variables try_enter_result = FALSE; begin Loop: while TRUE do TryEnterMutex: try_enter(mutex, \u0026#34;a\u0026#34;); CheckEnterMutex: if try_enter_result then EnterMutex3: enter(mutex3, \u0026#34;a\u0026#34;); EnterMutex: enter(mutex, \u0026#34;a\u0026#34;); ExitMutex: exit(mutex, \u0026#34;a\u0026#34;); EnterMutex2: enter(mutex2, \u0026#34;a\u0026#34;); else Else_EnterMutex2: enter(mutex2, \u0026#34;a\u0026#34;); SetFlag: flag := TRUE; ExitMutex2: exit(mutex2, \u0026#34;a\u0026#34;); end if; end while; end process; process thread_b = \u0026#34;b\u0026#34; begin Loop: while TRUE do CheckFlag: if flag then EnterMutex2:enter(mutex2, \u0026#34;b\u0026#34;); EnterMutex: enter(mutex, \u0026#34;b\u0026#34;); SetFlag:flag := FALSE; ExitMutex: exit(mutex, \u0026#34;b\u0026#34;); ExitMutex2: enter(mutex2, \u0026#34;b\u0026#34;); else Else_EnterMutex: enter(mutex, \u0026#34;b\u0026#34;); Else_SetFlag: flag := FALSE; Else_ExitMutex: exit(mutex, \u0026#34;b\u0026#34;); end if; end while; end process; end algorithm; *) ==== Variables that didn\u0026rsquo;t change on transition to a new state were omitted.\nState Thread a Thread b Description flag = false, mutex = NULL, mutex2 = NULL, mutex3 = NULL Loop Loop Both threads start running \u0026hellip; TryEnterMutex Loop Thread a moves to the TryEnterMutex state but has not executed yet \u0026hellip; TryEnterMutex CheckFlag Thread b moves to the CheckFlag state \u0026hellip; TryEnterMutex Else_EnterMutex Thread b checks that flag is FALSE and moves to the else branch flag = false, mutex = \u0026laquo;\u0026ldquo;b\u0026rdquo;, 1\u0026raquo;, mutex2 = NULL, mutex3 = NULL TryEnterMutex Else_SetFlag After acquiring mutex, thread b sets flag to FALSE \u0026hellip; CheckEnterMutex Else_SetFlag Thread a resumes execution and checks if flag is TRUE flag = false, mutex = \u0026laquo;\u0026ldquo;b\u0026rdquo;, 1\u0026raquo;, mutex2 = \u0026laquo;\u0026ldquo;a\u0026rdquo;, 1\u0026raquo;, mutex3 = NULL Else_EnterMutex2 Else_SetFlag Thread a finds out that flag is FALSE and moves to the else branch \u0026hellip; SetFlag Else_SetFlag Thread a will set flag to TRUE \u0026hellip; SetFlag Else_ExitMutex Thread b resumes execution and releases mutex before thread a sets flag to TRUE flag = true, mutex = \u0026laquo;\u0026ldquo;b\u0026rdquo;, 1\u0026raquo;, mutex2 = NULL, mutex3 = NULL ExitMutex2 Else_ExitMutex Thread a sets flag to TRUE flag = true, mutex = NULL, mutex2 = NULL, mutex3 = NULL Loop Else_ExitMutex Thread a releases mutex2 \u0026hellip; TryEnterMutex Else_ExitMutex Thread a tries to acquire mutex \u0026hellip; TryEnterMutex Loop Thread b resumes execution \u0026hellip; CheckEnterMutex Loop Thread a checks if mutex has been acquired flag = true, mutex = \u0026laquo;\u0026ldquo;a\u0026rdquo;, 1\u0026raquo;, mutex2 = NULL, mutex3 = \u0026laquo;\u0026ldquo;a\u0026rdquo;, 1\u0026raquo; EnterMutex3 Loop mutex3 was already acquired by thread a flag = true, mutex = \u0026laquo;\u0026ldquo;a\u0026rdquo;, 2\u0026raquo;, mutex2 = NULL, mutex3 = \u0026laquo;\u0026ldquo;a\u0026rdquo;, 1\u0026raquo; EnterMutex Loop Thread a acquires mutex again flag = true, mutex = \u0026laquo;\u0026ldquo;a\u0026rdquo;, 1\u0026raquo;, mutex2 = NULL, mutex3 = \u0026laquo;\u0026ldquo;a\u0026rdquo;, 1\u0026raquo; ExitMutex Loop Thread a releases mutex \u0026hellip; EnterMutex2 Loop Thread a will try to acquire mutex2 \u0026hellip; EnterMutex2 CheckFlag Thread b resumes execution and checks if flag is TRUE flag = true, mutex = \u0026laquo;\u0026ldquo;a\u0026rdquo;, 1\u0026raquo;, mutex2 = \u0026laquo;\u0026ldquo;b\u0026rdquo;, 1\u0026raquo;, mutex3 = \u0026laquo;\u0026ldquo;a\u0026rdquo;, 1\u0026raquo; EnterMutex2 EnterMutex2 flag is TRUE, so thread b triers to acquire mutex2 flag = true, mutex = \u0026laquo;\u0026ldquo;a\u0026rdquo;, 1\u0026raquo;, mutex2 = \u0026laquo;\u0026ldquo;b\u0026rdquo;, 1\u0026raquo;, mutex3 = \u0026laquo;\u0026ldquo;a\u0026rdquo;, 1\u0026raquo; EnterMutex2 EnterMutex Thread b acquires mutex2 and tries to acquire mutex while thread a tries to acquire `mutex2. \u0026hellip; Deadlock Deadlock Manual Reset Event\n// Thread a while (true) { sync.Wait(); if (counter % 2 == 1) { Debug.Assert(false); } } // Thread b while (true) { sync.Reset(); counter++; counter++; sync.Set(); } ---- MODULE spec ---- EXTENDS TLC, Integers (*--algorithm spec variables signal = FALSE, counter = 0; process a = \u0026#34;a\u0026#34; variables tmp = 0; begin Loop: while TRUE do WaitSignal: await signal; LoadCounter: tmp := counter; CheckCounter: if tmp % 2 = 1 then assert FALSE; end if; end while; end process; process b = \u0026#34;b\u0026#34; variables tmp = 0; begin Loop: while TRUE do ResetSignal: signal := FALSE; LoadCounter1: tmp := counter; IncCounter1: counter := tmp + 1; LoadCounter2: tmp := counter; IncCounter2: counter := tmp + 1; SetSignal: signal := TRUE; end while; end process; end algorithm; *) ==== State Thread a Thread b Description signal = false, counter = 0 Loop Loop Both threads start running signal = false, counter = 0 WaitSignal Loop Thread a blocks waiting for the signal signal = false, counter = 0 WaitSignal Loop Thread b resets the signal, it does not unblock threads that are waiting signal = false, counter = 0, b.tmp = 0 WaitSignal LoadCounter1 Thread b loads counter signal = false, counter = 0, b.tmp = 0 WaitSignal IncCounter1 Thread b increments counter by setting it to tmp + 1 signal = false, counter = 1, b.tmp = 0 WaitSignal LoadCounter2 Thread b loads counter again signal = false, counter = 1, b.tmp = 1 WaitSignal IncCounter2 Thread b increments counter by setting it to tmp + 1 signal = false, counter = 2, b.tmp = 1 WaitSignal SetSignal Thread b signals the waiting thread signal = true, counter = 2, b.tmp = 1 WaitSignal Loop Thread b goes back to the beginning of the loop signal = true, counter = 2, a.tmp = 0, b.tmp = 1 LoadCounter Loop Thread a loads counter signal = true, counter = 2, a.tmp = 0, b.tmp = 1 LoadCounter ResetSignal Thread b resets the signal signal = false, counter = 2, a.tmp = 0, b.tmp = 1 LoadCounter LoadCounter1 Thread b loads counter signal = false, counter = 2, a.tmp = 0, b.tmp = 2 LoadCounter IncCounter1 Thread b increments counter by setting it to tmp + 1 signal = false, counter = 3, a.tmp = 0, b.tmp = 2 LoadCounter LoadCounter2 Thread b loads counter signal = false, counter = 3, a.tmp = 3, b.tmp = 2 CheckCounter LoadCounter2 Thread a resumes and checks if counter is odd and finds that it is Countdown Event\n// Thread a progress = progress + 20; if (progress \u0026gt;= 20) { event.Signal(); event.Signal(); Atomic. Decrements the CountdownEvent\u0026#39;s countdown timer by one. Throws an exception if the timer is already at zero (and you win the level). } event.Wait(); // Thread b progress = progress + 30; if (progress \u0026gt;= 30) { event.Signal(); } progress = progress + 50; if (progress \u0026gt;= 80) { event.Signal(); } event.Wait(); ---- MODULE spec ---- EXTENDS TLC, Integers (*--algorithm spec variables signal = 3, progress = 0; macro signal_signal() begin assert signal \u0026gt; 0; signal := signal - 1; end macro; macro signal_wait() begin await signal = 0; end macro; process a = \u0026#34;a\u0026#34; variables tmp = 0; begin LoadProgres1: tmp := progress; SetProgress: progress := tmp + 20; LoadProgress2: tmp := progress; CheckProgress: if tmp \u0026gt;= 20 then signal_signal(); end if; WaitSignal: signal_wait(); end process; process b = \u0026#34;b\u0026#34; variables tmp = 0; begin LoadProgress1: tmp := progress; SetProgress1: progress := tmp + 30; LoadProgress2: tmp := progress; CheckProgress1: if tmp \u0026gt;= 30 then signal_signal(); end if; LoadProgress3: tmp := progress; SetProgress2: progress := tmp + 50; LoadProgress4: tmp := progress; CheckProgress2: if tmp \u0026gt;= 80 then signal_signal(); end if; signal_wait(); end process; end algorithm; *) ==== State Thread a Thread b Description signal = 3, progress = 0, a.tmp = 0 LoadProgress1 LoadProgress1 Both threads start running signal = 3, progress = 0, a.tmp = 0 SetProgress LoadProgress1 Thread a is waiting to set progressto tmp + 20 signal = 3, progress = 0, a.tmp = 0, b.tmp = 0 SetProgress SetProgress1 Thread b will set progressto tmp + 30 signal = 3, progress = 30, a.tmp = 0, b.tmp = 0 SetProgress LoadProgress2 Thread b will load progress again signal = 3, progress = 20, a.tmp = 0, b.tmp = 0 LoadProgress2 LoadProgress2 Thread a resumes execution and sets progress to tmp + 20 before loading progress again signal = 3, progress = 20, a.tmp = 20, b.tmp = 0 CheckProgress LoadProgress2 Thread a will check that progress \u0026gt;= 20 signal = 2, progress = 20, a.tmp = 20, b.tmp = 0 WaitSignal LoadProgress2 Thread a will wait for signal to reache 0 signal = 2, progress = 20, a.tmp = 20, b.tmp = 20 WaitSignal CheckProgress1 Thread b will check that progress \u0026gt;= 30 after loading it into tmp signal = 2, progress = 20, a.tmp = 20, b.tmp = 20 WaitSignal LoadProgress3 Thread b will load progress into tmp signal = 2, progress = 20, a.tmp = 20, b.tmp = 20 WaitSignal SetProgress2 Thread b will set progress to tmp + 50 signal = 2, progress = 70, a.tmp = 20, b.tmp = 20 WaitSignal LoadProgress 4 Thread b will load progress signal = 2, progress = 70, a.tmp = 20, b.tmp = 20 WaitSignal LoadProgress 4 Thread b will check that progress \u0026gt;= 80 signal = 2, progress = 70, a.tmp = 20, b.tmp = 20 DeadLock DeadLock Thread a is waiting for signal to reach 0 and thread b has already completed execution Countdown Event Revisited\nIn this case, since two threads are updating progress without synchronizing, lost updates cause event.Signal() to be called more than the allowed number of times (3).\n// Thread a while (true) { progress = progress + 20; event.Signal(); event.Wait(); if (progress == 100) { Environment.Exit(0); } } // Thread b while (true) { progress = progress + 30; event.Signal(); progress = progress + 50; event.Signal(); event.Wait(); if (progress == 100) { Environment.Exit(0); } } ---- MODULE spec ---- EXTENDS TLC, Integers (*--algorithm spec variables signal = 3, progress = 0; define SignalNeverGoesBelowZero == signal \u0026gt;= 0 end define; macro signal_signal() begin signal := signal - 1; end macro; macro signal_wait() begin await signal = 0; end macro; process a = \u0026#34;a\u0026#34; variables exit = FALSE, tmp = 0; begin Loop: while ~exit do LoadProgres1: tmp := progress; SetProgress: progress := tmp + 20; Signal: signal_signal(); WaitSignal: signal_wait(); LoadProgress2: tmp := progress; CheckProgress: if tmp = 100 then exit := TRUE; end if; end while; end process; process b = \u0026#34;b\u0026#34; variables exit = FALSE, tmp = 0; begin Loop: while ~exit do LoadProgress1: tmp := progress; SetProgress1: progress := tmp + 30; Signal1: signal_signal(); LoadProgress2: tmp := progress; SetProgress2: progress := tmp + 50; Signal2: signal_signal(); WaitSignal: signal_wait(); LoadProgress3: tmp := progress; CheckProgress1: if tmp = 100 then exit := TRUE; end if; end while; end process; end algorithm; *) ==== The Barrier\nIn this case, fireball_charge will be 0 when thread a executes the if statement depending on the order of calls to barrier.SignalAndWait.\n// Thread a int fireballCharge=0; System.Threading.Barrier barrier; // [phase 0, waiting for 2 threads] while (true) { Interlocked.Increment(ref fireballCharge); barrier.SignalAndWait(); if (fireballCharge \u0026lt; 2) { Debug.Assert(false); } fireball(); } // Thread b while (true) { Interlocked.Increment(ref fireballCharge); barrier.SignalAndWait(); } // Thread c while (true) { Interlocked.Increment(ref fireballCharge); barrier.SignalAndWait(); barrier.SignalAndWait(); fireballCharge = 0; } ---- MODULE spec ---- EXTENDS TLC, Integers, Sequences (*--algorithm spec variables fireball_charge = 2, barrier = 2, barrier_blocked = {}; procedure barrier_signal_and_wait(thread) begin BarrierSignal: if barrier - 1 = 0 then \\* Unblock threads waiting for the barrier. barrier_blocked := {}; \\* Reset the barrier. barrier := 2; else barrier := barrier - 1; barrier_blocked := barrier_blocked \\union {thread}; end if; BarrierAwait: await thread \\notin barrier_blocked; return; end procedure; process a = \u0026#34;a\u0026#34; begin A_Loop: while TRUE do A_IncrementFireball: fireball_charge := fireball_charge + 1; A_BarrierSignalAndWait: call barrier_signal_and_wait(\u0026#34;a\u0026#34;); A_CheckFireball: if fireball_charge \u0026lt; 2 then print(\u0026#34;CheckFireball: fireball_charge \u0026lt; 2\u0026#34;); assert FALSE; end if; end while; end process; process b = \u0026#34;b\u0026#34; begin B_Loop: while TRUE do B_IncrementFireball: fireball_charge := fireball_charge + 1; B_BarrierSignalAndWait: call barrier_signal_and_wait(\u0026#34;b\u0026#34;); end while; end process; process c = \u0026#34;c\u0026#34; begin C_Loop: while TRUE do C_IncrementFireball: fireball_charge := fireball_charge + 1; C_BarrierSignalAndWait1: call barrier_signal_and_wait(\u0026#34;c\u0026#34;); C_BarrierSignalAndWait2: call barrier_signal_and_wait(\u0026#34;c\u0026#34;); C_ResetFireball: fireball_charge := 0; end while; end process; end algorithm; *) ==== Action A increments fireball_charge B increments fireball_charge C increments fireball_charge A signals and blocks C signals and blocks, unblocking A and C B signals and blocks C signals and blocks, unblocking B and C C resets fireball_charge to 0. A checks fireball_charge, fireball_charge is 0.\nSemaphores\n// Thread a while (true) { semaphore.Wait(); critical_section(); semaphore.Release(); } // Thread b while (true) { if (semaphore.Wait(500)) { critical_section(); semaphore.Release(); } else { semaphore.Release(); } } ---- MODULE spec ---- EXTENDS TLC, Integers (*--algorithm spec variables sema = 1; threads_in_critical_section = 0; define CriticalSection == threads_in_critical_section \u0026lt;= 1 end define; macro semaphore_wait(block) begin if block then await sema = 1; sema := 0; sema_acquired := TRUE; elsif sema = 0 then sema_acquired := TRUE; end if; end macro; macro semaphore_release() begin skip end macro; process a = \u0026#34;a\u0026#34; variables sema_acquired = FALSE; begin Loop: while TRUE do ResetSemaAcquired: sema_acquired := FALSE; SemaphoreWait: semaphore_wait(TRUE); CriticalSection_1: threads_in_critical_section := threads_in_critical_section + 1; CriticalSection_2: threads_in_critical_section := threads_in_critical_section - 1; SemaphoreRelease: semaphore_release(); end while; end process; process b = \u0026#34;b\u0026#34; variables sema_acquired = FALSE; begin Loop: while TRUE do ResetSemaAcquired: sema_acquired := FALSE; SemaphoreWait: semaphore_wait(FALSE); if sema_acquired then SemaphoreRelease_1: semaphore_release(); CriticalSection_1: threads_in_critical_section := threads_in_critical_section + 1; CriticalSection_2: threads_in_critical_section := threads_in_critical_section - 1; else SemaphoreRelease_2: semaphore_release(); end if; end while; end process; end algorithm; *) ==== Action Thread a waits to acquire the semaphore. Thread b tries to acquire the semaphore with a 500ms timeout, fails and releases the semaphore in the else branch. Thread a acquires the semaphore and enters the critical section. Thread b tries to acquire the semaphore with a 500ms timeout, fails and releases the semaphore in the else branch again. Thread b tries to acquire the semaphore with a 500ms timeout, succeds and enters the critical section. Both threads are in the critical section at the same time.\nProducer-consumer\n// Thread a while (true) { if (semaphore.Wait(500)) { queue.Dequeue(); } else { // Nothing in the queue. } } // Thread b while (true) { semaphore.Release(); queue.Enqueue(new Dragon()); } ---- MODULE spec ---- EXTENDS TLC, Sequences, Integers (*--algorithm spec variables sema = 0, queue = \u0026lt;\u0026lt;\u0026gt;\u0026gt;; macro semaphore_wait(block) begin if block then await sema = 1; sema := 0; sema_acquired := TRUE; elsif sema = 1 then sema := 0; sema_acquired := TRUE; end if; end macro; macro semaphore_release() begin sema := 1; end macro; macro dequeue() begin assert Len(queue) \u0026gt; 0; queue := Tail(queue); end macro; macro enqueue() begin queue := Append(queue, \u0026#34;v\u0026#34;); end macro; process a = \u0026#34;a\u0026#34; variables sema_acquired = FALSE; begin Loop: while TRUE do ResetSemaAcquired: sema_acquired := FALSE; SemaphoreWait: semaphore_wait(FALSE); if sema_acquired then Dequeue: dequeue(); end if; end while; end process; process b = \u0026#34;b\u0026#34; begin Loop: while TRUE do ReleaseSema: semaphore_release(); Enqueue: enqueue(); end while; end process; end algorithm; *) ==== Action Thread a tries to acquire the semaphore with a 500ms timeout, fails and goes back to the start of the loop. Thread b releases the semaphore. Thread a acquires the semaphore before thread b adds an item to the queue. Thread a tries to dequeue from an empty queue. Producer-Consumer (variant)\n// Thread a while (true) { queue.Enqueue(new Golem()); } // Thread b while (true) { if (queue.Count \u0026gt; 0) { queue.Dequeue(); } } ---- MODULE spec ---- EXTENDS TLC, Sequences, Integers (*--algorithm spec variables queue = \u0026lt;\u0026lt;\u0026gt;\u0026gt;, is_queue_inconsistent = FALSE; procedure enqueue() begin AddItem: queue := Append(queue, \u0026#34;v\u0026#34;); EnterInconsistentState: is_queue_inconsistent := TRUE; LeaveInconsistentState: is_queue_inconsistent := FALSE; end procedure; procedure dequeue() begin Dequeue: assert is_queue_inconsistent = FALSE; queue := Tail(queue); end procedure; process a = \u0026#34;a\u0026#34; begin Loop: while TRUE do call enqueue(); end while; end process; process b = \u0026#34;b\u0026#34; begin Loop: while TRUE do CheckQueueLen: if Len(queue) \u0026gt; 0 then call dequeue(); end if; end while; end process; end algorithm; *) ==== Action Thread a starts the operation to add an item to queue and the queue enters an incosistent state while being modified Thread b finds out that the queue is not empty and tries to dequeue an item while the queue is still being modified by thread a Condition Variables\n// Thread a while (true) { Monitor.Enter(mutex); if (queue.Count == 0) { Monitor.Wait(mutex); release the lock, then sleep wait until woken up Monitor.Enter(mutex); } queue.Dequeue(); Monitor.Exit(mutex); } // Thread b while (true) { Monitor.Enter(mutex); if (queue.Count == 0) { Monitor.Wait(mutex); } queue.Dequeue(); Monitor.Exit(mutex); } // Thread c while (true) { Monitor.Enter(mutex); queue.Enqueue(42); Monitor.PulseAll(mutex); Monitor.Exit(mutex); } ---- MODULE spec ---- EXTENDS TLC, Sequences, Integers (*--algorithm spec variables queue = \u0026lt;\u0026lt;\u0026gt;\u0026gt;, condition_variable = [a |-\u0026gt; FALSE, b |-\u0026gt; FALSE], mutex = \u0026#34;\u0026#34;; macro mutex_enter(thread) begin await mutex = \u0026#34;\u0026#34;; mutex := thread; end macro; macro mutex_exit(thread) begin assert mutex = thread; mutex := \u0026#34;\u0026#34;; end macro; macro mutex_pulse_all(thread) begin assert mutex = thread; condition_variable := [x \\in DOMAIN condition_variable |-\u0026gt; TRUE]; end macro; macro dequeue() begin assert Len(queue) \u0026gt; 0; queue := Tail(queue); end macro; procedure mutex_wait(thread) begin ReleaseMutex: assert mutex = thread; mutex := \u0026#34;\u0026#34;; AwaitForConditionVariable: await condition_variable[thread] = TRUE; condition_variable[thread] := FALSE; AcquireMutex: mutex_enter(thread); return; end procedure; process a = \u0026#34;a\u0026#34; begin Loop: while TRUE do AcquireMutex: mutex_enter(\u0026#34;a\u0026#34;); CheckQueueLen: if Len(queue) = 0 then call mutex_wait(\u0026#34;a\u0026#34;); end if; Dequeue: dequeue(); ReleaseMutex: mutex_exit(\u0026#34;a\u0026#34;); end while; end process; process b = \u0026#34;b\u0026#34; begin Loop: while TRUE do AcquireMutex: mutex_enter(\u0026#34;b\u0026#34;); CheckQueueLen: if Len(queue) = 0 then call mutex_wait(\u0026#34;b\u0026#34;); end if; Dequeue: dequeue(); ReleaseMutex: mutex_exit(\u0026#34;b\u0026#34;); end while; end process; process c = \u0026#34;c\u0026#34; begin Loop: while TRUE do AcquireMutex: mutex_enter(\u0026#34;c\u0026#34;); Enqueue: queue := Append(queue, 42); MutexPulseAll: mutex_pulse_all(\u0026#34;c\u0026#34;); ReleaseMutex: mutex_exit(\u0026#34;c\u0026#34;); end while; end process; end algorithm; *) ==== Action Thread a acquires the mutex first, sees that the queue is empty and waits for the condition variable signal before proceeding. Thread c acquires the mutex, adds an item to the queue, signals the condition variable and releases the mutex. Thread b acquires the mutex before thread a gets to run, dequeues an item from the queue and releases the mutex. Thread a wakes up with the mutex acquired and tries to dequeue an item but finds out that queue is empty. Dragonfire\n// Thread a while (true) { Monitor.Enter(firebreathing); incinerate_enemies(); if (fireball.Wait(500)) { // Swoosh! blast_enemies(); // Uh... that was tiring. // I\u0026#39;d better rest while I\u0026#39;m vulnerable... if (fireball.Wait(500)) { if (fireball.Wait(500)) { critical_section(); } } // Safe now... } c = c - 1; c = c + 1; Monitor.Exit(firebreathing); } // Thread b // This is stupid. // The other head gets all the cool toys, // ...and I get stuck recharging. while (true) { if (c \u0026lt; 2) { // Let\u0026#39;s do some damage! fireball.Release(); c++; } else { // I hate being in here. critical_section(); } } ---- MODULE spec ---- EXTENDS TLC, Integers (*--algorithm spec variables mutex = \u0026#34;\u0026#34;, critical_section = 0, c = 0, fireballs = 0; define CriticalSection == critical_section \u0026lt;= 1 end define; macro mutex_enter(thread) begin await mutex = \u0026#34;\u0026#34;; mutex := thread; end macro; macro mutex_exit(thread) begin assert mutex = thread; mutex := \u0026#34;\u0026#34;; end macro; macro fireball_wait() begin if fireballs \u0026gt; 0 then fireballs := fireballs - 1; ok := TRUE; else ok := FALSE; end if; end macro; process a = \u0026#34;a\u0026#34; variables tmp = 0, ok = FALSE; begin Loop: while TRUE do AcquireMutex: mutex_enter(\u0026#34;a\u0026#34;); \\* incinerate_enemies(); CheckFireball_1: fireball_wait(); if ok then \\* blast_enemies(); CheckFireball_2: fireball_wait(); if ok then CheckFireball_3: fireball_wait(); if ok then EnterCriticalSection: critical_section := critical_section + 1; LeaveCriticalSection: critical_section := critical_section - 1; end if; end if; end if; LoadC_1: tmp := c; DecrementC: c := tmp - 1; LoadC_2: tmp := c; IncrementC: c := tmp + 1; ReleaseMutex: mutex_exit(\u0026#34;a\u0026#34;); end while; end process; process b = \u0026#34;b\u0026#34; variables tmp = 0; begin Loop: while TRUE do if c \u0026lt; 2 then FireballRelease: fireballs := fireballs + 1; LoadC: tmp := c; IncrementC: c := tmp + 1; else EnterCriticalSection: critical_section := critical_section + 1; LeaveCriticalSection: critical_section := critical_section - 1; end if; end while; end process; end algorithm; *) ==== Triple danger\n// Thread a while (true) { Monitor.Enter(conduit); // I summon mana for you, dragon! // Incinerate the enemies! energyBursts.Enqueue(new EnergyBurst()); Monitor.Exit(conduit); } // Thread b while (true) { if (energyBursts.Count \u0026gt; 0) { Monitor.Enter(conduit); energyBursts.Dequeue(); lightning_bolts(terrifying: true); Monitor.Exit(conduit); } } // Thread c while (true) { if (energyBursts.Count \u0026gt; 0) { Monitor.Enter(conduit); energyBursts.Dequeue(); fireball(mighty: true); Monitor.Exit(conduit); } } Provided without comment.\n---- MODULE spec ---- EXTENDS TLC, Sequences, Integers (*--algorithm spec variables mutex = \u0026#34;\u0026#34;, queue = \u0026lt;\u0026lt;\u0026gt;\u0026gt;; macro mutex_enter(thread) begin await mutex = \u0026#34;\u0026#34;; mutex := thread; end macro; macro mutex_exit(thread) begin assert mutex = thread; mutex := \u0026#34;\u0026#34;; end macro; macro enqueue() begin queue := Append(queue, \u0026#34;v\u0026#34;); end macro; macro dequeue() begin assert Len(queue) \u0026gt; 0; queue := Tail(queue); end macro; process a = \u0026#34;a\u0026#34; begin Loop: while TRUE do AcquireMutex: mutex_enter(\u0026#34;a\u0026#34;); Enqueue: enqueue(); ReleaseMutex: mutex_exit(\u0026#34;a\u0026#34;); end while; end process; process b = \u0026#34;b\u0026#34; begin Loop: while TRUE do if Len(queue) \u0026gt; 0 then AcquireMutex: mutex_enter(\u0026#34;b\u0026#34;); Dequeue: dequeue(); ReleaseMutex: mutex_exit(\u0026#34;b\u0026#34;); end if; end while; end process; process c = \u0026#34;c\u0026#34; begin Loop: while TRUE do if Len(queue) \u0026gt; 0 then AcquireMutex: mutex_enter(\u0026#34;c\u0026#34;); Dequeue: dequeue(); ReleaseMutex: mutex_exit(\u0026#34;c\u0026#34;); end if; end while; end process; end algorithm; *) ==== Provided without comment.\nBoss fight\n// Thread a while (true) { darkness++; evil++; if (darkness != 2 \u0026amp;\u0026amp; evil != 2) { if (fortress.Wait(500)) { fortress.Wait(); Monitor.Enter(sanctum); Monitor.Wait(sanctum); critical_section(); Monitor.Exit(sanctum); } } } // Thread b while (true) { darkness++; evil++; if (darkness != 2 \u0026amp;\u0026amp; evil == 2) { Monitor.Enter(sanctum); Monitor.Pulse(sanctum); Monitor.Exit(sanctum); critical_section(); } fortress.Release(); darkness = 0; evil = 0; } ---- MODULE spec ---- EXTENDS TLC, Integers, Sequences (*--algorithm spec variables mutex = \u0026#34;\u0026#34;, mutex_pulse_received = FALSE, darkness = 0, evil = 0, fortress = 0, threads_in_critical_section = 0; define MutualExclusion == threads_in_critical_section \u0026lt;= 1 end define; macro mutex_enter(thread) begin await mutex = \u0026#34;\u0026#34;; mutex := thread; end macro; macro mutex_exit(thread) begin assert mutex = thread; mutex := \u0026#34;\u0026#34;; end macro; macro mutex_pulse(thread) begin assert mutex = thread; mutex_pulse_received := TRUE; end macro; macro fortress_wait(block) begin if block then await fortress \u0026gt; 0; end if; if fortress = 0 then ok := FALSE; else fortress := fortress - 1; ok := TRUE; end if; end macro; procedure mutex_wait(thread) begin MutexWait_ReleaseMutex: assert mutex = thread; mutex := \u0026#34;\u0026#34;; MutexWait_WaitForPulse: await mutex_pulse_received = TRUE; mutex_pulse_received := FALSE; MutexWait_AcquireMutex: mutex_enter(thread); return; end procedure; procedure inc_darkness() variables tmp = 0; begin Inc_Load: tmp := darkness; Inc_Add: darkness := tmp + 1; return; end procedure; procedure inc_evil() variables tmp = 0; begin Inc_Load: tmp := evil; Inc_Add: evil := tmp + 1; return; end procedure; procedure critical_section() begin CriticalSection_Enter: threads_in_critical_section := threads_in_critical_section + 1; CriticalSection_Leave: threads_in_critical_section := threads_in_critical_section - 1; return; end procedure; process a = \u0026#34;a\u0026#34; variables ok = FALSE; begin Loop: while TRUE do IncDarkness: call inc_darkness(); IncEvil: call inc_evil(); Check: if darkness # 2 /\\ evil # 2 then FortressWait_1: fortress_wait(FALSE); if ok then FortressWait_2: fortress_wait(TRUE); DecFortress: fortress := fortress - 1; AcquireMutex: mutex_enter(\u0026#34;a\u0026#34;); MutexWait: call mutex_wait(\u0026#34;a\u0026#34;); CriticalSection: call critical_section(); ReleaseMutex: mutex_exit(\u0026#34;a\u0026#34;); end if; end if; end while; end process; process b = \u0026#34;b\u0026#34; begin Loop: while TRUE do IncDarkness: call inc_darkness(); IncEvil: call inc_evil(); Check: if darkness # 2 /\\ evil = 2 then AcquireMutex: mutex_enter(\u0026#34;b\u0026#34;); MutexPulse: mutex_pulse(\u0026#34;b\u0026#34;); MutexExit: mutex_exit(\u0026#34;b\u0026#34;); CriticalSection: call critical_section(); end if; FortressRelease: fortress := fortress + 1; ResetDarkness: darkness := 0; ResetEvil: evil := 0; end while; end process; end algorithm; *) ==== Provided without comment.\n","permalink":"https://poorlydefinedbehaviour.github.io/posts/the_deadlock_empire/","summary":"\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/posts/the_deadlock_empire/images/banner.jpeg\"\u003e\u003c/p\u003e\n\u003cp\u003eThis post contains \u003ca href=\"https://learntla.com/\"\u003eTLA+\u003c/a\u003e solutions for \u003ca href=\"https://deadlockempire.github.io/\"\u003eThe Deadlock Empire\u003c/a\u003e which is a collection of challenges where the objective is to break multithreaded programs by playing the role of a scheduler that can context switch at any time.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://deadlockempire.github.io/#T2-Expansion\"\u003eNon atomic instructions\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eThere\u0026rsquo;s two threads executing the following code:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c#\" data-lang=\"c#\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ea = a + \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (a == \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  critical_section();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eSince the \u003ccode\u003ea\u003c/code\u003e increment is not atomic, conceptually, it is like setting a temporary variable to the value of \u003ccode\u003ea\u003c/code\u003e\u0026ndash; \u003ccode\u003etmp = a\u003c/code\u003e and then setting \u003ccode\u003ea\u003c/code\u003e to the temporary variable value incremented by 1 \u0026ndash; \u003ccode\u003ea = tmp + 1\u003c/code\u003e.\u003c/p\u003e","title":"Model checking The Deadlock Empire"},{"content":"The list of things I read or watched in 2023 January Operator pattern - https://kubernetes.io/docs/concepts/extend-kubernetes/operator/ Controllers - https://kubernetes.io/docs/concepts/architecture/controller/ Introducing Operators: Putting Operational Knowledge into Software - https://web.archive.org/web/20170129131616/https://coreos.com/blog/introducing-operators.html Best practices for building Kubernetes Operators and stateful apps - https://cloud.google.com/blog/products/containers-kubernetes/best-practices-for-building-kubernetes-operators-and-stateful-apps CNCF Operator WHITE PAPER - https://www.cncf.io/wp-content/uploads/2021/07/CNCF_Operator_WhitePaper.pdf Why do we need a Database Connection Pool? -every programmer must know - https://medium.com/javarevisited/why-do-we-need-a-database-connection-pool-every-programmer-must-know-9f90e7c8e5af Difference in String pool between Java 6 and 7? Answer - https://javarevisited.blogspot.com/2016/07/difference-in-string-pool-between-java6-java7.html A deep dive into Kubernetes controllers - https://docs.bitnami.com/tutorials/a-deep-dive-into-kubernetes-controllers What is eBPF, anyway, and why should Kubernetes admins care? - https://www.groundcover.com/blog/what-is-ebpf What I learnt about Kubernetes Controllers - https://fntlnz.wtf/post/what-i-learnt-about-kubernetes-controller/ [Backend #56] Why you should send async tasks to Redis within a DB transaction - https://www.youtube.com/watch?v=ZfFxdPbgN88 Cmputer Networking (Deepdive) - https://www.youtube.com/watch?v=6G14NrjekLQ Grafana k8s rollout-operator code walkthrough - https://github.com/grafana/rollout-operator We migrated to Rust, but what did we gain? - https://bytebaker.medium.com/we-migrated-to-rust-but-what-did-we-gain-1429d036d0c CAP Theorem Simplified | System Design Fundamentals - https://www.youtube.com/watch?v=BHqjEjzAicA Operational Use case Patterns for Apache Kafka and Flink — Part 1 - https://medium.com/event-driven-utopia/operational-use-case-patterns-for-apache-kafka-and-flink-part-1-5a0f8742df90 STATE MACHINES III: TYPE STATES - https://blog.yoshuawuyts.com/state-machines-3/ How SQLite Scales Read Concurrency - https://fly.io/blog/sqlite-internals-wal/ How JPMorgan Chase uses Grafana and AI to monitor SLOs, SLIs, and more - https://grafana.com/blog/2023/01/03/how-jpmorgan-chase-uses-grafana-and-ai-to-monitor-slos-slis-and-more/?mdm=social Rust Case Study: Community makes Rust an easy choice for npm - https://www.rust-lang.org/static/pdfs/Rust-npm-Whitepaper.pdf Bryan Cantrill on What’s Next for Infrastructure, Open Source \u0026amp; Rust - https://www.scylladb.com/2023/01/04/bryan-cantrill-on-whats-next-for-infrastructure-open-source-rust/ CQRS - https://martinfowler.com/bliki/CQRS.html How to Use PHP Extensions - https://www.zend.com/blog/php-development-using-php-extensions#:~:text=Why%20Use%20PHP%20Extensions%3F,to%20your%20application's%20PHP%20binary. Seastar: The future\u0026lt;\u0026gt; is Here - https://seastar.io/blog/2018/02/seastar-the-future-is-here/ Seastar: Futures and Promises - https://seastar.io/futures-promises/ Continuations Made Simple and Illustrated Denys Duchier - https://www.ps.uni-saarland.de/~duchier/python/continuations.html 10 Things I wish I’d known before building a Kubernetes CRD controller - https://omerxx.com/k8s-controllers/ Extend Kubernetes via a shared informer - https://www.cncf.io/blog/2019/10/15/extend-kubernetes-via-a-shared-informer/ Event Sourcing - https://medium.com/ssense-tech/event-sourcing-part-i-understanding-what-it-is-core-components-and-common-misconceptions-5dec65f6d61 The Kubernetes dynamic client - https://caiorcferreira.github.io/post/the-kubernetes-dynamic-client/ Go (Golang) vs Node JS (Microservices) performance benchmark (Istio - Prometheus - Grafana) - https://www.youtube.com/watch?v=ntMKNlESCpM Monitoring on steroids: How JPMorgan Chase uses Grafana for their trading platform to spot issues quickly and proactively - https://grafana.com/go/observabilitycon/2022/monitoring-on-steroids-how-jpmorgan-chase-uses-grafana-for-their-trading-platform-to-spot-issues-quickly-and-proactively/?pg=blog\u0026plcmt=body-txt The Kubernetes Operator Framework Book - https://www.amazon.com/Kubernetes-Operator-Framework-Book-management/dp/1803232854 Practical Networked Applications in Rust, Part 1: Non-Networked Key-Value Store - https://arveknudsen.com/posts/practical-networked-applications-in-rust/module-1/ Simple leader election with Kubernetes and Docker - https://kubernetes.io/blog/2016/01/simple-leader-election-with-kubernetes/ Leader election in Kubernetes using client-go - https://itnext.io/leader-election-in-kubernetes-using-client-go-a19cbe7a9a85 Understanding lockForUpdate and sharedLock in Laravel - https://blog.renoki.org/understanding-lockforupdate-and-sharedlock-in-laravel Kubebuilder book - https://book.kubebuilder.io/introduction.html The Future of the Web is on the Edge - https://deno.com/blog/the-future-of-web-is-on-the-edge Hashicorp: Operating Cadence - https://works.hashicorp.com/articles/operating-cadence Kubernetes docs: Leases - https://kubernetes.io/docs/concepts/architecture/leases/ How to get started with K8s contributions - https://abhii85.hashnode.dev/how-to-get-started-with-k8s-contributions Amazon builder\u0026rsquo;s library: Leader Election in Distributed Systems - https://aws.amazon.com/builders-library/leader-election-in-distributed-systems/ What is leader election in distributed systems? -https://www.enjoyalgorithms.com/blog/leader-election-system-design Azure: Leader Election pattern - https://learn.microsoft.com/en-us/azure/architecture/patterns/leader-election Elastic: Leader Election, Why Should I Care? - https://www.elastic.co/blog/found-leader-election-in-general Keep Your Cache Always Fresh with Debezium! by Gunnar Morling - https://www.youtube.com/watch?v=zOOFMHAjoPI every good programmer should know how to code this data structure (its easy) - https://www.youtube.com/watch?v=dti0F7w3yOQ Nginx vs Traefik performance benchmark (HTTP - HTTPS - gRPC | Latency - CPU - Memory | Prometheus) - https://www.youtube.com/watch?v=bgcfEW_Yh7E Comparing Optimistic and Pessimistic Locking With GO and PostgreSQL - https://hackernoon.com/comparing-optimistic-and-pessimistic-locking-with-go-and-postgresql Implementing Your Own Transactions with MVCC - https://levelup.gitconnected.com/implementing-your-own-transactions-with-mvcc-bba11cab8e70 Transactional memory - https://en.wikipedia.org/wiki/Transactional_memory Multiversion concurrency control - https://en.wikipedia.org/wiki/Multiversion_concurrency_control Bi-Directional Streaming With GRPC In Golang - https://www.youtube.com/watch?v=IHQNiQlQVXo How does videogame AI make its decisions? (FSM, Behaviour Trees, BDI, GOAP) | Bitwise - https://www.youtube.com/watch?v=ValJk15l_y8 Bully algorithm - https://en.wikipedia.org/wiki/Bully_algorithm How Amazon grew an awkward side project into AWS, a behemoth that’s now 4 times bigger than its original shopping business - https://fortune-com.cdn.ampproject.org/c/s/fortune.com/longform/amazon-web-services-ceo-adam-selipsky-cloud-computing/amp/ Achieving idempotency in the AWS serverless space - https://qasimalbaqali.medium.com/achieving-idempotency-in-the-aws-serverless-space-d0671a521479 Ring network - https://en.wikipedia.org/wiki/Ring_network Zookeeper Atomic Broadcast Protocol (ZAB) and implementation of Zookeeper. - https://www.cloudkarafka.com/blog/cloudkarafka-zab.html#:~:text=What%20is%20ZAB%20(Zookeeper%20Atomic,restoration%20of%20any%20failed%20nodes. Scaling a Monolith with 5 Different Patterns - https://www.youtube.com/watch?v=rSCDuZLP9UM What is Apache Pinot? (and User-Facing Analytics) | A StarTree Lightboard by Tim Berglund - https://www.youtube.com/watch?v=_lqdfq2c9cQ Split-brain, Quorum, and Fencing - https://techthoughts.typepad.com/managing_computers/2007/10/split-brain-quo.html What Is Progressive Delivery All About? - https://launchdarkly.com/blog/what-is-progressive-delivery-all-about/ Installing OpenTelemetry On Kubernetes - https://www.youtube.com/watch?v=D6XtpSCH3Nk Zero Allocations And Benchmarking In Golang - https://www.youtube.com/watch?v=QFGbTOsk-Bk MySQL Performance Benchmarking: MySQL 5.7 vs MySQL 8.0 - https://severalnines.com/blog/mysql-performance-benchmarking-mysql-57-vs-mysql-80/ Charset and Collation Settings Impact on MySQL Performance - https://www.percona.com/blog/2019/02/27/charset-and-collation-settings-impact-on-mysql-performance/ The Engineers Are Bloggers Now - https://www.nytimes.com/2023/01/07/business/uber-engineer-bloggers.html?unlocked_article_code=dzR4qpOXZ8gpfTTyCkq7xitIcXbyR5k9QmIlBgqWzUKcht9wVo8LVAOTuoFkc3eKTkHzZYAMKrFy63GAJ_wyh_yraHRAjn3xMn43WeGSmpasESxUmHz5WSgIZZ-d2OrLewYrgI2szmSVuinQpxLxVvMm88ej6KLcdofzxNliV7OS2cwfYZtwbULf_OB2FGbsOZD2NsN2yUumaj21jRA84mtfllfLLtjaX62E342K8SQU1NpWeWw4EHDEpx3t1AEc8wbcmzaFtG_TeNy6yIWIyzKMkQLq2CAuc8_5e6m_EC9sl0zZyut7b1a9kG_0xEaOnZLl4vNwBuZXl7tSMiNdrxk\u0026smid=share-url A better domain events pattern - https://lostechies.com/jimmybogard/2014/05/13/a-better-domain-events-pattern/ Transactional Outbox pattern with Azure Cosmos DB - https://learn.microsoft.com/en-us/azure/architecture/best-practices/transactional-outbox-cosmos Generational indices guide - https://lucassardois.medium.com/generational-indices-guide-8e3c5f7fd594 What is Computational Storage? - https://www.youtube.com/watch?v=lCuJnhZaTv8 Data sovereignty is the future of cloud - https://redpanda.com/blog/kafka-redpanda-future The Weekend Read - Issue #2 - https://dtornow225.substack.com/p/the-weekend-read-issue-2-961455 How we built Shadow Indexing, the subsystem powering Redpanda’s tiered storage capabilities - https://redpanda.com/blog/tiered-storage-architecture-shadow-indexing-deep-dive Announcing Rust 1.66.1 - https://blog.rust-lang.org/2023/01/10/Rust-1.66.1.html Program counter - https://en.wikipedia.org/wiki/Program_counter Von Neumann architecture - https://en.wikipedia.org/wiki/Von_Neumann_architecture AVI Networks: Subnet Mask - https://avinetworks.com/glossary/subnet-mask/ Scheduling In Go : Part I - OS Scheduler - https://www.ardanlabs.com/blog/2018/08/scheduling-in-go-part1.html Simplifying Redpanda Raft implementation - https://redpanda.com/blog/simplifying-raft-replication-in-redpanda Set up and observe a Spring Boot application with Grafana Cloud, Prometheus, and OpenTelemetry - https://grafana.com/blog/2022/04/26/set-up-and-observe-a-spring-boot-application-with-grafana-cloud-prometheus-and-opentelemetry/ Announcing Grafana Mimir, the most scalable open source TSDB in the world - https://grafana.com/blog/2022/03/30/announcing-grafana-mimir/ 1 Problem, 24 Programming Languages - https://www.youtube.com/watch?v=U6I-Kwj-AvY \u0026ldquo;I Became A Programmer By Mistake\u0026rdquo; Says the Creator of C++ 🫢 - https://www.youtube.com/watch?v=OQZhHHq3p1I Kubernetes Explained in 6 Minutes | k8s Architecture - https://www.youtube.com/watch?v=TlHvYWVUZyc Why innodb_file_per_table is important - https://www.catalyst2.com/knowledgebase/server-management/why-innodb_file_per_table-is-important/#:~:text=The%20innodb_file_per_table%20setting%20defines%20how,to%20%E2%80%9Con%E2%80%9D%20by%20default. GCP MySQL: Operational guidelines - https://cloud.google.com/sql/docs/mysql/operational-guidelines You DON\u0026rsquo;T want an In-Memory Event Bus like MediatR - https://www.youtube.com/watch?v=KCvsk5tTP3w Buffered VS UnBuffered Channels In Golang - https://www.youtube.com/watch?v=HLGrvgbo-Yk ProxySQL, a Google Cloud Platform alternative to SQL database management - https://www.makingscience.com/blog/proxysql-a-google-cloud-platform-gcp-alternative-to-sql-database-management/ How we achieved MySQL High Availability using ProxySQL - https://exotel.com/blog/achieving-mysql-high-availability-proxysql/ AWS Lambda now supports Maximum Concurrency for Amazon SQS as an event source - https://aws.amazon.com/about-aws/whats-new/2023/01/aws-lambda-maximum-concurrency-amazon-sqs-event-source/ KRaft: Apache Kafka Without ZooKeeper - https://developer.confluent.io/learn/kraft/ Introduction to Amazon RDS Multi-AZ deployments | Amazon Web Services - https://www.youtube.com/watch?v=_MROZtLtCcA Rust Powered Polymorphism ⚡️ With Traits - https://www.youtube.com/watch?v=CHRNj5oubwc Using an /etc/hosts file for custom domains during development - https://support-acquia.force.com/s/article/360004175973-Using-an-etc-hosts-file-for-custom-domains-during-development#:~:text=The%20%2Fetc%2Fhosts%20file%20contains,before%20making%20a%20website%20live. What is Process Mining? - https://www.youtube.com/watch?v=5thuFbUQ7Qg Go (Golang) vs Java performance benchmark (Fiber vs Spring Boot | Prometheus | Minio | MongoDB) - https://www.youtube.com/watch?v=8CiErLxdaA8 Supporting the Use of Rust in the Chromium Project - https://security.googleblog.com/2023/01/supporting-use-of-rust-in-chromium.html The Rule Of 2 - https://chromium.googlesource.com/chromium/src/+/master/docs/security/rule-of-2.md Controllers and Operators - https://joshrosso.com/docs/2019/2019-10-13-controllers-and-operators/ Fear and Loathing in Lock-Free Programming - https://medium.com/@tylerneely/fear-and-loathing-in-lock-free-programming-7158b1cdd50c How To Avoid Locks (Mutex) In Your Golang Programs? - https://www.youtube.com/watch?v=Ya5KRFrwPug Architecture Pitfalls: Don’t use your ORM entities for everything — embrace the SQL! - https://www.blackparrotlabs.io/post/architecture-pitfalls-dont-use-your-orm-entities-for-everything Single Writer Principle - https://mechanical-sympathy.blogspot.com/2011/09/single-writer-principle.html start to your hacking journey with this video (reverse engineering is IMPORTANT) - https://www.youtube.com/watch?v=gh2RXE9BIN8 Test-and-set spinlocks - https://geidav.wordpress.com/2016/03/23/test-and-set-spinlocks/ Async IO on Linux: select, poll, and epoll - https://jvns.ca/blog/2017/06/03/async-io-on-linux--select--poll--and-epoll/ Transactions in MongoDB, Cassandra, Zookeeper and others - http://rystsov.info/2012/09/01/cas.html Writing Kubernetes Custom Controllers - https://cloudark.medium.com/kubernetes-custom-controllers-b6c7d0668fdf How To Use A Bytes Buffer In Golang And Make It Even Better? - https://www.youtube.com/watch?v=ENxfg9rS5dc RustFest Paris 2018: Building Reliable Infrastructure in Rust by Tyler Neely - https://www.youtube.com/watch?v=hMJEPWcSD8w Enable Cross-Account Observability in Amazon CloudWatch | Amazon Web Services - https://www.youtube.com/watch?v=lUaDO9dqISc 01 - History of Databases (CMU Databases / Spring 2020) - https://www.youtube.com/watch?v=SdW5RKUboKc Strategies To Detect and Respond To Failures in Cloud Applications - https://www.youtube.com/watch?v=NRlGeVTDpGU Nginx vs Apache HTTP Server performance benchmark (Prometheus | HTTP | HTTPS | Grafana | Ansible) - https://www.youtube.com/watch?v=Fx8afVZJLd4 01 - Course Introduction \u0026amp; Relational Model (CMU Intro to Database Systems / Fall 2021) - https://www.youtube.com/watch?v=v4bU6n97Vr8\u0026list=PLSE8ODhjZXjZaHA6QcxDfJ0SIWBzQFKEG Performance Schema: Great Power Comes Without Great Cost - https://dev.mysql.com/blog-archive/performance-schema-great-power-comes-without-great-cost/ MySQL Connection Handling and Scaling - https://dev.mysql.com/blog-archive/mysql-connection-handling-and-scaling/ On connections - https://dom.as/2011/08/28/mysql-connection-accept-speed/ Kubernetes docs: Considerations for large clusters - https://kubernetes.io/docs/setup/best-practices/cluster-large/#:~:text=No%20more%20than%20300%2C000%20total%20containers The evolution of software compliance and accreditation in the Department of Defense - https://assets.website-files.com/6030224cd6bd6639e9d922c9/6398ad388c573712eb14d3b4_White%20Paper_%20Evolution%20of%20Software%20Compliance%20%26%20Accreditation%20in%20DoD.pdf QUERYING PROMETHEUS - https://prometheus.io/docs/prometheus/latest/querying/basics/#expression-language-data-types Introducing LiteFS - https://fly.io/blog/introducing-litefs/ Prometheus: METRIC TYPES - https://prometheus.io/docs/concepts/metric_types/ Prometheus: DATA MODEL - https://prometheus.io/docs/concepts/data_model/ Basics and best practices for getting started with PromQL - https://grafana.com/blog/2021/01/29/basics-and-best-practices-for-getting-started-with-promql/ New in Grafana 9: The Prometheus query builder makes writing PromQL queries easier - https://grafana.com/blog/2022/07/18/new-in-grafana-9-the-prometheus-query-builder-makes-writing-promql-queries-easier/ Exploring Prometheus Go client metrics - https://povilasv.me/prometheus-go-metrics/ Prometheus: HISTOGRAMS AND SUMMARIES - https://prometheus.io/docs/practices/histograms/ Prometheus: TYPES OF METRICS.- https://prometheus.io/docs/tutorials/understanding_metric_types/ Consensus Protocols: Two-Phase Commit - https://www.the-paper-trail.org/post/2008-11-27-consensus-protocols-two-phase-commit/ How summary metrics work in Prometheus - https://grafana.com/blog/2022/03/01/how-summary-metrics-work-in-prometheus/ Elastic Cloud Services: Scaling Snowflake’s Control Plane - https://www.micahlerner.com/2023/01/19/elastic-cloud-services-scaling-snowflakes-control-plane.html How we clone a running VM in 2 seconds - https://codesandbox.io/blog/how-we-clone-a-running-vm-in-2-seconds Sneaking By The Rust Borrow Checker - Interior Mutability - https://www.youtube.com/watch?v=HwupNf9iCJk Noisy Neighbor antipattern - https://learn.microsoft.com/en-us/azure/architecture/antipatterns/noisy-neighbor/noisy-neighbor How Recommender Systems Work (Netflix/Amazon) - https://www.youtube.com/watch?v=n3RKsY2H-NE Collaborative Filtering - https://developers.google.com/machine-learning/recommendation/collaborative/basics Matrix Factorization - https://developers.google.com/machine-learning/recommendation/collaborative/matrix Prototyping a Recommender System Step by Step Part 1: KNN Item-Based Collaborative Filtering - https://towardsdatascience.com/prototyping-a-recommender-system-step-by-step-part-1-knn-item-based-collaborative-filtering-637969614ea Build a Recommendation Engine With Collaborative Filtering - https://realpython.com/build-recommendation-engine-collaborative-filtering/#using-python-to-build-recommenders What is Geographic DNS Routing? - https://ns1.com/resources/how-geographic-routing-works Geolocation routing - https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy-geo.html Using CloudFront Signed URLs with Built-In Authenticated Access to S3 - https://doordash.engineering/2021/12/14/building-authenticated-access-to-s3/ Effect system - https://en.wikipedia.org/wiki/Effect_system A Programmer-Friendly I/O Abstraction Over io_uring and kqueue - https://tigerbeetle.com/blog/a-friendly-abstraction-over-iouring-and-kqueue/ Intrusive linked lists - https://www.data-structures-in-practice.com/intrusive-linked-lists/ Merbridge - Accelerate your mesh with eBPF - https://istio.io/v1.15/blog/2022/merbridge/ A Database Without Dynamic Memory Allocation - https://tigerbeetle.com/blog/a-database-without-dynamic-memory/ Memory access on the Apple M1 processor - https://lemire.me/blog/2021/01/06/memory-access-on-the-apple-m1-processor/ Three Clocks are Better than One - https://tigerbeetle.com/blog/three-clocks-are-better-than-one/ Next Rust Compiler - https://matklad.github.io/2023/01/25/next-rust-compiler.html The RED Method: key metrics for microservices architecture - https://www.weave.works/blog/the-red-method-key-metrics-for-microservices-architecture/ Jsonnet Training Course - https://jsonnet-libs.github.io/jsonnet-training-course/ Why Is System Design Interview Important? - https://www.youtube.com/watch?v=EyMRZpgJUuc The Log-Structured Merge-Tree (LSM Tree) - https://blog.acolyer.org/2014/11/26/the-log-structured-merge-tree-lsm-tree/ HYTRADBOI \u0026lsquo;22 — TigerBeetle\u0026rsquo;s LSM-Forest - https://www.youtube.com/watch?v=yBBpUMR8dHw highscalability.com: Paper: Immutability Changes Everything By Pat Helland - http://highscalability.com/blog/2015/1/26/paper-immutability-changes-everything-by-pat-helland.html The size of Rust Futures - https://swatinem.de/blog/future-size/ The network is reliable - https://aphyr.com/posts/288-the-network-is-reliable Introduction to continuous profiling - https://www.youtube.com/watch?v=pU6GFVHFPFU\u0026list=PLDGkOdUX1UjqEzcxQrbROMy8DN7MZv_h4\u0026index=2 New in Grafana Loki 2.4: The Simple Scalable Deployment Mode - https://www.youtube.com/watch?v=M8nYWBpbwWg\u0026list=PLDGkOdUX1UjqEzcxQrbROMy8DN7MZv_h4\u0026index=2 Grafana Loki 2.3: Easier \u0026amp; Faster Querying - https://www.youtube.com/watch?v=zIdEVNA6YTI\u0026list=PLDGkOdUX1UjqEzcxQrbROMy8DN7MZv_h4\u0026index=3 ARM vs x86 performance benchmark (amd64 vs arm64 - AWS Graviton - AWS EKS - Kubernetes - Golang) - https://www.youtube.com/watch?v=ndXKHgFIIL4 Why Uber Fails to Disrupt Transportation - https://www.youtube.com/watch?v=ajHg97qx4r0 Rust\u0026rsquo;s Witchcraft - https://www.youtube.com/watch?v=MWRPYBoCEaY Jepsen: MongoDB - https://aphyr.com/posts/284-call-me-maybe-mongodb C++ vs Rust: Tuples - https://www.youtube.com/watch?v=0RsLGM_7ODE Jepsen: Riak - https://aphyr.com/posts/285-call-me-maybe-riak Paper: CRDTs: Consistency Without Concurrency Control - http://highscalability.com/blog/2010/12/23/paper-crdts-consistency-without-concurrency-control.html Jepsen: final thoughts - https://aphyr.com/posts/286-call-me-maybe-final-thoughts Sloppy Quorum and Hinted handoff: Quorum in the times of failure - https://distributed-computing-musings.com/2022/05/sloppy-quorum-and-hinted-handoff-quorum-in-the-times-of-failure/ An introduction to replication - https://distributed-computing-musings.com/2021/12/an-introduction-to-replication/ Distributed Consensus: Why do we need everyone to agree? - https://distributed-computing-musings.com/2021/12/distributed-consensus-why-do-we-need-everyone-to-agree/ Distributed Consensus: How to decide what everyone agrees on? - https://distributed-computing-musings.com/2021/12/distributed-consensus-how-to-decide-what-everyone-agrees-on/ Distributed Consensus: How to deal with disagreement? - https://distributed-computing-musings.com/2021/12/distributed-consensus-how-to-deal-with-disagreement/ Replication: Challenges in onboarding a new follower - https://distributed-computing-musings.com/2021/12/replication-challenges-in-onboarding-a-new-follower/ Replication: Handling node failure - https://distributed-computing-musings.com/2021/12/replication-handling-node-failure/ Split-brain (computing) - https://en.wikipedia.org/wiki/Split-brain_(computing) Fencing (computing) - https://en.wikipedia.org/wiki/Fencing_(computing) STONITH - https://en.wikipedia.org/wiki/STONITH Watchdog timer - https://en.wikipedia.org/wiki/Watchdog_timer How does the detour crate work? - https://www.youtube.com/watch?v=aLeMCUXFJwY Replication: Synchronous vs Asynchronous replication - https://distributed-computing-musings.com/2022/01/replication-synchronous-vs-asynchronous-replication/ Replication: Issues with replication lag - https://distributed-computing-musings.com/2022/01/replication-issues-with-replication-lag/ Behind the scenes of Vercel\u0026rsquo;s infrastructure: Achieving optimal scalability and performance - https://vercel.com/blog/behind-the-scenes-of-vercels-infrastructure Suture - Supervisor Trees for Go - https://www.jerf.org/iri/post/2930/ Error wrapping in Go - https://bitfieldconsulting.com/golang/wrapping-errors Grafana Screencasts - https://www.youtube.com/watch?v=zIdEVNA6YTI\u0026list=PLDGkOdUX1UjqEzcxQrbROMy8DN7MZv_h4\u0026index=4 Building a powerful Double Entry Accounting system - Lucas Cavalcanti - https://www.youtube.com/watch?v=aw6y4r4NAlw Design Considerations When Using Transactionality - https://hazelcast.com/blog/design-considerations-when-using-transactionality/ An Elegant DB Schema for Double-Entry Accounting - https://blog.journalize.io/posts/an-elegant-db-schema-for-double-entry-accounting/ Tigerbeetle: Design Document - https://github.com/tigerbeetledb/tigerbeetle/blob/main/docs/DESIGN.md TigerBeetle - A Million Financial Transactions per Second in Zig - https://www.youtube.com/watch?v=BH2jvJ74npM My Rust journey and how to learn Rust - https://blog.moelove.info/my-rust-journey-and-how-to-learn-rust Why doesn\u0026rsquo;t Go have variance in its type system? - https://blog.merovius.de/posts/2018-06-03-why-doesnt-go-have-variance-in/ CI/CD In 5 Minutes | Is It Worth The Hassle? - https://www.youtube.com/watch?v=42UP1fxi2SY 2022 in Programming Languages - https://www.youtube.com/watch?v=1Evd69G6ItM How Does Encryption Work? - https://www.youtube.com/watch?v=sPJmIeHpWd4 TigerBeetle raises $6.4M to power the future of financial accounting infrastructure - https://tigerbeetle.com/blog/2023-01-30-series-seed-announcement/ The Power of 10: Rules for Developing Safety-Critical Code - https://en.wikipedia.org/wiki/The_Power_of_10:_Rules_for_Developing_Safety-Critical_Code What is Zig\u0026rsquo;s Comptime? - https://kristoff.it/blog/what-is-zig-comptime/ Paxos consensus for beginners - https://medium.com/distributed-knowledge/paxos-consensus-for-beginners-1b8519d3360f February Rutgers: Understanding Paxos - https://people.cs.rutgers.edu/~pxk/417/notes/paxos.html Guaranteed Scheduling For Critical Add-On Pods - https://kubernetes.io/docs/tasks/administer-cluster/guaranteed-scheduling-critical-addon-pods/ Pod Priority and Preemption - https://kubernetes.io/docs/concepts/scheduling-eviction/pod-priority-preemption/ Load Balancers for System Design Interviews - https://www.youtube.com/watch?v=chyZRNT7eEo The Hardest Part of Writing Tests is Getting Started - https://shopify.engineering/the-hardest-part-of-writing-tests-is-getting-started 8 Key Data Structures That Power Modern Databases - https://www.youtube.com/watch?v=W_v05d_2RTo Troubleshooting Kafka with 2000 Microservices | Event Driven - https://www.youtube.com/watch?v=t5lsPZSs01Q [Backend #58] Why a bit of delay is good for your async tasks - https://www.youtube.com/watch?v=ILNiZgseLUI \u0026ldquo;Testing Distributed Systems w/ Deterministic Simulation\u0026rdquo; by Will Wilson - https://www.youtube.com/watch?v=4fFDFbi3toc Is This NEW Language BETTER Than Rust? C++? (Zig First Impressions) - https://www.youtube.com/watch?v=zFELcHTki9U Carving the Scheduler Out of Our Orchestrator - https://fly.io/blog/carving-the-scheduler-out-of-our-orchestrator/ Redis replication - https://redis.io/docs/management/replication/ Redis: Unsafe At Any Speed - https://towardsdatascience.com/redis-unsafe-at-any-speed-f2731f738a25 Distributed Computing Concepts - https://medium.com/codex/distributed-computing-concepts-f6275078a81 CAP theorem - https://en.wikipedia.org/wiki/CAP_theorem The many faces of consistency - https://blog.acolyer.org/2017/01/12/the-many-faces-of-consistency/ Jepsen: Redis - https://aphyr.com/posts/283-jepsen-redis Jepsen: MongoDB - https://aphyr.com/posts/284-call-me-maybe-mongodb Jepsen: MongoDB 3.4.0-rc3 - https://jepsen.io/analyses/mongodb-3-4-0-rc3 Red5: Live Video Streaming Protocols and the Race to Zero Latency - https://www.red5pro.com/live-video-streaming-protocols-zero-latency-whitepaper/ Jepsen: On the perils of network partitions - https://aphyr.com/posts/281-call-me-maybe Jepsen: Postgres - https://aphyr.com/posts/282-call-me-maybe-postgres Designing futures for Rust - http://aturon.github.io/blog/2016/09/07/futures-design/ gRPC vs Kafka: Which one should you choose? - https://www.youtube.com/watch?v=Qkhfhhn8ALU How To Stream Large Files Over TCP In Golang - https://www.youtube.com/watch?v=82oFmY-Qeok Bloom is More Complicated Than You Think - https://www.youtube.com/watch?v=ml-5OGZC7vE The Golang Scheduler - https://www.kelche.co/blog/go/golang-scheduling/ Causal Consistency - https://jepsen.io/consistency/models/causal Jepsen: Redis-Raft 1b3fbf6 - https://jepsen.io/analyses/redis-raft-1b3fbf6 A Foolish Consistency: Consul at Fly.io - https://fly.io/blog/a-foolish-consistency/ Fly.io: Building Clusters With Serf, My New Favorite Thing - https://fly.io/blog/building-clusters-with-serf/#what-serf-is-doing Lamport timestamp - https://en.wikipedia.org/wiki/Lamport_timestamp Paxos at its heart is very simple - https://blog.the-pans.com/paxos-explained/ How Redis cluster achieves high availability and data persistence - https://medium.com/@bb8s/how-redis-cluster-achieves-high-availability-and-data-persistence-8cdc899764e8 Time and Order - https://blog.the-pans.com/time-and-order/ State Machine and Synchronization - https://blog.the-pans.com/state-machine-and-sync/ Paxos vs. Quorum-based Consistency - https://blog.the-pans.com/paxos-vs-quorum-based-consistency/ Understanding Paxos as a Read-modify-write Transaction - https://blog.the-pans.com/understanding-paxos/ Structural Subtyping in Go - https://www.youtube.com/watch?v=aBhnP6FOvJo Stanford: Paxos lecture (Raft user study) - https://www.youtube.com/watch?v=JEpsBg0AO6o Thinking distributed systems: Pre­fa­ce - https://book.dtornow.com/assets/chapters/Preface.pdf Leslie Lamport: Paxos Made Simple - https://lamport.azurewebsites.net/pubs/paxos-simple.pdf Writing a Static Analyser for PHP in Rust - Overview - https://ryangjchandler.co.uk/posts/writing-a-static-analyser-for-php-in-rust-overview Envelope Encryption - https://jayendrapatil.com/envelope-encryption/ Envelope Encryption - Putting Your Encryption Key in an Envelope Is the Safer Option - https://senthilnayagan.com/data-security-and-compliance/2022/envelope-encryption What Are the Benefits of Envelope Encryption? - https://support.huaweicloud.com/intl/en-us/dew_faq/dew_01_0054.html Kubernetes: Fine Parallel Processing Using a Work Queue - https://kubernetes.io/docs/tasks/job/fine-parallel-processing-work-queue/ Public Cloud Inter-region Network Latency as Heat-maps - https://medium.com/@sachinkagarwal/public-cloud-inter-region-network-latency-as-heat-maps-134e22a5ff19 The technology behind GitHub’s new code search - https://github.blog/2023-02-06-the-technology-behind-githubs-new-code-search/ FileWave: Why we moved from ZeroMQ to NATS - https://synadia.com/blog/filewave-why-we-moved-from-zeromq-to-nats-and-picked-it-over-kafka-and-rabbitmq What are dependent types? aka the Calculus of Construction (as a type wizard - https://www.youtube.com/watch?v=cf3hVL1bgNc Lamport Clock - https://martinfowler.com/articles/patterns-of-distributed-systems/lamport-clock.html Make any algorithm lock-free with this one crazy trick - https://www.the-paper-trail.org/post/2016-05-25-make-any-algorithm-lock-free-with-this-one-crazy-trick/ User or *User - Do We Need Struct Pointers Everywhere? - https://preslav.me/2023/02/06/golang-do-we-need-struct-pointers-everywhere/ SharedArrayBuffer warnings in Search Console: Clarifying a new cross-origin isolation security policy - https://searchengineland.com/sharedarraybuffer-warnings-in-search-console-clarifying-a-new-cross-origin-isolation-security-policy-346865 Lamport TLA+ Course Lecture 1: Introduction to TLA+ (HD) - https://www.youtube.com/watch?v=p54W-XOIEF8 Lamport TLA+ Course Lecture 2: State Machines in TLA+ (HD) - https://www.youtube.com/watch?v=4snwZl726c4 Event-Driven Architecture: I do not think it means what you think it means - https://www.youtube.com/watch?v=iAA7PTqs4xY Time, Clocks, and the Ordering of Events in a Distributed System - https://lamport.azurewebsites.net/pubs/time-clocks.pdf Two-phase commit - https://www.researchgate.net/publication/275155037_Two-Phase_Commit The Consequences of Ignoring Memory Safety (but what does that mean) - https://www.youtube.com/watch?v=lxUYZVX_FjQ Abstractions to easily swap implementations? Not so fast. - https://www.youtube.com/watch?v=qeJeS-7luo8 Go internals - The context package - https://www.damianopetrungaro.com/posts/go-internal-context-package/ The LMAX Architecture - https://martinfowler.com/articles/lmax.html Handling Failures From First Principles - https://dominik-tornow.medium.com/handling-failures-from-first-principles-1ed976b1b869 Paper Summary: Sagas - https://dominik-tornow.medium.com/paper-summary-sagas-395ef2a9a575 Pattern: Saga - https://microservices.io/patterns/data/saga.html Distributed Transactions \u0026amp; Two-phase Commit - https://medium.com/geekculture/distributed-transactions-two-phase-commit-c82752d69324 MIT Distributed systems: Lecture 12: Distributed Transactions - https://www.youtube.com/watch?v=aDp99WDIM_4 Testing complex workflows in Go - https://blog.lobocv.com/posts/golang_testing/?utm_source=reddit\u0026utm_medium=blog\u0026utm_campaign=golang\u0026utm_content=testing_advanced_flows All your comparable types - https://go.dev/blog/comparable Reducing system load with event folding - https://blog.lobocv.com/posts/event_folding/ Crash recovery in a distributed data storage system - https://www.microsoft.com/en-us/research/publication/crash-recovery-in-a-distributed-data-storage-system/ Paper Summary: Fundamentals of Fault-Tolerant Distributed Computing - https://dominik-tornow.medium.com/paper-summary-fundamentals-of-fault-tolerant-distributed-computing-53969eaa38f3 Lamport: Computation and state machines - https://lamport.azurewebsites.net/pubs/state-machine.pdf Rutgers: distributed transactions - https://people.cs.rutgers.edu/~pxk/417/notes/transactions.html The Elephant was a Trojan Horse: On the Death of Map-Reduce at Google - https://www.the-paper-trail.org/post/2014-06-25-the-elephant-was-a-trojan-horse-on-the-death-of-map-reduce-at-google/ Distributed systems for fun and for profit - https://book.mixu.net/distsys/ Exactly-once or not, atomic broadcast is still impossible in Kafka - or anywhere - https://www.the-paper-trail.org/post/2017-07-28-exactly-not-atomic-broadcast-still-impossible-kafka/ A brief tour of FLP impossibility - https://www.the-paper-trail.org/post/2008-08-13-a-brief-tour-of-flp-impossibility/ Pub/Sub Best Practices: Features - https://www.youtube.com/watch?v=2-8wgvanQHI Distributed systems for fun and profit - https://book.mixu.net/distsys/index.html Algebraic Effects for the Rest of Us - https://overreacted.io/algebraic-effects-for-the-rest-of-us/ Notes on Distributed Systems for Young Bloods - https://www.somethingsimilar.com/2013/01/14/notes-on-distributed-systems-for-young-bloods/ Tackling Concurrency Bugs with TLA+\u0026quot; by Hillel Wayne - https://www.youtube.com/watch?v=_9B__0S21y8 Writing high-performance clients for TigerBeetle - https://tigerbeetle.com/blog/2023-02-21-writing-high-performance-clients-for-tigerbeetle/ Gossip Glomers - https://fly.io/blog/gossip-glomers/ You Can’t Sacrifice Partition Tolerance - https://codahale.com/you-cant-sacrifice-partition-tolerance/ What is Zig\u0026rsquo;s “Colorblind” Async/Await? - https://kristoff.it/blog/zig-colorblind-async-await/ How To Contribute To Open Source Projects - https://www.youtube.com/watch?v=xl8TQfwRLgo Why does this Rust program leak memory? - https://www.youtube.com/watch?v=YB6LTaGRQJg March Modern Open Source Messaging: Apache Kafka, RabbitMQ and NATS in Action - https://seroter.com/2016/05/16/modern-open-source-messaging-apache-kafka-rabbitmq-and-nats-in-action/ The Why and How of Microservice Messaging in Kubernetes - https://dzone.com/articles/microservice-messaging-in-kubernetes Kafka vs. Pulsar vs. RabbitMQ: Performance, Architecture, and Features Compared - https://www.confluent.io/kafka-vs-pulsar/ How To Build A TCP Server With Actors In Golang - https://www.youtube.com/watch?v=XyUsMV6nCCw Rajesh K. Karmani, Gul Agha: Actors - http://web.cs.ucla.edu/~palsberg/course/cs239/papers/karmani-agha.pdf Dive into MySQL replication protocol - https://medium.com/@siddontang/dive-into-mysql-replication-protocol-cd14791bcc Latency Exists, Cope! - https://web.archive.org/web/20181004043647/http://www.addsimplicity.com/adding_simplicity_an_engi/2007/02/latency_exists_.html Go basically never frees heap memory back to the operating system - https://utcc.utoronto.ca/~cks/space/blog/programming/GoNoMemoryFreeing Using Apache Kafka to process 1 trillion inter-service messages - https://blog.cloudflare.com/using-apache-kafka-to-process-1-trillion-messages/ Impossibility proofs - https://aphyr.com/posts/310-impossibility-proofs Indexing Engine: Index Write Overhead - https://pganalyze.com/docs/indexing-engine/index-write-overhead Exactly-once or not, atomic broadcast is still impossible in Kafka - or anywhere - https://www.the-paper-trail.org/post/2017-07-28-exactly-not-atomic-broadcast-still-impossible-kafka/ Introducing Service Weaver: A Framework for Writing Distributed Applications - https://opensource.googleblog.com/2023/03/introducing-service-weaver-framework-for-writing-distributed-applications.html BEWARE of Consumer Lag! Event Driven Architecture Monitoring - https://www.youtube.com/watch?v=jguxDV1gWk8 Static vs Dynamic dispatch - https://gist.github.com/greister/37289c6eb3629d4fefa7dd0acf6de378 Lists are Monoids - https://ucsd-progsys.github.io/liquidhaskell-blog/2016/10/06/structural-induction.lhs/ What is change data capture? - https://www.cockroachlabs.com/blog/change-data-capture/ When (and why) you should use change data capture - https://www.cockroachlabs.com/blog/why-use-change-data-capture/ Idempotency and ordering in event-driven systems - https://www.cockroachlabs.com/blog/idempotency-and-ordering-in-event-driven-systems/ Using sync.Cond To Fix My Lock Free Queue In Golang. - https://www.youtube.com/watch?v=BO029A-3430 strace feels like magic — let’s fix that (with Rust) - https://www.youtube.com/watch?v=engduNoI6DE HOW DISCORD STORES TRILLIONS OF MESSAGES - https://discord.com/blog/how-discord-stores-trillions-of-messages But What Is Cloud Native Really All About? - https://www.youtube.com/watch?v=p-88GN1WVs8 Testing in Production to Stay Safe and Sensible - https://launchdarkly.com/blog/testing-in-production-for-safety-and-sanity/ 8 Design Patterns EVERY Developer Should Know - https://www.youtube.com/watch?v=tAuRQs_d9F8 What is a Multitenancy Architecture and Why Is it becoming popular? - https://www.youtube.com/watch?v=x8vtmX4vF9I Multi-tenant Architecture for SaaS - https://www.youtube.com/watch?v=e8k6TynqGFs My TOP Patterns for Event Driven Architecture - https://www.youtube.com/watch?v=P5hq6iWn_p8 Consensus Protocols: Two-Phase Commit - https://www.the-paper-trail.org/post/2008-11-27-consensus-protocols-two-phase-commit/ Consensus Protocols: Three-phase Commit - https://www.the-paper-trail.org/post/2008-11-27-consensus-protocols-two-phase-commit/ Load shedding in the Nomad eval broker - https://www.hashicorp.com/blog/load-shedding-in-the-nomad-eval-broker Grafana Labs: Observability Survey 2023 - https://grafana.com/observability-survey-2023/ Kubernetes docs: Owners and Dependents - https://kubernetes.io/docs/concepts/overview/working-with-objects/owners-dependents/ Kubernetes docs: Garbage collection - https://kubernetes.io/docs/concepts/architecture/garbage-collection/#:~:text=Owner%20references%20tell%20the%20control,Kubernetes%20manages%20owner%20references%20automatically AWS builders library: Avoiding overload in distributed systems by putting the smaller service in control - https://aws.amazon.com/builders-library/avoiding-overload-in-distributed-systems-by-putting-the-smaller-service-in-control/ AWS builders library: Leader Election in Distributed Systems - https://aws.amazon.com/builders-library/leader-election-in-distributed-systems/ A brief history of Consensus, 2PC and Transaction Commit. - http://betathoughts.blogspot.com/2007/06/brief-history-of-consensus-2pc-and.html Golang Error Handling Is Better Than You Think! - https://www.youtube.com/watch?v=XCXHzfJZ6CA The Registers of Rust - https://without.boats/blog/the-registers-of-rust/ Why Zig When There is Already C++, D, and Rust? - https://ziglang.org/learn/why_zig_rust_d_cpp/ Greg Young answers your Event Sourcing questions! - https://www.youtube.com/watch?v=LGjRfgsumPk Issue #10 - Queues Don\u0026rsquo;t Fix Overload - https://dtornow225.substack.com/p/issue-10-queues-dont-fix-overload?utm_source=twitter\u0026utm_campaign=auto_share\u0026r=1pyk7m Queues Don\u0026rsquo;t Fix Overload - https://ferd.ca/queues-don-t-fix-overload.html End-to-end principle - https://en.wikipedia.org/wiki/End-to-end_principle Redpanda raison d\u0026rsquo;etre - https://redpanda.com/blog/redpanda-raison-detre Thread-per-core buffer management for a modern Kafka-API storage system - https://redpanda.com/blog/tpc-buffers 1024cores: Producer-Consumer Queues - https://www.1024cores.net/home/lock-free-algorithms/queues Meet Zig: The modern alternative to C - https://www.infoworld.com/article/3689648/meet-the-zig-programming-language.html Zig: In-depth Overview - https://ziglang.org/learn/overview/ 9 YEARS OF OPEN-SOURCE DATABASE DEVELOPMENT: REVIEWING RQLITE DESIGN CHOICES - https://www.philipotoole.com/9-years-of-open-source-database-development-the-design-docs/ REPLICATING SQLITE USING RAFT CONSENSUS - https://www.philipotoole.com/replicating-sqlite-using-raft-consensus/ WHAT I LEARNED FROM PROGRAMMING DATABASES - https://www.philipotoole.com/what-i-learned-from-programming-a-database/ 20 System Design Concepts Explained in 10 Minutes - https://www.youtube.com/watch?v=i53Gi_K3o7I ziglearn.org - https://ziglearn.org/ It’s Time to Move on from Two Phase Commit - http://dbmsmusings.blogspot.com/2019/01/its-time-to-move-on-from-two-phase.html AWS Lambda: Resilience under-the-hood - https://aws.amazon.com/blogs/compute/aws-lambda-resilience-under-the-hood/# Paper Notes: Dynamo – Amazon’s Highly Available Key-value Store - https://distributed-computing-musings.com/2022/05/paper-notes-dynamo-amazons-highly-available-key-value-store/ Sloppy Quorum and Hinted handoff: Quorum in the times of failure - https://distributed-computing-musings.com/2022/05/sloppy-quorum-and-hinted-handoff-quorum-in-the-times-of-failure/ Thundering Herd/Cache Stampede - https://distributed-computing-musings.com/2021/12/thundering-herd-cache-stampede/ Magical handler functions in Rust - https://lunatic.solutions/blog/magic-handler-functions-in-rust/ Patry overview paper: PASTRY - https://www.freepastry.org/PAST/overview.pdf Materialized Views: An alternative to full-blown cache systems - https://distributed-computing-musings.com/2022/11/materialized-views-an-alternative-to-full-blown-cache-systems/ Paper Notes: SWIM(Scalable Weakly-consistent Infection-style Process Group Membership Protocol) - https://distributed-computing-musings.com/2023/01/paper-notes-swimscalable-weakly-consistent-infection-style-process-group-membership-protocol/ LSM Tree: Data structure powering write heavy storage engines - https://distributed-computing-musings.com/2022/07/lsm-tree-data-structure-powering-write-heavy-storage-engines/ Replication: Maintaining a Quorum - https://distributed-computing-musings.com/2022/01/replication-maintaining-a-quorum/ Replication: Introducing leaderless replication - https://distributed-computing-musings.com/2022/01/replication-introducing-leaderless-replication/ Replication: Handling node failure - https://distributed-computing-musings.com/2021/12/replication-handling-node-failure/ How does your computer know what time it is and why will it break your distributed systems? - https://distributed-computing-musings.com/2023/03/how-does-your-computer-know-what-time-it-is-and-why-will-it-break-your-distributed-systems/ Replication: Can we have more than one leader? - https://distributed-computing-musings.com/2022/01/replication-can-we-have-more-than-one-leader/ Replication: Conflict resolution in multi-leader replication - https://distributed-computing-musings.com/2022/01/replication-conflict-resolution-in-multi-leader-replication/ Leslie Lamport: Thinking Above the Code - https://www.youtube.com/watch?v=-4Yp3j_jk8Q Dead letter queue - https://en.wikipedia.org/wiki/Dead_letter_queue Disaster Recovery for Multi-Region Kafka at Uber - https://www.uber.com/en-BR/blog/kafka/ Some possible reasons for 8-bit bytes - https://jvns.ca/blog/2023/03/06/possible-reasons-8-bit-bytes/ Use of Formal Methods at Amazon Web Services - https://lamport.azurewebsites.net/tla/formal-methods-amazon.pdf STOP! This Is How You Structure Golang Applications - https://www.youtube.com/watch?v=eSDYl-RuHjc Exploring TLA+ with two-phase commit - https://brooker.co.za/blog/2013/01/20/two-phase.html What is AWS Identity and Access Management Roles Anywhere? - https://docs.aws.amazon.com/rolesanywhere/latest/userguide/introduction.html Is it better to split Kafka clusters? - https://developers.redhat.com/articles/2022/03/10/which-better-single-kafka-cluster-rule-them-all-or-many# Distributed transaction patterns for microservices compared - https://developers.redhat.com/articles/2021/09/21/distributed-transaction-patterns-microservices-compared# Hashicorp\u0026rsquo;s banking story - https://mitchellh.com/writing/my-startup-banking-story Listen to Yourself: A Design Pattern for Event-Driven Microservices - https://medium.com/@odedia/listen-to-yourself-design-pattern-for-event-driven-microservices-16f97e3ed066 (Un) Reliability in messaging: idempotency and de-duplication - https://lostechies.com/jimmybogard/2013/06/03/un-reliability-in-messaging-idempotency-and-de-duplication/ ACID 2.0 in action - https://lostechies.com/jimmybogard/2013/06/06/acid-2-0-in-action/ ACID 2.0 - https://www.waitingforcode.com/general-big-data/acid-2-0/read Achieving consistency without transaction managers - https://blog.bernd-ruecker.com/achieving-consistency-without-transaction-managers-7cb480bd08c Go runtime vs CFS quota - https://vladimir.varank.in/notes/2023/01/go-runtime-vs-cfs-quota/ Should I take a systems reading course? - https://www.the-paper-trail.org/post/2012-03-09-should-i-take-a-systems-reading-course/ How to do distributed locking - https://martin.kleppmann.com/2016/02/08/how-to-do-distributed-locking.html Change Data Capture + Event Driven Architecture - https://www.youtube.com/watch?v=ARWNnnDGPag Isaac Freund: May 2022 Status Update - https://isaacfreund.com/blog/ Server Name Indication - https://en.wikipedia.org/wiki/Server_Name_Indication SOCKS Protocol Version 5 - https://www.rfc-editor.org/rfc/rfc1928 Three Clocks are Better than One - https://tigerbeetle.com/blog/three-clocks-are-better-than-one/ Missing CLOCK_BOOTTIME_RAW? - https://lkml.org/lkml/2020/5/8/1707 Virtual Synchrony - https://people.cs.rutgers.edu/~pxk/417/notes/virtual_synchrony.html Must move types - https://smallcultfollowing.com/babysteps/blog/2023/03/16/must-move-types/ Nil is not nil - https://yourbasic.org/golang/gotcha-why-nil-error-not-equal-nil/ 11 Essentials For New Software Engineers (From A Principal Engineer) - https://www.youtube.com/watch?v=kmnG5Fy8kEs Why you should avoid Date.now() to measure time durations - https://blog.insiderattack.net/how-not-to-measure-time-in-programming-11089d546180 Exploring the PROXY Protocol - https://seriousben.com/posts/2020-02-exploring-the-proxy-protocol/ What Is SSL Passthrough? How Does SSL Passthrough Work? - https://www.ssl2buy.com/wiki/ssl-passthrough-work NodeJS Architecture - I/O - https://www.youtube.com/watch?v=DaU1-XoANig Shard (database architecture) - https://en.wikipedia.org/wiki/Shard_(database_architecture) Roy\u0026rsquo;s Technology Diary: Shard - A Database Design - http://technoroy.blogspot.com/2008/07/shard-database-design.html Distributed Systems 1.1: Introduction - https://www.youtube.com/watch?v=UEAMfLPZZhE\u0026list=PLeKd45zvjcDFUEv_ohr_HdUFe97RItdiB\u0026index=1 Distributed Systems 1.2: Computer networking - https://www.youtube.com/watch?v=1F3DEq8ML1U\u0026list=PLeKd45zvjcDFUEv_ohr_HdUFe97RItdiB\u0026index=2 Distributed Systems 1.3: RPC (Remote Procedure Call) - https://www.youtube.com/watch?v=S2osKiqQG9s\u0026list=PLeKd45zvjcDFUEv_ohr_HdUFe97RItdiB\u0026index=3 Distributed Systems 2.1: The two generals problem - https://www.youtube.com/watch?v=MDuWnzVnfpI\u0026list=PLeKd45zvjcDFUEv_ohr_HdUFe97RItdiB\u0026index=4 Distributed Systems 2.2: The Byzantine generals problem - https://www.youtube.com/watch?v=LoGx_ldRBU0\u0026list=PLeKd45zvjcDFUEv_ohr_HdUFe97RItdiB\u0026index=5 Outliers: Why Some People Succeed and Some Don\u0026rsquo;t - https://www.youtube.com/watch?v=EcMKLwVlpJk Everything You Need to Know About DNS (Domain Name System) - https://www.youtube.com/watch?v=27r4Bzuj5NQ Consensus Protocols: Three-phase Commit - https://www.the-paper-trail.org/post/2008-11-29-consensus-protocols-three-phase-commit/ Steve Yegge\u0026rsquo;s rant about Google not having a platform - https://web.archive.org/web/20190319154842/https://plus.google.com/112678702228711889851/posts/eVeouesvaVX 276 - OBJETOS VERSUS FUNÇÕES ⚔️⚔️⚔️ | theWiseDev Functional - https://www.youtube.com/watch?v=yz_nNpr_hCc How robust are gossip-based communication protocols? - https://www.cs.cornell.edu/lorenzo/papers/p14-alvisi.pdf All Postgres Locks Explained | A Deep Dive - https://www.youtube.com/watch?v=URwmzTeuHdk The tail at scale - https://abelay.github.io/6828seminar/papers/dean:tailatscale.pdf Exploit Development Part 6 - Writing A ROP Decoder - https://www.youtube.com/watch?v=muhqy8tm2nc Google cloud: External TCP/UDP Network Load Balancing overview - https://cloud.google.com/load-balancing/docs/network Defer blocks and async drop - https://www.ncameron.org/blog/defer-blocks-and-async-drop/ Arroyo: 10x faster sliding windows: how our Rust streaming engine beats Flink - https://www.arroyo.dev/blog/how-arroyo-beats-flink-at-sliding-windows 10+ Scala Concepts you Need to Know - https://www.youtube.com/watch?v=nI57LUpjGrk Understand Cloud Load Balancer Like a Senior Engineer - https://medium.com/google-cloud/understand-cloud-load-balancer-like-a-senior-engineer-d4f55f3111fc How consistent is eventual consistency? - https://www.the-paper-trail.org/post/2012-01-04-how-consistent-is-eventual-consistency/ Getting schooled by AI, colleges must evolve - https://muratbuffalo.blogspot.com/2023/03/getting-schooled-by-ai-colleges-must.html Bowling your way to the top - https://muratbuffalo.blogspot.com/2017/02/bowling-your-way-to-top.html How to go for 10X - How to go for 10X - http://muratbuffalo.blogspot.com/2015/08/how-to-go-for-10x.html The Most Beloved Burger for Developers - https://www.youtube.com/watch?v=7swoLEqABhQ Introducing Grafana Cloud k6 - https://www.youtube.com/watch?v=HyM4lNZjKqk Ensuring rollback safety during deployments - https://aws.amazon.com/builders-library/ensuring-rollback-safety-during-deployments/ In response to a frontend developer asking about database development - https://letters.eatonphil.com/2023-01-01-letter-to-a-frontend-developer-asking-about-database-development.html What\u0026rsquo;s the biggest scam in software development? - https://www.youtube.com/watch?v=QZMAYA19mY4 I built my own memory profiler (in Rust, on Linux) - https://www.youtube.com/watch?v=DpnXaNkM9_M The Birds in Your Code are Dying to Tell You Something - https://www.youtube.com/watch?v=z6gdQt8mjn4 Is there a drop in software engineer job openings, globally? - https://newsletter.pragmaticengineer.com/p/is-there-a-drop-in-software-engineer?utm_source=substack\u0026utm_medium=email The Verification of a Distributed System - https://queue.acm.org/detail.cfm?ref=rss\u0026id=2889274 Hermetic Servers - https://testing.googleblog.com/2012/10/hermetic-servers.html On Ways To Agree, Part 1: DistSys Vocabulary - https://medium.com/databasss/on-ways-to-agree-part-1-links-and-flp-impossibility-f6bd8a6a0980 Safety and Liveness: Eventual Consistency Is Not Safe - http://www.bailis.org/blog/safety-and-liveness-eventual-consistency-is-not-safe/ TCP Flow Control - https://www.brianstorti.com/tcp-flow-control/ Using Rust to Build a 100% ScyllaDB Shard-Aware Application - https://thenewstack.io/using-rust-to-build-a-100-scylladb-shard-aware-application/ Switch Your Databases To Flash Storage. Now. Or You\u0026rsquo;re Doing It Wrong. - http://highscalability.com/blog/2012/12/10/switch-your-databases-to-flash-storage-now-or-youre-doing-it.html Werner Vogels: Eventually Consistent - Revisited - https://www.allthingsdistributed.com/2008/12/eventually_consistent.html Martin Kleppmann, Alastair R. Beresford, and Boerge Sving: Online event processing - https://queue.acm.org/detail.cfm?id=3321612 The Unix process API is unreliable and unsafe - http://catern.com/process.html Time-of-check to time-of-use - https://en.wikipedia.org/wiki/Time-of-check_to_time-of-use Beyond process supervisors - http://catern.com/supervisors.html Introduction To The Actor Paradigm In Golang - https://www.youtube.com/watch?v=EXThuaEzxdc Wait-for graph - https://www.cs.colostate.edu/~cs551/CourseNotes/Deadlock/WFGs.html Wikipedia: Wait-for graph - https://en.wikipedia.org/wiki/Wait-for_graph#:~:text=A%20wait%2Dfor%20graph%20in,systems%20and%20relational%20database%20systems. Pat Helland: Consistently Eventual For many data items, the work never settles on a value. - https://queue.acm.org/detail.cfm?id=3226077 Evolution and Practice: Low-latency Distributed Applications in Finance The finance industry has unique demands for low-latency distributed systems. - https://queue.acm.org/detail.cfm?id=2770868 Matklad: Zig and Rust - https://matklad.github.io/2023/03/26/zig-and-rust.html Rust\u0026rsquo;s Golden Rule - https://steveklabnik.com/writing/rusts-golden-rule Matklad: Call Site Dependency Injection - https://matklad.github.io/2020/12/28/csdi.html Riak: What in the hell is HyperLogLog - https://riak.com/posts/technical/what-in-the-hell-is-hyperloglog/index.html?p=13169.html 10+ Key Memory \u0026amp; Storage Systems - https://www.youtube.com/watch?v=lX4CrbXMsNQ Tigerbeetle: Random fuzzy thoughts - https://tigerbeetle.com/blog/2023-03-28-random-fuzzy-thoughts/ Ericsson: Packet reordering: The key to efficient high-speed packet processing - https://www.ericsson.com/en/blog/2022/8/packet-reordering-effects-on-packet-processing Google cloud tech: What are service accounts? - https://www.youtube.com/watch?v=xXk1YlkKW_k oh $%!\u0026amp;, I didn\u0026rsquo;t want to do that! UNDO UNDO UNDO! - https://www.youtube.com/watch?v=8J9qwtooKoI Torvalds being rude(what a surprise) - https://lkml.org/lkml/2022/9/19/1105#1105.php Rust is a scalable language - https://matklad.github.io/2023/03/28/rust-is-a-scalable-language.html YOSHUA WUYTS: Linear types one-pager - https://blog.yoshuawuyts.com/linear-types-one-pager/ Dominik Tornow: Getting started with small-step operational semantics - https://dominik-tornow.medium.com/getting-started-with-small-step-operational-semantics-9531a35621e0 WebSockets: Scale at Fractional Footprint in Go - https://www.druva.com/blog/websockets--scale-at-fractional-footprint-in-go Life in a Redis Cluster: Meet and Gossip with your neighbors - https://cristian.regolo.cc/2015/09/05/life-in-a-redis-cluster.html SimulatedRides: How Lyft uses load testing to ensure reliable service during peak events - https://eng.lyft.com/simulatedrides-how-lyft-uses-load-testing-to-ensure-reliable-service-during-peak-events-644dcb654454 Dominik Tornow: What is a Saga in Microservices? - https://www.youtube.com/watch?v=0W8BtIwh824 mcyoung: Atomicless concurrency - https://mcyoung.xyz/2023/03/29/rseq-checkout/ Grafana Phlare hash rings - https://grafana.com/docs/phlare/latest/operators-guide/architecture/hash-ring/ Grafana Phlare memberlist and gossip protocol - https://grafana.com/docs/phlare/latest/operators-guide/architecture/memberlist-and-the-gossip-protocol/ Cassandra and its Accrual Failure Detector - https://ljungblad.nu/post/44006928392/cassandra-and-its-accrual-failure-detector Chain replication - http://dsrg.pdos.csail.mit.edu/2013/08/08/chain-replication/ Observational equivalence and unsafe code - https://smallcultfollowing.com/babysteps/blog/2016/10/02/observational-equivalence-and-unsafe-code/ Clocks and Causality - Ordering Events in Distributed Systems - https://www.exhypothesi.com/clocks-and-causality/ Twitter\u0026rsquo;s Recommendation Algorithm - https://blog.twitter.com/engineering/en_us/topics/open-source/2023/twitter-recommendation-algorithm Coroutines in less than 20 lines of standard C - https://fanf.livejournal.com/105413.html Two trie implementations in Rust (one\u0026rsquo;s super fast) - https://dev.to/timclicks/two-trie-implementations-in-rust-ones-super-fast-2f3m A brutally effective hash function in Rust - https://nnethercote.github.io/2021/12/08/a-brutally-effective-hash-function-in-rust.html April An Effective Way To Authorize Handlers In Golang - https://www.youtube.com/watch?v=MmPItr7-MdM SouJava na Campus - Evitando Race Conditions em Aplicações Distribuídas - https://www.youtube.com/watch?v=7DYE0mY0CRE Caitie McCaffrey on \u0026ldquo;Distributed Programming in Argus\u0026rdquo; - https://www.youtube.com/watch?v=-osjxoiP4rg How And When To Use io.MultiWriter In Golang!? - https://www.youtube.com/watch?v=g9tv-M-VCpU Lunatic: Writing Rust the Elixir way - https://lunatic.solutions/blog/writing-rust-the-elixir-way/ Lunatic: Writing Rust the Elixir way - 18 months later - https://lunatic.solutions/blog/writing-rust-the-elixir-way-1.5-years-later/ MERKLE TREES AND THEIR APPLICATION IN GIT - https://ieee.nitk.ac.in/blog/merkle-trees-and-their-application-in-git/ Multicast - https://en.wikipedia.org/wiki/Multicast Cloudflare: Everything you ever wanted to know about UDP sockets but were afraid to ask, part 1 - https://blog.cloudflare.com/everything-you-ever-wanted-to-know-about-udp-sockets-but-were-afraid-to-ask-part-1/ Cache Systems Every Developer Should Know - https://www.youtube.com/watch?v=dGAgxozNWFE Speeding up Queries by Pre-computation \u0026amp; Transformation - https://www.youtube.com/watch?v=hQVisFBAQio Database Pages — A deep dive - https://medium.com/@hnasr/database-pages-a-deep-dive-38cdb2c79eb5 Holey JavaScript Arrays - https://abdulapopoola.com/2020/10/12/holey-javascript-arrays/ JavaScript Arrays Are Objects - https://abdulapopoola.com/2020/09/30/javascript-arrays-are-objects/ Array iteration and holes in JavaScript - https://2ality.com/2013/07/array-iteration-holes.html Windows Internals - Processes and Threads Explained - Windows Internals - Processes and Threads Explained \u0026ldquo;Making Systems Programming Accessible\u0026rdquo; by Andrew Kelley - https://www.youtube.com/watch?v=Qncdi-Fg0-I How do you choose a suitable gossip protocol for your distributed system? - https://www.linkedin.com/advice/0/how-do-you-choose-suitable-gossip-protocol rand( ) isn\u0026rsquo;t doing what you think it does - https://www.youtube.com/watch?v=wDj64pSeQ4I Wikipedia: Gossip protocol - https://en.wikipedia.org/wiki/Gossip_protocol Martin Fowler: Gossip Dissemination - https://martinfowler.com/articles/patterns-of-distributed-systems/gossip-dissemination.html Martin Fowler: Consistent core - https://martinfowler.com/articles/patterns-of-distributed-systems/consistent-core.html Martin Fowler: Generation clock - https://martinfowler.com/articles/patterns-of-distributed-systems/generation.html Phil Wadler: Featherweight Go - https://www.youtube.com/watch?v=Dq0WFigax_c KIP-650: Enhance Kafkaesque Raft semantics - https://cwiki.apache.org/confluence/display/KAFKA/KIP-650%3A+Enhance+Kafkaesque+Raft+semantics#KIP650:EnhanceKafkaesqueRaftsemantics-Non-leaderLinearizableRead Scylla docs: Gossip in Scylla - https://docs.scylladb.com/stable/kb/gossip.html High scalability: Using Gossip Protocols For Failure Detection, Monitoring, Messaging And Other Good Things - http://highscalability.com/blog/2011/11/14/using-gossip-protocols-for-failure-detection-monitoring-mess.html Apple Inc.: Cassandra Internals — Understanding Gossip - https://www.youtube.com/watch?v=FuP1Fvrv6ZQ\u0026list=PLqcm6qE9lgKJkxYZUOIykswDndrOItnn2\u0026index=50 Martin Fowler: High-water mark - https://martinfowler.com/articles/patterns-of-distributed-systems/high-watermark.html Martin Fowler: Write-ahead log - https://martinfowler.com/articles/patterns-of-distributed-systems/wal.html Martin Fowler: Low-water mark - https://martinfowler.com/articles/patterns-of-distributed-systems/low-watermark.html Martin Fowler: Singular update queue - https://martinfowler.com/articles/patterns-of-distributed-systems/singular-update-queue.html Mechanical sympathy: Single writer principle - https://mechanical-sympathy.blogspot.com/2011/09/single-writer-principle.html Martin Fowler: Single socket channel - https://martinfowler.com/articles/patterns-of-distributed-systems/single-socket-channel.html Hands-Free Kafka Replication: A Lesson in Operational Simplicity - https://www.confluent.io/blog/hands-free-kafka-replication-a-lesson-in-operational-simplicity/ Can you truste a compiler to optimize your code? - https://matklad.github.io/2023/04/09/can-you-trust-a-compiler-to-optimize-your-code.html Inline in Rust - https://matklad.github.io/2021/07/09/inline-in-rust.html Loris Cro: Playing the open source game - https://kristoff.it/blog/the-open-source-game/ Online gradient descent written in SQL - https://maxhalford.github.io/blog/ogd-in-sql/ Google cloud storage docs: Consistency - https://cloud.google.com/storage/docs/consistency The end of a myth: Distributed transactions can scale - http://muratbuffalo.blogspot.com/2023/04/the-end-of-myth-distributed.html Silly fast fresh deploys with Rust past 1 - https://www.youtube.com/watch?v=KAKccfVVslk Guidance for cell-based architecture on AWS - https://aws.amazon.com/solutions/guidance/cell-based-architecture-on-aws/ SQL Maxis: Why We Ditched RabbitMQ And Replaced It With A Postgres Queue - https://www.prequel.co/blog/sql-maxis-why-we-ditched-rabbitmq-and-replaced-it-with-a-postgres-queue Strict-serializability, but at what cost, for what purpose? - http://muratbuffalo.blogspot.com/2022/08/strict-serializability-but-at-what-cost.html Scylla paper: Reducing Complexity With a Self-Optimizing Database - https://lp.scylladb.com/self-optimizing-database-offer.html Database internals - https://databass.dev Building a system that Junior Developers can be productive in - https://www.youtube.com/watch?v=S0zC0u5tIx8 Components of recursive functions | Recursion series - https://www.youtube.com/watch?v=44TwrxjfIfo Proxy Protocol: what is it and how to use it with Go - https://inkel.github.io/posts/proxy-protocol/ libuv, but multi-threaded, but not really - http://kprotty.me/2023/04/13/libuv-but-multithreaded-but-not-really.html Amazon builder\u0026rsquo;s library: Avoiding fallback in distributed systems - https://aws.amazon.com/builders-library/avoiding-fallback-in-distributed-systems/?did=ba_card\u0026trk=ba_card Intro to the Zig Programming Language • Andrew Kelley • GOTO 2022 - https://www.youtube.com/watch?v=YXrb-DqsBNU What\u0026rsquo;s a Memory Allocator Anyway? - Benjamin Feng - https://www.youtube.com/watch?v=vHWiDx_l4V0 TigerBeetle: Magical Memory Tour! (Joran Dirk Greef) - https://www.youtube.com/watch?v=FyGukn77gqA BEAM Concurrency in Action • Sasa Juric • YOW! 2022 - https://www.youtube.com/watch?v=A4x6IfceJCM Zig\u0026rsquo;s I/O and Concurrency Story - King Protty - Software You Can Love 2022 - https://www.youtube.com/watch?v=Ul8OO4vQMTw Distributed Systems 2.3: System models - https://www.youtube.com/watch?v=y8f7ZG_UnGI\u0026list=PLeKd45zvjcDFUEv_ohr_HdUFe97RItdiB\u0026index=6 Distributed Systems 2.4: Fault tolerance - https://www.youtube.com/watch?v=43TDfUNsM3E\u0026list=PLeKd45zvjcDFUEv_ohr_HdUFe97RItdiB\u0026index=7 Distributed Systems 3.1: Physical time - https://www.youtube.com/watch?v=FQ_2N3AQu0M\u0026list=PLeKd45zvjcDFUEv_ohr_HdUFe97RItdiB\u0026index=8 Distributed Systems 3.2: Clock synchronisation - https://www.youtube.com/watch?v=mAyW-4LeXZo\u0026list=PLeKd45zvjcDFUEv_ohr_HdUFe97RItdiB\u0026index=9 Distributed Systems 3.3: Causality and happens-before - https://www.youtube.com/watch?v=OKHIdpOAxto\u0026list=PLeKd45zvjcDFUEv_ohr_HdUFe97RItdiB\u0026index=10 Distributed Systems 4.1: Logical time - https://www.youtube.com/watch?v=x-D8iFU1d-o\u0026list=PLeKd45zvjcDFUEv_ohr_HdUFe97RItdiB\u0026index=11 Cross-site request forgery - https://www.synopsys.com/glossary/what-is-csrf.html DOM crimes and feature flags (feat. DevCycle) - https://www.youtube.com/watch?v=-HdTX5AfZ6c Efficiency trades off against resiliency - https://blog.nelhage.com/post/efficiency-vs-resiliency/ GADTs for dummies - https://news.ycombinator.com/item?id=27172843 sled simulation guide (jepsen-proof engineering) - https://sled.rs/simulation.html Silly Fast Fresh Deploys with Rust (Part 2) - https://www.youtube.com/watch?v=umeTH5qZUeQ \u0026ldquo;Testing Distributed Systems w/ Deterministic Simulation\u0026rdquo; by Will Wilson - https://www.youtube.com/watch?v=4fFDFbi3toc The Inner Workings of Distributed Databases - https://questdb.io/blog/inner-workings-distributed-databases/ Reduce the write amplification of write-ahead logging (WAL) - https://scaleflux.com/reduce-write-amplification-write-ahead-logging/ The perils of the “real” client IP - https://adam-p.ca/blog/2022/03/x-forwarded-for/ How to troubleshoot memory leaks in Go with Grafana Pyroscope - https://grafana.com/blog/2023/04/19/how-to-troubleshoot-memory-leaks-in-go-with-grafana-pyroscope/ CORBA vs. the Fallacies of Distributed Computing - https://serviceweaver.dev/blog/corba.html Testing sync at Dropbox - https://dropbox.tech/infrastructure/-testing-our-new-sync-engine Designing futures for Rust - http://aturon.github.io/tech/2016/09/07/futures-design/ Windows Internals - Special Process Types Explained - https://www.youtube.com/watch?v=GhG6Fc__HEE Using your Database as a Queue? Good or bad idea? - https://www.youtube.com/watch?v=DOaDpHh1FsQ Motivation \u0026amp; Making Money As A Software Engineer - https://www.youtube.com/watch?v=3W8hUM12gQc 22 - DuckDB Internals (CMU Advanced Databases / Spring 2023) - https://www.youtube.com/watch?v=bZOvAKGkzpQ Building a low latency game server in golang - https://www.youtube.com/watch?v=WBLpjEDNWqE APM vs Observability - https://www.youtube.com/watch?v=dXohgVATzDc Rust data modelling wih without OOP - https://www.youtube.com/watch?v=z-0-bbc80JM Investing in Systems by Natalie Vais - https://www.youtube.com/watch?v=gG4PTvaVG9E 10 Math Concepts for Programmers - https://www.youtube.com/watch?v=bOCHTHkBoAs How This Miracle Rock Changed the World Forever - https://www.youtube.com/watch?v=VN0p95sNsfo \u0026ldquo;Consistency without consensus in production systems\u0026rdquo; by Peter Bourgon - https://www.youtube.com/watch?v=em9zLzM8O7c What Is a Database? by Jamie Brandon - https://www.youtube.com/watch?v=MqbVoSs0lXk Distributed Database Design Decisions to Support High Performance Event Streaming - https://www.scylladb.com/2022/09/21/distributed-database-design-decisions-to-support-high-performance-event-streaming/?utm_medium=social%20media%20-%20organic\u0026utm_source=twitter\u0026utm_term=bg Getting the Most out of Lightweight Transactions in ScyllaDB - https://www.scylladb.com/2020/07/15/getting-the-most-out-of-lightweight-transactions-in-scylla/ Scylladb: Lightweight transactions at lightning speed - https://www.youtube.com/watch?v=Jk1CsRZ7QJc Wikipedia: ACID - https://en.wikipedia.org/wiki/ACID Two-phase locking - https://en.wikipedia.org/wiki/Two-phase_locking Serious Ben: Exploring the PROXY protocol - https://seriousben.com/posts/2020-02-exploring-the-proxy-protocol/#proxy-protocol-version-2 Malware Development: Processes, Threads, and Handles - https://www.youtube.com/watch?v=aNEqC-U5tHM A proposal for more reliable locks using Redis - http://antirez.com/news/77 Aphyr: the trouble with timestamps - https://aphyr.com/posts/299-the-trouble-with-timestamps Martin Kleppmann: How to do distributed locking - https://martin.kleppmann.com/2016/02/08/how-to-do-distributed-locking.html Everything you need to know about unsafe.Pointer in Golang - https://www.youtube.com/watch?v=3HgqRW09w4s Osa1: My thoughts on OCaml - https://osa1.net/posts/2023-04-24-ocaml-thoughts.html Werner Vogels: Eventually consistent - https://queue.acm.org/detail.cfm?id=1466448 Samwho: Load balancing - https://samwho.dev/load-balancing/ Scylladb docs: Counters - https://docs.scylladb.com/stable/using-scylla/counters.html Werner Vogels: Eventually consistent - https://queue.acm.org/detail.cfm?id=1466448 A gradual type system for Elixir - https://www.irif.fr/_media/users/gduboc/elixir-types.pdf Raft or not? The Best Solution to Data Consistency in Cloud-native Databases - https://milvus.io/blog/raft-or-not.md Amazon Aurora under the hood: quorums and correlated failure - https://aws.amazon.com/blogs/database/amazon-aurora-under-the-hood-quorum-and-correlated-failure/ ScyllaDB 1.7 introduces experimental support for counters - https://www.scylladb.com/2017/04/04/counters/ Dijkstra: On the cruelty of really teaching computing science - https://www.cs.utexas.edu/users/EWD/transcriptions/EWD10xx/EWD1036.html TigerStyle! (Or How To Design Safer Systems in Less Time) by Joran Dirk Greef - https://www.youtube.com/watch?v=w3WYdYyjek4 AWS re:Invent 2022 - Journey to cell-based microservices architecture on AWS for hyperscale (ARC312) - https://www.youtube.com/watch?v=ReRrhU-yRjg Ottertune: The Part of PostgreSQL We Hate the Most - https://ottertune.com/blog/the-part-of-postgresql-we-hate-the-most/ (zig) Testing and Files as Structs - https://zig.news/aryaelfren/testing-and-files-as-structs-n94 Martin Kleppmann: Distributed Systems 7.2: Linearizability - https://www.youtube.com/watch?v=noUNH3jDLC0 Martin Kleppmann: Distributed Systems 4.2: Broadcast ordering - https://www.youtube.com/watch?v=A8oamrHf_cQ\u0026list=PLeKd45zvjcDFUEv_ohr_HdUFe97RItdiB\u0026index=27 Martin Kleppman: Distributed Systems 4.3: Broadcast algorithms - https://www.youtube.com/watch?v=77qpCahU3fo\u0026list=PLeKd45zvjcDFUEv_ohr_HdUFe97RItdiB\u0026index=13 What, exactly, is Object-oriented Programming? - https://dev.to/ga_ts/what-exactly-is-object-oriented-programming-5a7a Static vs Dynamic dispatch - https://gist.github.com/greister/37289c6eb3629d4fefa7dd0acf6de378 Modern C++ Won\u0026rsquo;t Save Us - https://alexgaynor.net/2019/apr/21/modern-c++-wont-save-us/ Martin Kleppmann: Please stop calling databases CP or AP - https://martin.kleppmann.com/2015/05/11/please-stop-calling-databases-cp-or-ap.html Conflict-free Replicated Data Types: An Overview - https://arxiv.org/pdf/1806.10254.pdf Strings \u0026amp; Palindromes | Recursion Series - https://www.youtube.com/watch?v=n1AUAP7FdXI Russ Cox: Go Data Structures: Interfaces - https://research.swtch.com/interfaces The Power Of Golang\u0026rsquo;s Decorator Pattern - https://www.youtube.com/watch?v=GipAZwKFgoA May Open Versus Closed: A Cautionary Tale - https://muratbuffalo.blogspot.com/2023/05/open-versus-closed-cautionary-tale.html Chapter 9 - Consistency and Consensus (Part Two) - https://timilearning.com/posts/ddia/part-two/chapter-9-2/ Coda Hale: You Can’t Sacrifice Partition Tolerance - https://codahale.com/you-cant-sacrifice-partition-tolerance/ Mongodb: What about Durability? - https://www.mongodb.com/blog/post/what-about-durability Jeff Hodges: Notes on Distributed Systems for Young Bloods - https://www.somethingsimilar.com/2013/01/14/notes-on-distributed-systems-for-young-bloods/ Arnon Rotem-Gal-Oz: Fallacies of Distributed Computing Explained - https://arnon.me/wp-content/uploads/Files/fallacies.pdf Keynote: Silence is Golden: Coordination-Avoiding Systems Design - https://www.youtube.com/watch?v=EYJnWttrC9k CHOOSE BORING TECHNOLOGY CULTURE - https://charity.wtf/2023/05/01/choose-boring-technology-culture/ A Deep Dive in How Slow SELECT * is - https://www.youtube.com/watch?v=wybjsKtA9hI Fly.io: Reliability: It’s Not Great - https://community.fly.io/t/reliability-its-not-great/11253 Quickwit: Efficient indexing with Quickwit Rust actor framework - https://quickwit.io/blog/quickwit-actor-framework Using Rustlang\u0026rsquo;s Async Tokio Runtime for CPU-Bound Tasks - https://www.influxdata.com/blog/using-rustlangs-async-tokio-runtime-for-cpu-bound-tasks/ Cut Your S3 Spending With Amazon S3 Storage Lens - https://www.youtube.com/watch?v=mJuOtZs3orM Rust Kernel Programming - https://coderjoshdk.github.io/posts/Rust-Kernel-Programming.html What makes an Aggregate (DDD)? Hint: it\u0026rsquo;s NOT hierarchy \u0026amp; relationships - https://www.youtube.com/watch?v=djq0293b2bA L9: Paxos Simplified - https://www.youtube.com/watch?v=SRsK-ZXTeZ0 Distributed Systems 5.1: Replication - https://www.youtube.com/watch?v=mBUCF1WGI_I\u0026list=PLeKd45zvjcDFUEv_ohr_HdUFe97RItdiB\u0026index=20 Stabilizing async fn in traits in 2023 - https://blog.rust-lang.org/inside-rust/2023/05/03/stabilizing-async-fn-in-trait.html The Most Efficient Struct Configuration Pattern For Golang - https://www.youtube.com/watch?v=MDy7JQN5MN4 The pendulum swings! Microservices to Monoliths - https://www.youtube.com/watch?v=BFcxgcoO5Ns Bootstrapping Uber’s Infrastructure on arm64 with Zig - https://www.uber.com/en-US/blog/bootstrapping-ubers-infrastructure-on-arm64-with-zig/ Main problems of the multithreaded servers with blocking I/O - https://habr.com/en/articles/676656/ What is gVisor? - https://gvisor.dev/docs/ Monoliths are not dinosaurs - https://www.allthingsdistributed.com/2023/05/monoliths-are-not-dinosaurs.html Do you understand how \u0026ldquo;return\u0026rdquo; ACTUALLY works? (are you SURE?) - https://www.youtube.com/watch?v=e46wHUjNDjE Why Apache Kafka Doesn\u0026rsquo;t Need Fsync To Be Safe - https://jack-vanlightly.com/blog/2023/4/24/why-apache-kafka-doesnt-need-fsync-to-be-safe Write For Others But Mostly For Yourself - https://jack-vanlightly.com/blog/2022/1/25/write-for-others-but-mostly-for-yourself Distributed Consensus Reloaded: Apache ZooKeeper and Replication in Apache Kafka - https://www.confluent.io/blog/distributed-consensus-reloaded-apache-zookeeper-and-replication-in-kafka/ Why engineers need to be bored. - https://onengineering.substack.com/p/why-engineers-need-to-be-bored?r=1uysoh\u0026utm_campaign=post\u0026utm_medium=web Dude, where’s my metadata? - https://fpj.systems/2015/05/28/dude-wheres-my-metadata/ Hands-Free Kafka Replication: A Lesson in Operational Simplicity - https://www.confluent.io/blog/hands-free-kafka-replication-a-lesson-in-operational-simplicity/ Fear makes you a worse programmer - https://jvns.ca/blog/2014/12/21/fear-makes-you-a-worse-programmer/ More Turing-completeness in surprising places - kristerw.blogspot.com/2016/01/more-turing-completeness-in-surprising.html Arenas, strings and Scuffed Templates in C - https://www.youtube.com/watch?v=3IAlJSIjvH0 ECC memory - https://en.wikipedia.org/wiki/ECC_memory VOPR\u0026rsquo;izing TigerBeetle - https://www.youtube.com/watch?v=0esGaX5XekM Linearizability versus Serializability - www.bailis.org/blog/linearizability-versus-serializability/ Raft does not Guarantee Liveness in the face of Network Faults - https://decentralizedthoughts.github.io/2020-12-12-raft-liveness-full-omission/ When is \u0026ldquo;ACID\u0026rdquo; ACID? Rarely. - www.bailis.org/blog/when-is-acid-acid-rarely/ On hiring, rehiring, and one question to answer them all - https://world.hey.com/jason/on-hiring-rehiring-and-one-question-to-answer-them-all-5db97bcb Top 7 Most-Used Distributed System Patterns - https://www.youtube.com/watch?v=nH4qjmP2KEE Mastering Dependency Injection In Golang - https://www.youtube.com/watch?v=UX4XjxWcDB4 Difference between Kafka and Redpanda - Thread per Core Architecture - https://www.youtube.com/watch?v=fluRjLXDf-E The Go 1.19 Atomic Wrappers and why to use them - https://medium.com/@deckarep/the-go-1-19-atomic-wrappers-and-why-to-use-them-ae14c1177ad8 [EN]Real World Applications with the Ruby Fiber Scheduler / Samuel Williams @ioquatix - https://www.youtube.com/watch?v=yXyj9wlkJKM Is Sequential IO Dead In The Era Of The NVMe Drive? - https://jack-vanlightly.com/blog/2023/5/9/is-sequential-io-dead-in-the-era-of-the-nvme-drive The power of the adversary - https://decentralizedthoughts.github.io/2019-06-07-modeling-the-adversary/ Interledger Community Call - 25 November 2020 - https://www.youtube.com/watch?v=J1OaBRTV2vs The string type is broken - https://mortoray.com/the-string-type-is-broken/ Open and Closed, Omission and Collapse - https://brooker.co.za/blog/2023/05/10/open-closed.html Fixing retries with token buckets and circuit breakers - https://brooker.co.za/blog/2022/02/28/retries.html Webinar — Under the Hood of a Shard-per-Core Architecture - https://www.youtube.com/watch?v=Fo1dPRqbF-Q Microsoft Azure security evolution: Embrace secure multitenancy, Confidential Compute, and Rust - https://azure.microsoft.com/en-us/blog/microsoft-azure-security-evolution-embrace-secure-multitenancy-confidential-compute-and-rust/ Julia Evans: Introducing \u0026ldquo;Implement DNS in a Weekend\u0026rdquo; - https://jvns.ca/blog/2023/05/12/introducing-implement-dns-in-a-weekend/ Implementing DNS in a Weeknd - https://implement-dns.wizardzines.com/book/part_1.html Sitting on the bench - https://world.hey.com/dhh/sitting-on-the-bench-ba937b84 Secret To Optimizing SQL Queries - Understand The SQL Execution Order - https://www.youtube.com/watch?v=BHwzDmr6d7s Maker\u0026rsquo;s schedule, manager\u0026rsquo;s schedule - www.paulgraham.com/makersschedule.html Announcing unsend - https://notgull.github.io/unsend/ Taking advantage of state machine concepts to organize code - https://balliegojr.github.io/state-machine/ Database Sharding Explained - https://architecturenotes.co/database-sharding-explained/ The threshold adversary - https://decentralizedthoughts.github.io/2019-06-17-the-threshold-adversary/ MySQL Limitations Part 4: One Thread per Connection - https://www.percona.com/blog/mysql-limitations-part-4-one-thread-per-connection/ \u0026ldquo;Simulation Testing\u0026rdquo; by Michael Nygard - https://www.youtube.com/watch?v=N5HyVUPuU0E Kora: The Cloud Native Engine for Apache Kafka - https://www.confluent.io/blog/cloud-native-data-streaming-kafka-engine/ Kafka vs Redpanda Performance - Do the claims add up? - https://jack-vanlightly.com/blog/2023/5/15/kafka-vs-redpanda-performance-do-the-claims-add-up Have you replaced your DB because of the Repository Pattern? - https://www.youtube.com/watch?v=EwKhyp2kHME Focusing Your Unconscious Mind: Learn Hard Concepts Intuitively (And Forever) - https://www.youtube.com/watch?v=Dm68uFy6gus Retries and Saga pattern in Workflows - https://www.youtube.com/watch?v=yqMKr37mGJw Golang Performance Hack That Reduces GC Overhead - https://www.youtube.com/watch?v=aThn7jvYvGI Getting started with tracing and Grafana Tempo - https://grafana.com/go/webinar/getting-started-with-tracing-and-grafana-tempo-amer/?pg=docs-tempo-latest-getting-started-example-demo-app\u0026plcmt=related How I became a software architect\u0026hellip; (or not) - https://www.youtube.com/watch?v=6j-PyJ1tFn8 PHP: a fractal of bad design - https://eev.ee/blog/2012/04/09/php-a-fractal-of-bad-design/ Efficiency trades off against resiliency - https://blog.nelhage.com/post/efficiency-vs-resiliency/ A governance system, if you can keep it - https://without.boats/blog/if-you-can-keep-it/ How Much Memory Do You Need to Run 1 Million Concurrent Tasks? - https://pkolaczk.github.io/memory-consumption-of-async/ Local Async Executors and Why They Should be the Default - https://maciej.codes/2022-06-09-local-async.html Oxidizing OCaml: Locality - https://blog.janestreet.com/oxidizing-ocaml-locality/ Stream Processing with Kafka - https://hackingwithrust.substack.com/p/stream-processing-with-kafka The Power Of Golang\u0026rsquo;s TeeReader Solved My Problem - https://www.youtube.com/watch?v=fGmOKJxlGxY Internals of Maps in Golang - https://www.youtube.com/watch?v=ACQs6mdylxo Inspecting the map header in Golang - https://www.youtube.com/watch?v=fe_omYMdnKY Why Databases Write Ahead - https://aneesh.mataroa.blog/blog/why-databases-write-ahead/ Tokio, FuturesUnordered, and the Thundering Herd Problem - https://blog.polybdenum.com/2023/05/15/tokio-futuresunordered-and-the-thundering-herd-problem.html Eventually Consistent - Revisited - https://www.allthingsdistributed.com/2008/12/eventually_consistent.html Top 6 Most Popular API Architecture Styles - https://www.youtube.com/watch?v=4vLxWqE94l4 How Dropbox Saved Millions By Migrating From On-Prem to AWS - https://www.youtube.com/watch?v=KrkuTQjpvgs June Tunnel SSH Directly To HTTP With GoLang!? - https://www.youtube.com/watch?v=RK5xh7xH1Jw HELP! My system is hard to change - https://www.youtube.com/watch?v=jyX7nt1wQwg How does HTTP/2 solve the Head of Line blocking (HOL) issue - https://community.akamai.com/customers/s/article/How-does-HTTP-2-solve-the-Head-of-Line-blocking-HOL-issue?language=en_US RubyConfTH 2022 - Keynote: A Beginner\u0026rsquo;s Guide to Puma Internals by Nate Berkopec - https://www.youtube.com/watch?v=w4X_oBuPmTM QCon London \u0026lsquo;23 — A New Era for Database Design with TigerBeetle - https://www.youtube.com/watch?v=_jfOk4L7CiY What do others do without tests? - https://registerspill.thorstenball.com/p/what-do-others-do-without-tests going fast is about doing less - https://www.youtube.com/watch?v=5rb0vvJ7NCY How I Structured My Side Project In Go - Sendit.sh - https://www.youtube.com/watch?v=a6Q5KseZ47s From Stacks to Trees: A new aliasing model for Rust - https://www.ralfj.de/blog/2023/06/02/tree-borrows.html A locking war story - https://sentry.engineering/blog/locking-war-story On Raft, briefly - https://www.the-paper-trail.org/post/2013-10-31-on-raft-briefly/ Writing an interpreter\u0026hellip; in OCaml?!? - https://www.youtube.com/watch?v=NjKJ9-ejR6o how NASA writes space-proof code - https://www.youtube.com/watch?v=GWYhtksrmhE SAVE Your Database With REDIS!!! Write Through Cache Explained! - https://www.youtube.com/watch?v=rNU3afjpTWc Writing a SQL database, take two: Zig and RocksDB - https://notes.eatonphil.com/zigrocks-sql.html Single Abstract Method Traits - https://mcyoung.xyz/2023/05/11/sam-closures/ The Rust I Wanted Had No Future - https://graydon2.dreamwidth.org/307291.html Top 5 Most-Used Deployment Strategies - https://www.youtube.com/watch?v=AWVTKBUnoIg Big Data Processing Using Distributed Maps and AWS Step Functions (S3 + Lambda) - https://www.youtube.com/watch?v=0Zs5s5F_lFc Effortless JSON in C++ with folly::dynamic - https://www.youtube.com/watch?v=3XubaLCDYOM SQL vs. NoSQL Explained (in 4 Minutes) - https://www.youtube.com/watch?v=_Ss42Vb1SU4 How to seed a new Microservice with data? - https://www.youtube.com/watch?v=RcVf-R7RZcY Mark Zuckerberg: Future of AI at Meta, Facebook, Instagram, and WhatsApp | Lex Fridman Podcast - https://www.youtube.com/watch?v=Ff4fRgnuFgQ The Extravagant Business of Cruises - https://www.youtube.com/watch?v=QqQtV7wHSV0 how Google writes future-proof C++ - https://www.youtube.com/watch?v=6lU11IHfJgo Top 5 Cost Optimization Tips Every AWS User Should Know - https://www.youtube.com/watch?v=T-viaT391aQ How to Reverse Engineer Go Binaries - GoLang Malware Analysis - https://www.youtube.com/watch?v=cBdY5Y16OR4 \u0026ldquo;Clean Architecture\u0026rdquo; and indirection. No thanks. - https://www.youtube.com/watch?v=_rgH0Kb9Bis Amazon GuardDuty Deep Dive - https://www.youtube.com/watch?v=M4aOKikd7-s Use Arc Instead of Vec - https://www.youtube.com/watch?v=A4cKi7PTJSs GopherCon 2019: Chris Hines - Death by 3,000 Timers: Streaming Video-on-Demand for Cable TV - https://www.youtube.com/watch?v=h0s8CWpIKdg everyone can learn assembly QUICKLY (arm64 breakdown) - https://www.youtube.com/watch?v=vhyettT7sdA Big O myths busted! (Time complexity is complicated) - https://www.youtube.com/watch?v=7VHG6Y2QmtM From Linear Types to Rust - https://www.youtube.com/watch?v=BWuozpQ_Of8 Why Databases Write Ahead - https://aneesh.mataroa.blog/blog/why-databases-write-ahead/ Everything You Always Wanted To Know About fsync() - https://blog.httrack.com/blog/2013/11/15/everything-you-always-wanted-to-know-about-fsync/ \u0026ldquo;Transactions: myths, surprises and opportunities\u0026rdquo; by Martin Kleppmann - https://www.youtube.com/watch?v=5ZjhNTM8XU8 Lambda + SQS Users Should Know About This - https://www.youtube.com/watch?v=0707Py8Jyf0 Simple Functional Effects with Tag Unions • Richard Feldman • YOW! 2022 - https://www.youtube.com/watch?v=7SidSvJcPd0 RabbitMQ Is Boring, and I Love It - https://thenewstack.io/rabbitmq-is-boring-and-i-love-it/ Fault Handling with retry and circuit breaker design patterns by Devlin Duldulao - https://www.youtube.com/watch?v=Uxncuk-vocI 🛠️ Windows Virtual Memory Explained 📚 Windows Internals 💻 - https://www.youtube.com/watch?v=CdQ2EYKfB8g Distributed isn\u0026rsquo;t Microservices, In-Process isn\u0026rsquo;t a Monolith - https://www.youtube.com/watch?v=qndSXhknxRc Anti-corruption Layer for mapping between Boundaries - https://www.youtube.com/watch?v=Dok2Ikcjaro Differences between Apache Kafka and Redpanda - Avoid garbage collection - https://www.youtube.com/watch?v=UQ8yrbcTBsY everyone can become BIG BRAIN assembly programmers in only 10 minutes. (yes, YOU!) - https://www.youtube.com/watch?v=6S5KRJv-7RU LMAX - How to Do 100K TPS at Less than 1ms Latency - https://www.infoq.com/presentations/LMAX/ Apache Kafka in 6 minutes - https://www.youtube.com/watch?v=-SxtMWxBW1Q Is the COST of JavaScript’s GC REALLY that high? - https://www.youtube.com/watch?v=easvMCCBFkQ Metaprogramming in Zig and parsing CSS - https://notes.eatonphil.com/2023-06-19-metaprogramming-in-zig-and-parsing-css.html Peta-Byte Scale Web Crawler - https://ocaml.org/success-stories/peta-byte-scale-web-crawler 10 Tips for Building Resilient Payment Systems - https://shopify.engineering/building-resilient-payment-systems Understanding Mergesort: Sorting Made Simple | Recursion Series - https://www.youtube.com/watch?v=-3u1C1URNZY Browserless app runtime in Rust - Demo app in Zig - Wasm/WebGPU - https://www.youtube.com/watch?v=VhCgep06-I8 PostgreSQL reconsiders its process-based model - https://lwn.net/SubscriberLink/934940/3abb2d4086680b78/ How This One Question Breaks Computers - https://www.youtube.com/watch?v=sG0obNcgNJM Code Review \u0026amp; Refactoring to a better design - https://www.youtube.com/watch?v=ka0Ag98_o_g Fibers, Oh My! # - https://graphitemaster.github.io/fibers/ WAL: Everything you want to know - https://www.youtube.com/watch?v=feTihjJJs3g How to connect a private data source - https://www.youtube.com/watch?v=9pnf2U3KhG4 What is Redpanda BYOC? - https://www.youtube.com/watch?v=gVlzsJAYT64 How To Speak Rust - https://www.youtube.com/watch?v=bu_gulee89Q \u0026ldquo;Functional distributed systems beyond request/response\u0026rdquo; by Melinda Lu - https://www.youtube.com/watch?v=VWrpnT8rwVY Making variables atomic in C - https://www.youtube.com/watch?v=_xX25ThomIo NixOS in 60 seconds - https://www.youtube.com/watch?v=Ukglm5KJFa8 How to Map Files into Memory in C (mmap, memory mapped file io) - https://www.youtube.com/watch?v=m7E9piHcfr4 The Call Stack and Stack Overflows (example in C) - https://www.youtube.com/watch?v=jVzSBkbfdiw Database Auto increment vs UUID - Which is Right for You? - https://www.youtube.com/watch?v=5Xog8d_2um4 Universal Compaction in RocksDB and me - smalldatum.blogspot.com/2023/06/universal-compaction-in-rocksdb-and-me.html Building an MQTT Broker from Scratch with Rust and Lunatic: Part 1 - https://medium.com/@yuriy.voshch/building-an-mqtt-broker-from-scratch-with-rust-and-lunatic-part-1-bff5a2a58f61 Building an MQTT Broker from Scratch with Rust and Lunatic: Part 2 - https://medium.com/@yuriy.voshch/building-an-mqtt-broker-from-scratch-with-rust-and-lunatic-part-2-8403f8cace09 My Tips On Hyper-Productivity As A Software Engineer - https://www.youtube.com/watch?v=cY1irhk57w4 Topics, Partitions and Offsets: Apache Kafka - https://www.youtube.com/watch?v=UHjSP7nxk7g Struct packing: No, you\u0026rsquo;re not going crazy. - https://www.youtube.com/watch?v=grk4QUDveFw Why fsync(): Losing unsynced data on a single node leads to global data loss - https://redpanda.com/blog/why-fsync-is-needed-for-data-safety-in-kafka-or-non-byzantine-protocols?utm_source=twitter\u0026utm_medium=social\u0026utm_campaign=may16_social\u0026utm_assettype=blog\u0026utm_assetname=fsync Wasm + Kubernetes: Beyond Containers - Sean Isom, Adobe \u0026amp; Colin Murphy, Adobe - https://www.youtube.com/watch?v=1_iCimJrLzM Understanding Raft - https://arorashu.github.io/posts/raft.html Rust fact vs. fiction: 5 Insights from Google\u0026rsquo;s Rust journey in 2022 - https://opensource.googleblog.com/2023/06/rust-fact-vs-fiction-5-insights-from-googles-rust-journey-2022.html Your Variables are Not Real. - https://www.youtube.com/watch?v=YO6K5K1TUj4 \u0026ldquo;How to Have your Causality and Wall Clocks, Too\u0026rdquo; by Jon Moore - https://www.youtube.com/watch?v=YqNGbvFHoKM Keep Your Network Traffic in AWS with VPC Endpoints | Overview and Tutorial - https://www.youtube.com/watch?v=jo3X_aay4Vs Work distribution with Jump Consistent Hashing - https://zacksiri.dev/posts/work-distribution-with-jump-consistent-hashing How Rust transforms into Machine Code. - https://www.reddit.com/r/rust/comments/13zdmvc/how_rust_transforms_into_machine_code/ vDSO - https://en.wikipedia.org/wiki/VDSO On the Costs of Syscalls - https://gms.tf/on-the-costs-of-syscalls.html Introducing MIR - https://blog.rust-lang.org/2016/04/19/MIR.html Single() or First()? Understand the abstractions you use! - https://www.youtube.com/watch?v=bxZ8-Qt3eKk Learn How To Write YARA Rules for Malware Detection - https://www.youtube.com/watch?v=zzpz3VYKzUw A new era for cluster coordination in Elasticsearch - https://www.elastic.co/blog/a-new-era-for-cluster-coordination-in-elasticsearch Sequence IDs: Coming Soon to an Elasticsearch Cluster Near You - https://www.elastic.co/blog/elasticsearch-sequence-ids-6-0 Repeatable Read vs Snapshot Isolation - https://jaymcor.github.io/notes/isolation_rr_si.html WebTransport is a Game Changer Protocol - https://www.youtube.com/watch?v=SEF8VBYlLik What if my command was rejected? - https://milestone.topics.it/2023/06/27/reject-commands.html Kubernetes NodePort vs LoadBalancer vs Ingress - https://www.youtube.com/watch?v=RQbc_Yjb9ls OAuth 2 Explained In Simple Terms - https://www.youtube.com/watch?v=ZV5yTm4pT8g Golang Fiber Auth Middleware Setup For My New Side Hustle - https://www.youtube.com/watch?v=b3t8848Tqvg Choose the Right Option - https://www.youtube.com/watch?v=6c7pZYP_iIE I caught an exception. Now what? - https://particular.net/blog/but-all-my-errors-are-severe Tales of a reservation - https://milestone.topics.it/2021/05/05/tales-of-a-reservation.html What is the deal with security and distributed systems? - https://milestone.topics.it/2022/11/01/security-and-soa.html Demystifying the role of a founding engineer - https://basecase.vc/blog/founding-engineer 9 fintech engineering mistakes - https://startupwin.kelsus.com/p/9-fintech-engineering-mistakes An Elegant DB Schema for Double-Entry Accounting - https://blog.journalize.io/posts/an-elegant-db-schema-for-double-entry-accounting/ July The right way to define a C function with no arguments - https://www.youtube.com/watch?v=VsRs0H4hXEE TREE-STRUCTURED CONCURRENCY — 2023-07-01 - https://blog.yoshuawuyts.com/tree-structured-concurrency/ Myths Programmers Believe about CPU Caches - https://software.rajivprab.com/2018/04/29/myths-programmers-believe-about-cpu-caches/ Eventual vs Strong Consistency in Distributed Databases - https://hackernoon.com/eventual-vs-strong-consistency-in-distributed-databases-282fdad37cf7 Accounting For Developers, Part I - https://www.moderntreasury.com/journal/accounting-for-developers-part-i Accounting For Developers, Part II - https://www.moderntreasury.com/journal/accounting-for-developers-part-ii Accounting for Developers Part III: Building a Lending Marketplace - https://www.moderntreasury.com/journal/accounting-for-developers-part-iii What is a Wire Transfer? - https://www.moderntreasury.com/learn/what-is-a-wire-transfer What is RTP? - https://www.moderntreasury.com/learn/what-is-rtp vTables for Game Hacking \u0026amp; VMT Hooking - https://www.youtube.com/watch?v=HfrBdf-hM28 API vs. Messaging — How to Choose Which One to Use? - https://betterprogramming.pub/api-vs-messaging-how-to-choose-which-one-to-use-d6634599d2bd Kubernetes Basics: Pods, Nodes, Containers, Deployments \u0026amp; Clusters - https://www.youtube.com/watch?v=6IPu3WU_M0o Are You Sure You Want to Use MMAP in Your Database Management System? - https://db.cs.cmu.edu/papers/2022/cidr2022-p13-crotty.pdf Content-based filtering \u0026amp; collaborative filtering (Building recommendation systems with TensorFlow) - https://www.youtube.com/watch?v=v90un9ALRzw What are Business Rules? It\u0026rsquo;s not this. - https://www.youtube.com/watch?v=FbYcIqVmGRk Demystifying the Unusual Evolution of the Netflix API Architecture - https://www.youtube.com/watch?v=Uu32ggF-DWg A Gentle Introduction to Linear Algebra - https://machinelearningmastery.com/gentle-introduction-linear-algebra/ Introduction to Amazon Personalize - https://www.youtube.com/watch?v=3gJmhoLaLIo Understanding your Data with Amazon Personalize - https://www.youtube.com/watch?v=TEioktJD1GE Solving Real World Use Cases with Amazon Personalize - https://www.youtube.com/watch?v=9N7s_dVVWBE how do computers create code? - https://www.youtube.com/watch?v=2y1IgW2T8bo What if writing tests was a joyful experience - https://blog.janestreet.com/the-joy-of-expect-tests/ Quickcheck for Core - https://blog.janestreet.com/quickcheck-for-core/ Basics of Mathematical Notation for Machine Learning - https://machinelearningmastery.com/basics-mathematical-notation-machine-learning/ A Real Use Case of Goroutines With Package Context In Golang - https://www.youtube.com/watch?v=5QyxqhLnKmM Engineering Intensity - https://ruiper.es/posts/engineering_intensity/ Implementing a Transactional Outbox Pattern with DynamoDB Streams to Avoid 2-phase Commits - https://medium.com/ssense-tech/implementing-a-transactional-outbox-pattern-with-dynamodb-streams-to-avoid-2-phase-commits-ed0f91e69e9 StatQuest: K-nearest neighbors, Clearly Explained - https://www.youtube.com/watch?v=HVXime0nQeI BRIDGING FUZZING AND PROPERTY TESTING — 2023-07-10 - https://blog.yoshuawuyts.com/bridging-fuzzing-and-property-testing/ 289 - CONFIABILIDADE \u0026amp; ESCALABILIDADE em aplicações com uso intensivo de DADOS | theWiseDev NFR - https://www.youtube.com/watch?v=EXwJwwOJ1UY Why ScyllaDB is Moving to a New Replication Algorithm: Tablets - https://www.scylladb.com/2023/07/10/why-scylladb-is-moving-to-a-new-replication-algorithm-tablets/ A problem so hard even Google relies on Random Chance - https://www.youtube.com/watch?v=lJYufx0bfpw Are You Sure You Want to Use MMAP in Your Database Management System? - https://www.youtube.com/watch?v=1BRGU_AS25c Digital Wallet - https://www.moderntreasury.com/learn/digital-wallet What is ACH? - https://www.moderntreasury.com/learn/what-is-ach How simple can a programming language be? - https://www.youtube.com/watch?v=Fg5En6pbsDA Kubernetes Deployment vs. StatefulSet vs. DaemonSet - https://www.youtube.com/watch?v=30KAInyvY_o How to Optimize Caching for Transactions - https://audreyccheng.com/blog/transaction-caching/ How to use mongoDB change streams as a powerful event-driven engine - https://dev.to/woovi/how-to-use-mongodb-change-streams-as-a-powerful-event-driven-engine-4d9c Making WebAssembly even faster: Firefox’s new streaming and tiering compiler - https://hacks.mozilla.org/2018/01/making-webassembly-even-faster-firefoxs-new-streaming-and-tiering-compiler/ Life of a Packet [I] - Michael Rubin, Google - https://www.youtube.com/watch?v=0Omvgd7Hg1I Data Lakehouse Architecture \u0026amp; Use-Cases - https://www.youtube.com/watch?v=hB6olelYhr0 Making FinTech systems safe, reliable, and scalable with Redpanda - https://redpanda.com/blog/data-streaming-for-financial-services Announcing Rust 1.71.0 - https://blog.rust-lang.org/2023/07/13/Rust-1.71.0.html Focusing on \u0026ldquo;Entities\u0026rdquo; leads nowhere good. - https://www.youtube.com/watch?v=v5Fss4fCl8c How Functions Function - https://www.youtube.com/watch?v=SqT5YglW3qU Single vs. Double Entry Accounting - https://www.moderntreasury.com/learn/single-vs-double-entry-accounting Bank Reconciliation - https://www.moderntreasury.com/learn/bank-reconciliation What is a Ledger? - https://www.moderntreasury.com/learn/what-is-a-ledger How Big Is A Character? - https://www.youtube.com/watch?v=BAGcSyrWiPs Scylla Summit 2022: The Future of Consensus in ScyllaDB 5.0 and Beyond - https://www.youtube.com/watch?v=LoriHUqrzso I Cheated, and Gave Myself Infinite Hearts in Aladdin for SNES (snes rom hacks) - https://www.youtube.com/watch?v=2ZnAS5_0Z3I Accounting for Computer Scientists - https://martin.kleppmann.com/2011/03/07/accounting-for-computer-scientists.html Andrew Kelley - Practical DOD - https://vimeo.com/649009599 Anicet Nougaret - Insights from making a DNN \u0026amp; CNN library from scratch in Rust - https://www.youtube.com/watch?v=GjUM8ejy6kE What is Database Sharding? - https://www.youtube.com/watch?v=XP98YCr-iXQ Handles are the better pointers - https://floooh.github.io/2018/06/17/handles-vs-pointers.html Getting Hands on with io_uring using Go - https://developers.mattermost.com/blog/hands-on-iouring-go/ Implementing Raft: Part 0 - Introduction - https://eli.thegreenplace.net/2020/implementing-raft-part-0-introduction/ Implementing Raft: Part 1 - Elections - https://eli.thegreenplace.net/2020/implementing-raft-part-1-elections/ Implementing Raft: Part 2 - Commands and Log Replication - https://eli.thegreenplace.net/2020/implementing-raft-part-2-commands-and-log-replication/ Implementing Raft: Part 3 - Persistence and Optimizations - https://eli.thegreenplace.net/2020/implementing-raft-part-3-persistence-and-optimizations/ How do games like Prince of Persia manipulate time? | Bitwise - https://www.youtube.com/watch?v=GYLBCTTyHsI What’s new with io_uring - https://kernel.dk/io_uring-whatsnew.pdf Hash chain - https://en.wikipedia.org/wiki/Hash_chain Things I Wish I Knew Before Building a Ledger - https://www.andriosrobert.com/p/things-i-wish-i-knew-before-building Back to Basics: commands, events, and messages - https://milestone.topics.it/2023/05/25/back-to-basics-messages.html The looming demise of the 10x developer: Why an era of enthusiast programmers is coming to an end - https://blog.testdouble.com/posts/2023-07-12-the-looming-demise-of-the-10x-developer/ NumPy vs SciPy - https://www.youtube.com/watch?v=l3s-_8uTBVA The basics of the InnoDB undo logging and history system - https://blog.jcole.us/innodb/ Visualizing the impact of ordered vs. random index insertion in InnoDB - https://blog.jcole.us/2014/10/02/visualizing-the-impact-of-ordered-vs-random-index-insertion-in-innodb/ Coroutines for Go - https://research.swtch.com/coro 290 - SQL ou NoSQL: EIS A QUESTÃO! 🤔 | theWiseDev SQL - https://www.youtube.com/watch?v=mP11yY6uKmg Step Function Callbacks with AWS Lambda | Console Tutorial - https://www.youtube.com/watch?v=Uacjxu_AJTI Multi-tenant data isolation with PostgreSQL Row Level Security - https://aws.amazon.com/blogs/database/multi-tenant-data-isolation-with-postgresql-row-level-security/ MySQL Row-Level Security - https://satoricyber.com/mysql-security/mysql-row-level-security/ Simulation Testing For Liveness - https://tigerbeetle.com/blog/2023-07-06-simulation-testing-for-liveness/ Basics of Linear Algebra for Machine Learning - https://machinelearningmastery.com/linear_algebra_for_machine_learning/ Binary Comparisons for Patch Diffing - BinDiff Tutorial - https://www.youtube.com/watch?v=n06QSoICU6c How real user monitoring works in Grafana Cloud Frontend Observability - https://www.youtube.com/watch?v=5MfpcwTEQ6g Observe your Rust application with Quickwit, Jaeger and Grafana - https://quickwit.io/blog/observing-rust-app-with-quickwit-jaeger-grafana DevOps vs SRE vs Platform Engineering | Clear Big Misconceptions - https://www.youtube.com/watch?v=an8SrFtJBdM DDD is just giving a $h!t about your Domain - https://www.youtube.com/watch?v=i0aGAdgbG7A Bernard Kolobara – Lunatic - Erlang-inspired runtime for WebAssembly - Rust Vienna May 2023 - https://www.youtube.com/watch?v=VhDUGLdj5hY Differences between Apache Kafka and Redpanda: Bypass page cache \u0026amp; optimize for direct memory access - https://www.youtube.com/watch?v=ugZkzonAaqs Vertical Slice Architecture, not Layers! - https://www.youtube.com/watch?v=L2Wnq0ChAIA Sending generated traces to Grafana Tempo - https://www.youtube.com/watch?v=V5GtJRZtZ90 A Good Rust Stack - https://www.youtube.com/watch?v=pocWrUj68tU Make invalid states unrepresentable - https://geeklaunch.io/blog/make-invalid-states-unrepresentable/ Book Review: Nine Lies About Work - https://www.daviddaly.me/2023/07/book-review-nine-lies-about-work.html Building for Failure - https://encore.dev/blog/building-for-failure Why fsync(): Losing unsynced data on a single node leads to global data loss - https://redpanda.com/blog/why-fsync-is-needed-for-data-safety-in-kafka-or-non-byzantine-protocols?utm_source=twitter\u0026utm_medium=social\u0026utm_campaign=may16_social\u0026utm_assettype=blog\u0026utm_assetname=fsync The big picture: How Google Photos scaled rapidly on Spanner - https://cloud.google.com/blog/products/databases/google-photos-builds-user-experience-on-spanner/ Full Circle - https://taliaringer.wordpress.com/2023/07/22/full-circle/ 6 SQL Joins you MUST know! (Animated + Practice) - https://www.youtube.com/watch?v=Yh4CrPHVBdE How This Expression Caused a Global Internet Outage - youtube.com/watch?v=DDe-S3uef2w Square vs. Stripe - https://www.investopedia.com/articles/personal-finance/021715/square-vs-stripe.asp Qual a diferença entre Instituição de Pagamentos e Instituição Financeira?​ - https://www.iugu.com/blog/instituicao-de-pagamentos O que são arranjos de pagamentos e para que eles servem? - https://www.iugu.com/blog/o-que-sao-arranjos-de-pagamentos Entenda o que é CIP e veja as mudanças para marketplaces - https://www.iugu.com/blog/cip-camara-interbancaria-pagamentos-o-que-e Building an an Early Stage Startup: Lessons from Akita Software - https://blog.pragmaticengineer.com/building-an-an-early-stage-startup/ O que é uma instituição de pagamento regulamentada pelo BACEN? - https://www.iugu.com/blog/instituicao-de-pagamento-regulamentada-bacen Como funciona o mercado de Marketplace no Brasil? - https://www.iugu.com/blog/mercado-de-marketplace-no-brasil Token triplo: o que é e como protege os pagamentos digitais? - https://www.iugu.com/blog/token-triplo Instituições de pagamento - https://www.bcb.gov.br/estabilidadefinanceira/instituicaopagamento Arranjo de Pagamentos: O que sua Startup precisa saber sobre esse sistema - https://ndmadvogados.com.br/artigos/arranjo-de-pagamentos-o-que-sua-startup-precisa-saber-sobre-esse-sistema Como criar uma Fintech de Pagamentos para Apostas Esportivas? - https://ndmadvogados.com.br/artigos/como-criar-uma-fintech-de-pagamentos-para-apostas-esportivas 23 Sistema de Pagamentos Brasileiro – SPB - https://www.youtube.com/watch?v=1BT2l_REaBI Instituição de Pagamento: como obter autorização do Banco Central | NDM na Prática - https://www.youtube.com/watch?v=F8Vt675A78w Implementing a Regular Expression Engine - https://deniskyashif.com/2019/02/17/implementing-a-regular-expression-engine/ Amazon EC2 P5 Instances | Amazon Web Services - https://www.youtube.com/watch?v=S8JR50sVong Scaling your API with rate limiters - https://stripe.com/blog/rate-limiters Scaling your API with rate limiters - https://gist.github.com/ptarjan/e38f45f2dfe601419ca3af937fff574d Using load shedding to survive a success disaster—CRE life lessons - https://cloud.google.com/blog/products/gcp/using-load-shedding-to-survive-a-success-disaster-cre-life-lessons Top 7 Ways to 10x Your API Performance - https://www.youtube.com/watch?v=zvWKqUiovAM Monitor behind a firewall w/ Private Data source Connect on Grafana Cloud (Grafana Office Hours #04) - https://www.youtube.com/watch?v=9oPe1IICE80 Path to Event-Driven Architecture. Start capturing INTENT! - https://www.youtube.com/watch?v=sPjj8tVKy6M A Simpler Way to See Results - https://www.youtube.com/watch?v=s5S2Ed5T-dc 10 Postgres tips for beginners - https://postgres.ai/blog/20230722-10-postgres-tips-for-beginners 10 Postgres tips for beginners - https://postgres.ai/blog/20230722-10-postgres-tips-for-beginners How Large language Models Work - https://www.youtube.com/watch?v=5sLYAQS9sWQ Kubernetes Node Selector vs Node Affinity vs Pod Affinity vs Tains \u0026amp; Tolerations - https://www.youtube.com/watch?v=rX4v_L0k4Hc why does polymorphism suck? - https://www.youtube.com/watch?v=aq365yzrTVE How to read inference rules - https://cohost.org/prophet/post/2248211-how-to-read-inferenc Learning about distributed systems: where to start? - muratbuffalo.blogspot.com/2020/06/learning-about-distributed-systems.html The Enemy Within: Running Untrusted Code with gVisor - Ian Lewis, Google - https://www.youtube.com/watch?v=1Ib-rfSzDuM I often hear people ask why Kubernetes and Firecracker (FC) can’t just be used together. It seems like an intuitive combination, Kubernetes is popular for orchestration, and Firecracker provides strong isolation boundaries. So why aren’t they compatible yet? Read on 🧵 - https://threadreaderapp.com/thread/1238496944684597248.html Kata containers limitations - https://github.com/kata-containers/kata-containers/blob/main/docs/Limitations.md Kata Containers, gVisor offer more secure container strategies - https://www.techtarget.com/searchitoperations/tip/Kata-Containers-gVisor-offer-more-secure-container-strategies How to deploy Kubernetes with Firecracker? - https://www.padok.fr/en/blog/deploy-kubernetes-firecracker Secure Compute Part 2: gVisor Runtime on EKS - https://www.verygoodsecurity.com/blog/posts/secure-compute-part-2 Firecracker Executor for Apache Mesos - https://www.aventer.biz/en/products/mesos-firecracker/ DynamoDB Users Need To Know About This Update - https://www.youtube.com/watch?v=vizbUmohKKg x64 Virtual Address Translation - https://www.youtube.com/watch?v=W3o5jYHMh8s Podman vs. Docker - https://www.youtube.com/watch?v=Xx588nbshlM So, you want to deploy on the edge? - https://zknill.io/posts/edge-database/ Turbo docs: Concepts - https://docs.turso.tech/concepts What is a warrant canary? - https://www.cloudflare.com/learning/privacy/what-is-warrant-canary/ What is select skip locked for in postgresql 9.5 - https://www.2ndquadrant.com/en/blog/what-is-select-skip-locked-for-in-postgresql-9-5/ SANDBOXING CONTAINERS RUN UNTRUSTED CODE IN A CONTAINER - https://www.scip.ch/en/?labs.20211118 High-throughput stream processing in Rust - https://noz.ai/hash-pipeline/ BLAKE3 Is an Extremely Fast, Parallel Cryptographic Hash - https://www.infoq.com/news/2020/01/blake3-fast-crypto-hash/ August Aplicação do Open Closed Principle: Exemplo prático com metaprogramação mais polimorfismo - https://www.youtube.com/watch?v=-gOR0WXZmYg Firecracker: Lightweight Virtualization for Serverless Applications - https://www.usenix.org/system/files/nsdi20-paper-agache.pdf SEC02-BP02 Use temporary credentials - https://docs.aws.amazon.com/wellarchitected/latest/framework/sec_identities_unique.html 5 Tips for Building Resilient Architecture - https://www.youtube.com/watch?v=gm6Y4vPlOLg Containers at the edge: it’s not what you think, or maybe it is - https://blog.cloudflare.com/containers-on-the-edge/ What is a Point of Presence (PoP) in networking? - https://rahi.io/articles/what-is-a-point-of-presence-pop-in-networking/ A Programmer-Friendly I/O Abstraction Over io_uring and kqueue - https://tigerbeetle.com/blog/a-friendly-abstraction-over-iouring-and-kqueue/ Intrusive linked lists - https://www.data-structures-in-practice.com/intrusive-linked-lists/ Case Study: TigerBeetle Simulator (VOPR) - https://github.com/LAC-Tech/laterbase/blob/master/deterministic_simulation_testing.md Dependency Injection, The Best Pattern - https://www.youtube.com/watch?v=J1f5b4vcxCQ How to Add AI to Your Apps Faster with Embedded AI - https://www.youtube.com/watch?v=OThahaOga20 Why Google and Meta Put Billion Lines of Code In 1 Repository? - https://www.youtube.com/watch?v=x3cANGNPyx0 Cybersecurity Architecture: Response - https://www.youtube.com/watch?v=Jk79QJCxPkM What happens before the Backend gets the Request - https://www.youtube.com/watch?v=gSQoA4SYhJY Torturing Postgres: extreme autonomous testing for distributed architectures - https://medium.com/@thinkx_/torturing-postgres-extreme-autonomous-testing-for-distributed-architectures-e1c4139ed72e FoundationDB or: How I Learned to Stop Worrying and Trust the Database (Markus Pilman, Snowflake) - https://www.youtube.com/watch?v=OJb8A6h9jQQ Autonomous Testing and the Future of Software Development - Will Wilson - https://www.youtube.com/watch?v=fFSPwJFXVlw How does the Kernel manage backend Connections? - https://www.youtube.com/watch?v=Mc7hAjgFBvY Let’s implement a basic leader election algorithm using Go with RPC - https://itnext.io/lets-implement-a-basic-leader-election-algorithm-using-go-with-rpc-6cd012515358 Pattern: 3rd Party Registration - https://microservices.io/patterns/3rd-party-registration.html Let\u0026rsquo;s implement basic service discovery using Go - https://itnext.io/lets-implement-basic-service-discovery-using-go-d91c513883f6 Most Common Kubernetes Deployment Strategies (Examples \u0026amp; Code) - https://www.youtube.com/watch?v=lxc4EXZOOvE As HashiCorp adopts the BSL, an era of open-source software might be ending - https://www.runtime.news/as-hashicorp-adopts-the-bsl-an-era-of-open-source-software-might-be-ending/ Configure Grafana private data source connect - https://grafana.com/docs/grafana-cloud/connect-externally-hosted/configure-private-datasource-connect/ Circuit-level gateway - https://en.wikipedia.org/wiki/Circuit-level_gateway Dynamic Reverse Tunnels in SSH - https://blog.benpri.me/blog/2019/05/25/dynamic-reverse-tunnels-in-ssh/ SOCKS5 Proxies Explained - https://www.youtube.com/watch?v=EfOjTkFR1iw Git MERGE vs REBASE: Everything You Need to Know - https://www.youtube.com/watch?v=0chZFIZLR_0 Database Replication Explained (in 5 Minutes) - https://www.youtube.com/watch?v=bI8Ry6GhMSE Database Replication Explained - https://towardsdatascience.com/database-replication-explained-5c76a200d8f3 Fundamentals of Neural Networks - https://wandb.ai/site/articles/fundamentals-of-neural-networks Gradient Descent: All You Need to Know - https://hackernoon.com/gradient-descent-aynk-7cbe95a778da Apriori — Association Rule Mining In-depth Explanation and Python Implementation - https://towardsdatascience.com/apriori-association-rule-mining-explanation-and-python-implementation-290b42afdfc6 is it wrong to use numbers in your code? (low level code review) - https://www.youtube.com/watch?v=cjarxeW9_Wo Storing money in MySQL (the right way) - https://www.youtube.com/watch?v=fhwEFZ34c7g SOCKS - https://en.wikipedia.org/wiki/SOCKS SOCKS 5 — A Proxy Protocol - https://medium.com/@nimit95/socks-5-a-proxy-protocol-b741d3bec66c Backward Compatibility, Go 1.21, and Go 2 - https://go.dev/blog/compat Containers at the Edge - https://www.youtube.com/watch?v=LBx56Q10G3Q How a startup loses its spark - https://blog.johnqian.com/startup-spark The Bitter Lesson - www.incompleteideas.net/IncIdeas/BitterLesson.html Kubernetes and Platform Engineering Part 1: k8s Operators - https://www.youtube.com/watch?v=1i9C-QWQUE8 294 - Concorrência na CLEAN ARCHITECTURE | theWiseDev NFR - https://www.youtube.com/watch?v=QEJUAInPKjw Your CPU May be FASTER than You Think - https://www.youtube.com/watch?v=WgTr79htuM4 A Real World Project Use Case Of Golang\u0026rsquo;s Sync.WaitGroup - https://www.youtube.com/watch?v=96scGqEV0pc Why we use the Linux kernel\u0026rsquo;s TCP stack - https://blog.cloudflare.com/why-we-use-the-linux-kernels-tcp-stack/ Cloud Computing without Containers - https://blog.cloudflare.com/cloud-computing-without-containers/ Career advice for young system programmers - https://glaubercosta-11125.medium.com/career-advice-for-young-system-programmers-c7443f2d3edf Distributed Transactions at Scale in Amazon DynamoDB - https://muratbuffalo.blogspot.com/2023/08/distributed-transactions-at-scale-in.html DynamoDB\u0026rsquo;s Best Feature: Predictability - https://brooker.co.za/blog/2022/01/19/predictability.html Why do we use the Linux kernel\u0026rsquo;s TCP stack? - jvns.ca/blog/2016/06/30/why-do-we-use-the-linux-kernels-tcp-stack/ Top 6 Load Balancing Algorithms Every Developer Should Know - https://www.youtube.com/watch?v=dBmxNsS3BGE Understanding Transaction Isolation in DynamoDB: From Concepts to Conflicts - https://blog.calvinsd.in/understanding-transaction-isolation-in-dynamodb Timestamp-based Algorithms for Concurrency Control in Distributed Database Systems - https://muratbuffalo.blogspot.com/2022/11/timestamp-based-algorithms-for.html Fantastic Learning Resources - https://matklad.github.io/2023/08/06/fantastic-learning-resources.html CONSENSUS: BRIDGING THEORY AND PRACTICE - https://web.stanford.edu/~ouster/cgi-bin/papers/OngaroPhD.pdf Viewstamped Replication Made Famous - Joran Greef - https://www.youtube.com/watch?v=qeWyc8G-lq4 Revisiting Viewstamped Replication with Brian Oki and James Cowling - https://www.youtube.com/watch?v=ps106zjmjhw How To Identify File Types - File Format Analysis Tools - https://www.youtube.com/watch?v=xwpNYpFRLf0 Kubernetes Canary Deployment (Manual vs Automated) - https://www.youtube.com/watch?v=fWe6k4MmeSg What is gained and lost with 63-bit integers? - https://blog.janestreet.com/what-is-gained-and-lost-with-63-bit-integers/ What Rust Discovered - https://www.youtube.com/watch?v=v6RxJsk8otY Starting my own hobby language (again) - https://www.youtube.com/watch?v=2bvltIjqrRg The Dark Side of .reserve() - https://www.youtube.com/watch?v=algDLvbl1YY Stop using COUNT(id) to count rows - https://www.youtube.com/watch?v=H6juZ8c_Nu8 Tooling for Tooling - https://uptointerpretation.com/posts/tooling-for-tooling/ Solutions Architect Interview - How Do CDNs Work? (with Salesforce SA) - https://www.youtube.com/watch?v=j9KT9geE5SU Your CPU May be FASTER than You Think - https://www.youtube.com/watch?v=WgTr79htuM4 Kubernetes and Platform Engineering Part 2: Cluster API - https://www.youtube.com/watch?v=K1fGoWCoeSs Data Consistency Between Microservices - https://www.youtube.com/watch?v=uKURpE12Mgo Viewstamped Replication explained - https://blog.brunobonacci.com/2018/07/15/viewstamped-replication-explained/ A Proxy Protocol - https://medium.com/@nimit95/socks-5-a-proxy-protocol-b741d3bec66c So Long, Twitter and Reddit - https://andrewkelley.me/post/goodbye-twitter-reddit.html Getting into formal specification, and getting my team into it too - https://brooker.co.za/blog/2022/07/29/getting-into-tla.html Simple Simulations for System Builders - https://brooker.co.za/blog/2022/04/11/simulation.html Stateful Property Testing in Rust - https://blog.readyset.io/stateful-property-testing-in-rust Exactly-Once Semantics Are Possible: Here’s How Kafka Does It - https://www.confluent.io/blog/exactly-once-semantics-are-possible-heres-how-apache-kafka-does-it/ Viewstamped Replication: The Less-Famous Consensus Protocol - https://brooker.co.za/blog/2014/05/19/vr.html Everything You Always Wanted To Know About fsync() - https://blog.httrack.com/blog/2013/11/15/everything-you-always-wanted-to-know-about-fsync/ Why we built Restate - https://www.restate.dev/blog/why-we-built-restate/ EC2 Enhanced Networking Tutorial - https://www.youtube.com/watch?v=DsNEtIS_q_E Top 5 Most Used Architecture Patterns - https://www.youtube.com/watch?v=f6zXyq4VPP8 Want to build a good API? Here\u0026rsquo;s 5 Tips for API Design. - https://www.youtube.com/watch?v=HBH6qnj0trU 5 Strong Opinions On Everyday Rust - https://www.youtube.com/watch?v=8j_FbjiowvE Durable Objects: Easy, Fast, Correct — Choose three - https://blog.cloudflare.com/durable-objects-easy-fast-correct-choose-three/ Serverless Workflows with Durable Functions and Netherite - https://arxiv.org/pdf/2103.00033.pdf \u0026ldquo;Formal Modeling and Analysis of Distributed Systems\u0026rdquo; by Ankush Desai (Strange Loop 2022) - https://www.youtube.com/watch?v=5YjsSDDWFDY The Time Traveler\u0026rsquo;s Guide to Distributed Applications - https://qianli.dev/blog/timetravel Kubernetes and Platform Engineering Part 3: Crossplane - https://www.youtube.com/watch?v=CPjAiYSoBRE Emulation Fundamentals - Writing A Basic x86 Emulator - https://www.youtube.com/watch?v=HPrqOIdNlrQ September Farewell EC2-Classic, it’s been swell - https://www.allthingsdistributed.com/2023/09/farewell-ec2-classic.html Building a Firecracker-Powered Course Platform To Learn Docker and Kubernetes - https://iximiuz.com/en/posts/iximiuz-labs-story/ The Power Of Struct Embedding And Interfaces In Golang - https://www.youtube.com/watch?v=fXZJu_JuH0A Beginners Should Think Differently When Writing Golang - https://www.youtube.com/watch?v=PyDMqgOkiR8 How to Get Transactions Between (Almost) Any Data Stores - https://petereliaskraft.net/blog/epoxy How to do Distributed Transactions the RIGHT way? Microservices - https://www.youtube.com/watch?v=vGOEO6mO674 \u0026ldquo;Workflows, a new abstraction for distributed systems\u0026rdquo; by Dominik Tornow (Strange Loop 2022) - https://www.youtube.com/watch?v=V_5WeVmyhzg Domain Modeling Gone Wrong - Part 2 - https://www.youtube.com/watch?v=2Tvb1fA3PLQ dbdb: etcd - https://dbdb.io/db/etcd Shuffle Sharding: Massive and Magical Fault Isolation - https://aws.amazon.com/blogs/architecture/shuffle-sharding-massive-and-magical-fault-isolation/ System Design: Apache Kafka In 3 Minutes - https://www.youtube.com/watch?v=HZklgPkboro Serializability - https://jepsen.io/consistency/models/serializable Strict Serializability - https://jepsen.io/consistency/models/strict-serializable Linearizability - https://jepsen.io/consistency/models/linearizable What is Linearizability in Distributed System? - https://hongilkwon.medium.com/what-is-linearizability-in-distributed-system-db8bca3d432d Towards Inserting One Billion Rows in SQLite Under A Minute - https://avi.im/blag/2021/fast-sqlite-inserts/ You Cannot Have Exactly-Once Delivery - https://bravenewgeek.com/you-cannot-have-exactly-once-delivery/ Pagination in MySQL - https://www.youtube.com/watch?v=zwDIN04lIpc Free your API. Misconceptions are holding you back! - https://www.youtube.com/watch?v=nS8XHgMvqNo Understanding Consensus - https://bravenewgeek.com/understanding-consensus/ Algorithms You Should Know Before System Design Interviews - https://www.youtube.com/watch?v=xbgzl2maQUU Distributed consensus - https://shachaf.net/w/consensus are \u0026ldquo;smart pointers\u0026rdquo; actually smart? - https://www.youtube.com/watch?v=tSIBKys2eBQ There is plenty of room at the bottom - https://muratbuffalo.blogspot.com/2021/08/there-is-plenty-of-room-at-bottom.html Raft does not Guarantee Liveness in the face of Network Faults - https://decentralizedthoughts.github.io/2020-12-12-raft-liveness-full-omission/ What is Zig\u0026rsquo;s “Colorblind” Async/Await? - https://kristoff.it/blog/zig-colorblind-async-await/ A Gentle Introduction to LLVM IR - https://mcyoung.xyz/2023/08/01/llvm-ir/ Single-Decree Paxos - https://mwhittaker.github.io/blog/single_decree_paxos/ I Wrote A String Type - https://mcyoung.xyz/2023/08/09/yarns/ Little Computer 3 - https://en.wikipedia.org/wiki/Little_Computer_3 LC3 Instruction Set Architecture - https://winniewjeng.github.io/organization%20\u0026%20programming/2020/06/09/Instruction-Set-Architecture/ LC3 Machine Instruction - https://winniewjeng.github.io/organization%20\u0026%20programming/2020/06/08/LC3-Machine-Instruction/ What is a spinlock? //Source Dive// 002 - https://www.youtube.com/watch?v=ZE9OODanrDA Sign extension - https://en.wikipedia.org/wiki/Sign_extension Use your database to power state machines - https://blog.lawrencejones.dev/state-machines/ ZooKeeper: Zab vs. Paxos - https://cwiki.apache.org/confluence/display/ZOOKEEPER/Zab+vs.+Paxos University of Washington: Replicated State Machines Primary-Backup - https://courses.cs.washington.edu/courses/cse552/19au/notes/lect3.pdf Princeton: Replication State Machines via Primary-Backup Replication - https://www.cs.princeton.edu/courses/archive/spring22/cos418/docs/L11-rsm-pb.pdf MIT 6.824: Lecture 4: Primary-Backup Replication - https://www.youtube.com/watch?v=M_teob23ZzY Large Language Models from scratch - https://www.youtube.com/watch?v=lnA9DMvHtfI Large Language Models: Part 2 - https://www.youtube.com/watch?v=YDiSFS-yHwk Searching by location in MySQL - https://www.youtube.com/watch?v=QgnCB8X_sN4 why do header files even exist? - https://www.youtube.com/watch?v=tOQZlD-0Scc Alternative to the Outbox Pattern? Not so fast. - https://www.youtube.com/watch?v=cuQ9zuNF1cI Container Loading in AWS Lambda - https://brooker.co.za/blog/2023/05/23/snapshot-loading.html JDK 21 LTS - All Features Explained! - https://www.youtube.com/watch?v=bgxuSIhkQZg 4x shorter WebGPU access from Wasm, featuring Nelua, Zig, \u0026amp; Rust - https://www.youtube.com/watch?v=I-tN3dS2zwA Fixing For Loops in Go 1.22 - https://go.dev/blog/loopvar-preview Another way to check pointers at runtime in C - https://www.youtube.com/watch?v=xCxI2GIFdZo RabbitMQ vs. Kafka – An Architect’s Dilemma (Part 1) - https://eranstiller.com/rabbitmq-vs-kafka-an-architects-dilemma-part-1 RabbitMQ vs. Kafka – An Architect’s Dilemma (Part 2) - https://eranstiller.com/rabbitmq-vs-kafka-an-architects-dilemma-part-2 295 - LOCK otimista no CASO DE USO | theWiseDev CleanArch - https://www.youtube.com/watch?v=e6cxVjv5rN0 Transactions: Write skew \u0026amp; why we need serialization? - https://distributed-computing-musings.com/2022/02/transactions-write-skew-why-we-need-serialization/ Transactions: Introduction to serializability techniques - https://distributed-computing-musings.com/2022/02/transactions-introduction-to-serializability-techniques/ Transactions: Two-phase Locking - https://distributed-computing-musings.com/2022/02/transactions-two-phase-locking/ Transactions: Serializable Snapshot Isolation - https://distributed-computing-musings.com/2022/02/transactions-serializable-snapshot-isolation/ Best Developer Interview Question - https://www.youtube.com/watch?v=h1w4X3CmRH4 How to create an alert rule in Grafana 10.1 - https://www.youtube.com/watch?v=nPdzomH6bno New flame graph features for continuous profiling data in Grafana 10.1 - https://www.youtube.com/watch?v=bezFLhbzDOM How to to filter trace spans in Grafana 10.1 - https://www.youtube.com/watch?v=VP2XV3IIc80 Grafana 10.1: TraceQL query results streaming - https://www.youtube.com/watch?v=7BRapaDM_2c Understand Paxos with Rust, Automerge, and TLA+ — Part 1: The Synod. - https://medium.com/@polyglot_factotum/understand-paxos-with-rust-automerge-and-tla-part-1-the-synod-371df5f16f45 Loki Log Context Query Editor in Grafana 10 - https://www.youtube.com/watch?v=t6SG-w_bVss What is Podman? How is it Different Than Docker? - https://www.youtube.com/watch?v=5WML8gX2F1c Relational Databases vs Time Series Databases - https://www.influxdata.com/blog/relational-databases-vs-time-series-databases/ Linux network ring buffers - https://medium.com/coccoc-engineering-blog/linux-network-ring-buffers-cea7ead0b8e8 How do databases execute expressions? - https://notes.eatonphil.com/2023-09-21-how-do-databases-execute-expressions.html Rustonomicon: Poisoning - https://doc.rust-lang.org/nomicon/poisoning.html Make Kubernetes and Platform Engineering Easier Part 2 Monitoring and Observability - https://www.youtube.com/watch?v=RjtT1Q7DpmQ Make Kubernetes and Platform Engineering Easier Part 4: Application Workflows - https://www.youtube.com/watch?v=YPuAAS3lba8 ORMs can lead to FAT domain models. Slim them down! - https://www.youtube.com/watch?v=4UZXUc9jmHc Adding Nested Loops Makes this Algorithm 120x FASTER? - https://www.youtube.com/watch?v=QGYvbsHDPxo Mark Zuckerberg: First Interview in the Metaverse | Lex Fridman Podcast #398 - https://www.youtube.com/watch?v=MVYrJJNdrEg Faster database indexes (straight from the docs) - https://www.youtube.com/watch?v=5aezDBaNfcc Containerization Strategy - https://www.youtube.com/watch?v=iLyBEEkm5e0 why do void pointers even exist? - https://www.youtube.com/watch?v=t7CUti_7d7c The Pros and Cons of Encrypted Client Hello - https://www.youtube.com/watch?v=1ezrBsJCVqw Why Do You Only Get Motivated After Midnight? | Night Owls - https://www.youtube.com/watch?v=jiIhOgpOWcA Why You Should Be Ashamed Of Yourself - https://www.youtube.com/watch?v=COHThDr1uvg Server Name Indication (SNI) TLS Extension Explained - https://www.youtube.com/watch?v=manTiXESYG0 50 years later, is Two-Phase Locking the best we can do? - concurrencyfreaks.blogspot.com/2023/09/50-years-later-is-two-phase-locking.html October LULA vs CAMPOS NETO; SELIC CAI MAIS?; TRUMP FAVORITO nas ELEIÇÕES; CHINA DESPEJANDO TREASURIES - https://www.youtube.com/watch?v=ToU30U0vHz8 Use your database to power state machines - https://blog.lawrencejones.dev/state-machines/ What to know before debating type systems - https://blogs.perl.org/users/ovid/2010/08/what-to-know-before-debating-type-systems.html Hyperdrive: making databases feel like they’re globa - https://blog.cloudflare.com/hyperdrive-making-regional-databases-feel-distributed/ Pitch Practice with Paul Buchheit and Sam Altman at Startup School SV 2016 - https://www.youtube.com/watch?v=fcyf9z4gSeI Kevin Hale - How to Pitch Your Startup - https://www.youtube.com/watch?v=17XZGUX_9iM Avoid These Tempting Startup Ideas - https://www.youtube.com/watch?v=GMIawSAygO4 How Future Billionaires Get Sh*t Done - https://www.youtube.com/watch?v=ephzgxgOjR0 Tips For Technical Startup Founders | Startup School - https://www.youtube.com/watch?v=rP7bpYsfa6Q How to Get Your First Customers | Startup School - https://www.youtube.com/watch?v=hyYCn_kAngI Startup Business Models and Pricing | Startup School - https://www.youtube.com/watch?v=oWZbWzAyHAE Should You Start A Startup? | Startup School - https://www.youtube.com/watch?v=BUE-icVYRFU How to Build An MVP | Startup School - https://www.youtube.com/watch?v=QRZ_l7cVzzU The Best Way To Launch Your Startup | Startup School - https://www.youtube.com/watch?v=u36A-YTxiOw Using Conditional Put to Solve MongoDB Concurrency Issues - https://dev.to/woovi/using-conditional-put-to-solve-mongodb-concurrency-issues-405a Most Important Lifestyle Habits Of Successful Founders - https://www.youtube.com/watch?v=0IShllkCHtY How to Get and Evaluate Startup Ideas | Startup School - https://www.youtube.com/watch?v=Th8JoIan4dg Design Tinder - System Design Interview (with TikTok Senior Engineer) - https://www.youtube.com/watch?v=iyLqwyFL0Zc How to do distributed locking - https://martin.kleppmann.com/2016/02/08/how-to-do-distributed-locking.html The Two Mindsets That Can KILL Your Startup - https://www.youtube.com/watch?v=lJausFj_Dto Which Sales Strategy Is Best For Your Startup? - https://www.youtube.com/watch?v=o1HFZ8P4rA8 How To Talk To Users | Startup School - https://www.youtube.com/watch?v=z1iF1c8w5Lg The rule of three/five/zero - https://en.cppreference.com/w/cpp/language/rule_of_three Turning Your Users Into Paying Customers - https://www.youtube.com/watch?v=9pQJXR0Tcos How Startup Fundraising Works | Startup School - https://www.youtube.com/watch?v=zBUhQPPS9AY Advantages Of A First-Time Founder - https://www.youtube.com/watch?v=bp_kMA-eTsE Why Are There So Many Foundation Models? - https://www.youtube.com/watch?v=QPQy7jUpmyA INT(11) is a lie - https://www.youtube.com/watch?v=xYl67AvQci8 Co-Founder Mistakes That Kill Companies \u0026amp; How To Avoid Them - https://www.youtube.com/watch?v=dlfjs_eEEzs Open Sourcing Ferrocene - https://ferrous-systems.com/blog/ferrocene-open-source/ Raft is so fetch: The Raft Consensus Algorithm explained through \u0026ldquo;Mean Girls\u0026rdquo; - https://www.cockroachlabs.com/blog/raft-is-so-fetch/ The Secrets To Setting Smarter Goals - https://www.youtube.com/watch?v=rE2XaBGHN2I Top Ways Startups Waste Money - https://www.youtube.com/watch?v=BtzUo6vL3Iw What Basic Game Theory Teaches Us About Startups - https://www.youtube.com/watch?v=gUuQsMERjUc Setting KPIs and Goals | Startup School - https://www.youtube.com/watch?v=6DTK9yDP6p0 Save Your Startup During an Economic Downturn - https://www.youtube.com/watch?v=0OVSTWozvfY App Configuration, where does it go? Config files, env vars, external service? - https://www.youtube.com/watch?v=mukJVR-GRcQ Where Do Great Startup Ideas Come From? – Dalton Caldwell and Michael Seibel - https://www.youtube.com/watch?v=Jcuqq48CNj8 Announcing Rust 1.73.0 - https://blog.rust-lang.org/2023/10/05/Rust-1.73.0.html AWS PrivateLink for Grafana Cloud - https://www.youtube.com/watch?v=0lreDtiLtwk The Advantages Of Queues On Logs - https://jack-vanlightly.com/blog/2023/10/2/the-advantages-of-queues-on-logs Deep dive on how static files are served with HTTP (kernel, sockets, file system, memory, zero copy) - https://www.youtube.com/watch?v=rIcahiIklSk WebSocket vs. Server-sent Events: A Performance Comparison - https://www.timeplus.com/post/websocket-vs-sse DesignGuru Review - Is Grokking Advanced System Design Interview Course Worth it? - https://javarevisited.blogspot.com/2022/07/educative-review-is-grokking-advanced-system-design-interview.html#axzz8Efgvehe5 The Design and Implementation of Userland Exec - https://grugq.github.io/docs/ul_exec.txt Demystifying Consistent Hashing: A Key to Scalable and Efficient Data Distribution - https://theefficientdev.blog/2023/09/09/demystifying-consistent-hashing-a-key-to-scalable-and-efficient-data-distribution/ Startup Experts Reveal Their Top Productivity Advice - https://www.youtube.com/watch?v=nF_YWdz6S0Y CS168: The Modern Algorithmic Toolbox Lecture #1: Introduction and Consistent Hashing - https://web.stanford.edu/class/cs168/l/l1.pdf Amazon DynamoDB: A Scalable, Predictably Performant, and Fully Managed NoSQL Database Service(2022) - https://www.usenix.org/system/files/atc22-elhemali.pdf Web caching with consistent hashing - https://cs.brown.edu/courses/csci2950-u/f10/papers/chash99www.pdf Thread-per-core - https://without.boats/blog/thread-per-core/ Thread-per-core - https://without.boats/blog/thread-per-core/ why are switch statements so HECKIN fast? - https://www.youtube.com/watch?v=fjUG_y5ZaL4 A shallow survey of OLAP and HTAP query engines - https://www.scattered-thoughts.net/writing/a-shallow-survey-of-olap-and-htap-query-engines/ How to Get Startup Ideas - https://www.youtube.com/watch?v=uvw-u99yj8w What Does It REALLY Mean To Do Things That Don\u0026rsquo;t Scale? – Dalton Caldwell and Michael Seibel - https://www.youtube.com/watch?v=4RMjQal_c4U The Ugly Truth About Social Network Startups - https://www.youtube.com/watch?v=vAu-oqF5IdQ ScyllaDB Ring Architecture - Overview - https://opensource.docs.scylladb.com/stable/architecture/ringarchitecture/ Should You Follow Your Passion? – Dalton Caldwell and Michael Seibel - https://www.youtube.com/watch?v=KWNNmPCF-Xs How To Build Product As A Small Startup - Michael Seibel - https://www.youtube.com/watch?v=kzVvjKLdAbk How to make memory read-only in your C programs. - https://www.youtube.com/watch?v=AYSISa95oJE CSE138 (Distributed Systems) L15: introduction to sharding; consistent hashing - https://www.youtube.com/watch?v=uNQGP0yupn0\u0026list=PLNPUF5QyWU8PydLG2cIJrCvnn5I_exhYx\u0026index=20 The Cult of Conformity in Silicon Valley - https://www.youtube.com/watch?v=ia7IKW0yuG0 Startup Experts Share Their Investor Horror Stories - https://www.youtube.com/watch?v=ljVan7CGBiE Grafana documentary series | Preview 1 - https://www.youtube.com/watch?v=qORB9GAqgbU Startup Experts Reveal Their Favorite Pivot Stories - https://www.youtube.com/watch?v=DmehFuCMtvc Should You Quit Your Job At A Unicorn? - https://www.youtube.com/watch?v=chAoH_AeGAg \u0026ldquo;Integration Events\u0026rdquo; is a terrible name. Call them\u0026hellip; - https://www.youtube.com/watch?v=qf-BSAhbrWw Using Retrieval Augmented Generation with a Large Language Model Chatbot - https://www.youtube.com/watch?v=XctooiH0moI How to Get Good at Small Talk, and Even Enjoy It - https://www.youtube.com/watch?v=IRG-YubP1rw The WORST Domain Modeling Mistakes! - https://www.youtube.com/watch?v=uIfGIlD3lnw November How To NOT Get Screwed As A Software Engineer - https://www.youtube.com/watch?v=fcfVjd_oV1I Failing Startups : Maybe I should get a job - https://www.indiehackers.com/post/failing-startups-maybe-i-should-get-a-job-653e1efd52 Cross shard transactions at 10 million requests per second - https://dropbox.tech/infrastructure/cross-shard-transactions-at-10-million-requests-per-second Let\u0026rsquo;s implement a basic hotel reservation system with 2PC using pessimistic and optimistic locks in Go - https://blog.stackademic.com/lets-implement-a-basic-hotel-reservation-system-with-2pc-using-pessimistic-and-optimistic-locks-in-581256d142e8 Postgres: PREPARE TRANSACTION - https://www.postgresql.org/docs/current/sql-prepare-transaction.html Building a Streaming Platform in Go for Postgres - https://blog.peerdb.io/building-a-streaming-platform-in-go-for-postgres Using MySQL to stop freeloaders (in only 8 minutes) - https://www.youtube.com/watch?v=goC5BdyCvms You don\u0026rsquo;t need NoSQL (use MySQL) - https://www.youtube.com/watch?v=QZBxgX2OWbI Towards Modern Development of Cloud Applications - https://dl.acm.org/doi/pdf/10.1145/3593856.3595909 Diamond Architecture - How to build HUMONGOUS Apps FAST! - Part 5 - Less Boilerplate Please - https://www.youtube.com/watch?v=SQengjF8gXs Essence of Domain-Driven Design (DDD) - https://www.youtube.com/watch?v=Y0txTmT3k7M Event-Driven Architecture lost its way - https://www.youtube.com/watch?v=YusVrd9rHJU Paper Notes: Bitcask – A Log-Structured Hash Table for Fast Key/Value Data - https://distributed-computing-musings.com/2023/01/paper-notes-bitcask-a-log-structured-hash-table-for-fast-key-value-data/ Wikipedia: readahead - https://en.wikipedia.org/wiki/Readahead Manpage: readahead - https://man7.org/linux/man-pages/man2/readahead.2.html P99 CONF 2023 | A Deterministic Walk Down TigerBeetle’s main() Street by Aleksei Kladov - https://www.youtube.com/watch?v=AGxAnkrhDGY why yelling at your code makes it better (software fuzzing explained) - https://www.youtube.com/watch?v=diUiwAEPjcQ Complex database indexing strategies - https://www.youtube.com/watch?v=IcIkjfXoHV4 Domain Modeling Gone Wrong - Part 1 - https://www.youtube.com/watch?v=0EQCcALt9Cc Domain Modeling Gone Wrong - Part 2 - https://www.youtube.com/watch?v=2Tvb1fA3PLQ If your service doesn\u0026rsquo;t own data, it\u0026rsquo;s NOT a service. - https://www.youtube.com/watch?v=S46f1-0ciHA Transactions Are Not Locks - https://www.benburwell.com/posts/transactions-are-not-locks/ Rust: Polonius update - https://blog.rust-lang.org/inside-rust/2023/10/06/polonius-update.html How to Detect Threads \u0026amp; Bypass Anti-Cheat Detection - https://www.youtube.com/watch?v=KzD_nc5B_8w Storing feature flags as JSON (with indexing) - https://www.youtube.com/watch?v=cDzrY-QW4Ck Message Queue From Scratch In Golang With Only STD LIB - https://www.youtube.com/watch?v=99OEUGbk3vc Store 8 feature flags in 1 integer (Bitwise operations in MySQL) - https://www.youtube.com/watch?v=Kf8SWqljM18 Criptografia na Prática - Certificados, BitTorrent, Git, Bitcoin - https://www.youtube.com/watch?v=iAA8NrfQtHo What Makes The Top 10% Of Founders Different? - Michael Seibel - https://www.youtube.com/watch?v=ZtfTOuSHGg8 Let\u0026rsquo;s Build A Distributed CAS Storage In Golang - https://www.youtube.com/watch?v=d_pVmR_0p0E Why Checked Exceptions Failed - https://borretti.me/article/why-checked-exceptions-failed P2P Protocol In Golang For My Distributed CAS - https://www.youtube.com/watch?v=TFkOzuUz6Wo Announcing Rust 1.74.0 - https://blog.rust-lang.org/2023/11/16/Rust-1.74.0.html Saving a SaaS on the weekend - https://www.youtube.com/watch?v=kkjAxSViOAA Build a Monolith and Deploy like Microservices? Maybe with Service Weaver - https://www.youtube.com/watch?v=Srt_8a5Nam0 Building and operating a pretty big storage system called S3 - https://www.allthingsdistributed.com/2023/07/building-and-operating-a-pretty-big-storage-system.html Distributed CAS Storage In Golang - RPC Networking - https://www.youtube.com/watch?v=_5RrYWKbyVg Uncensored Models - https://erichartford.com/uncensored-models Coding TCP Transport For My P2P Distributed Storage In GO - https://www.youtube.com/watch?v=-Ung58PHgus Streaming Large Files In Golang But Distributed - https://www.youtube.com/watch?v=3mO5MUbCzKQ Your database will break in 2038 (or sooner) - https://www.youtube.com/watch?v=d6HaTHkXqcQ Neural Networks From Scratch in Rust - https://www.youtube.com/watch?v=DKbz9pNXVdE Episode 001: Intro and (Absence of) Message Parsing - https://www.youtube.com/watch?v=hPUL8Xo6MJw Two Ways To Do Dynamic Dispatch - https://www.youtube.com/watch?v=wU8hQvU8aKM How Do You Convince Someone to Join Your Startup? - Dalton Caldwell - https://www.youtube.com/watch?v=N8deM6B4eE4 The magic of content-addressable storage - https://hal.science/hal-02559031v1/file/content-addressable-storage-preprint.pdf There is No Now: Problems with simultaneity in distributed systems - https://queue.acm.org/detail.cfm?id=2745385 Database enums are weird - https://www.youtube.com/watch?v=ej8jzMloE_4 Pizza Wars: The Exorcism of Papa John’s - https://www.youtube.com/watch?v=6eAcykBJsUM Kubernetes Autoscaling: HPA vs. VPA vs. Keda vs. CA vs. Karpenter vs. Fargate - https://www.youtube.com/watch?v=hsJ2qtwoWZw interrupts is threads - https://onevariable.com/blog/interrupts-is-threads/ MIT 6.824: Distributed systems - Lecture 4: Primary-Backup Replication - https://www.youtube.com/watch?app=desktop\u0026v=M_teob23ZzY\u0026amp%3Bfeature=youtu.be ZooKeper wiki: Zab vs. Paxos - https://cwiki.apache.org/confluence/display/ZOOKEEPER/Zab+vs.+Paxos The Postgres replication dilemma - https://medium.com/@hnasr/the-postgres-replication-dilemma-72bef6cc4599 Inside logical replication in PostgreSQL: How it works - https://www.postgresql.fastware.com/blog/inside-logical-replication-in-postgresql The cost and benefit of synchronous replication in PostgreSQL and YugabyteDB - https://dev.to/yugabyte/the-cost-and-benefit-of-synchronous-replication-in-postgresql-and-yugabytedb-2ej0 How I became a machine learning practitioner - https://blog.gregbrockman.com/how-i-became-a-machine-learning-practitioner It’s time to become an ML engineer - https://blog.gregbrockman.com/its-time-to-become-an-ml-engineer My path to OpenAI - https://blog.gregbrockman.com/my-path-to-openai What Is Platform Engineering - https://www.youtube.com/watch?v=JP8-9WXBcgg Top 8 Most Popular Network Protocols Explained - https://www.youtube.com/watch?v=P6SZLcGE4us You don\u0026rsquo;t* need JOINs - https://www.youtube.com/watch?v=5hsl47I3svw Writing Tests For My Distributed File Storage In Golang - https://www.youtube.com/watch?v=MKwYkV9JWLw Everything You Know About MongoDB is Wrong! - https://www.mongodb.com/developer/products/mongodb/everything-you-know-is-wrong/ Why async Rust? - https://without.boats/blog/why-async-rust/ What is a MESSAGE QUEUE and Where is it used? - https://www.youtube.com/watch?v=oUJbuFMyBDk Basic Amazon SQS architecture - https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-basic-architecture.html The Big Little Guide to Message Queues - https://sudhir.io/the-big-little-guide-to-message-queues Using the expand and contract pattern for schema changes - https://www.prisma.io/dataguide/types/relational/expand-and-contract-pattern Andrej Karpathy: [1hr Talk] Intro to Large Language Models - ctwe Tim Brady - How Much Equity Should I Give My First Employees? - https://www.youtube.com/watch?v=B2QdN0-fAbw Implement Raft in Rust - https://www.pingcap.com/blog/implement-raft-in-rust/ What is a Multiraft? - https://sergeiturukin.com/2017/06/09/multiraft.html Scaling Raft - https://www.cockroachlabs.com/blog/scaling-raft/ Elasticell: Multi-Raft - https://elasticell.readthedocs.io/en/latest/architecture/multi-raft/ TiKV: Multi-raft - https://tikv.org/deep-dive/scalability/multi-raft/ Raft or not? The Best Solution to Data Consistency in Cloud-native Databases - https://milvus.io/blog/raft-or-not.md Dan Lüdtke: Implementing Distributed Consensus - https://www.usenix.org/sites/default/files/conference/protected-files/srecon19apac_slides_ludtke.pdf Distributed consensus made simple (for real this time!) - https://decentralizedthoughts.github.io/2021-09-30-distributed-consensus-made-simple-for-real-this-time/ Machine Learning Interview - Design Spotify Recommendations - https://www.youtube.com/watch?v=vyZMYlGBSBM Vertical Slice Architecture Myths You Need To Know! - https://www.youtube.com/watch?v=TfMArQnepco Database Replication Explained - https://towardsdatascience.com/database-replication-explained-5c76a200d8f3 Paxos, Raft, EPaxos: How Has Distributed Consensus Technology Evolved? - https://www.alibabacloud.com/blog/paxos-raft-epaxos-how-has-distributed-consensus-technology-evolved_597127 It’s About Time! - https://brooker.co.za/blog/2023/11/27/about-time.html How Git Works: Explained in 4 Minutes - https://www.youtube.com/watch?v=e9lnsKot_SQ Many to many relationships in MySQL - https://www.youtube.com/watch?v=csLHXmVLGbs Announcing the new Amazon S3 Express One Zone high performance storage class - https://aws.amazon.com/blogs/aws/new-amazon-s3-express-one-zone-high-performance-storage-class/ S3 Express is All You Need - https://www.warpstream.com/blog/s3-express-is-all-you-need The Golang Function Nobody Talks About - https://www.youtube.com/watch?v=INcV8kNlDPM How To Build A Tech Startup With No Technical Skills - https://www.youtube.com/watch?v=ZpKu2wvquWg Write throughput differences in B-tree vs LSM-tree based databases? - https://www.reddit.com/r/databasedevelopment/comments/187cp1g/write_throughput_differences_in_btree_vs_lsmtree/ LSM Tree: Data structure powering write heavy storage engines - https://distributed-computing-musings.com/2022/07/lsm-tree-data-structure-powering-write-heavy-storage-engines/ WiredTiger: Btree vs LSM - https://github.com/wiredtiger/wiredtiger/wiki/Btree-vs-LSM How OmniPaxos handles partial connectivity - and why other protocols can’t - https://omnipaxos.com/blog/how-omnipaxos-handles-partial-connectivity-and-why-other-protocols-cant/ Raft does not Guarantee Liveness in the face of Network Faults - https://decentralizedthoughts.github.io/2020-12-12-raft-liveness-full-omission/ Design an Amazon S3 or Object Storage - https://www.youtube.com/watch?v=vTPR6fIgC-I All Web Services API What are the benefits and drawbacks of using token bucket or leaky bucket for API rate limiting? - https://www.linkedin.com/advice/0/what-benefits-drawbacks-using-token-bucket-leaky December Design a Metrics Aggregation System | Time Series Database Design | Prometheus - https://www.youtube.com/watch?v=SCmN2Sr7fqE\u0026list=PL4kInuyvT-Aw_Bz7l33AwTHXDgD3s0nkv\u0026index=3 How I add millions of rows to MySQL (for performance testing) - https://www.youtube.com/watch?v=ywp9Z0xZPzo The Story of Grafana | Episode 1: Democratize Metrics | Grafana Documentary - https://www.youtube.com/watch?v=k3RQVyeYdO8 How to (and how not to) design REST APIs - https://www.youtube.com/watch?v=60F8rzP5nQo How I read a research paper - https://muratbuffalo.blogspot.com/2013/07/how-i-read-research-paper.html Why is Jepsen Written in Clojure? - https://aphyr.com/posts/367-why-is-jepsen-written-in-clojure Benchmarking the fastest possible MySQL query - https://www.youtube.com/watch?v=KZoS1fEPx5Q iMessage, explained - https://jjtech.dev/reverse-engineering/imessage-explained/ How Price’s Law Applies to Everything - https://nielsbohrmann.com/prices-law/ Traces to metrics: Ad hoc RED metrics in Grafana Tempo - https://www.youtube.com/watch?v=xOolCpm2F8c Introduction to opam Switches - https://ocaml.org/docs/opam-switch-introduction#introduction-to-opam-switches Introduction to the OCaml Toplevel - https://ocaml.org/docs/toplevel-introduction Announcing Rust 1.74.1 - https://blog.rust-lang.org/2023/12/07/Rust-1.74.1.html Advice from the CEO of Shopify, Tobias Lütke - https://www.youtube.com/watch?v=prHmUW4JIms Redeveloping TCP from the ground up - https://hannes.robur.coop/Posts/TCP-ns Design HashSet - Leetcode 705 - https://www.youtube.com/watch?v=6eAKScpknHQ TiDB Internal (II) – Computing - https://www.pingcap.com/blog/tidb-internal-computing/ Ocaml docs: Modules - https://ocaml.org/docs/modules#abstract-types The unfair way I got good at Leetcode - https://www.youtube.com/watch?v=GPIuPRqDGG8 Reducing tail latencies with automatic cooperative task yielding - https://tokio.rs/blog/2020-04-preemption How Akka Works: \u0026lsquo;Exactly Once\u0026rsquo; Message Delivery - https://www.lightbend.com/blog/how-akka-works-exactly-once-message-delivery Which 🐘PostgreSQL problems are solved with 🚀YugabyteDB - https://dev.to/yugabyte/which-postgresql-problems-are-solved-with-yugabytedb-2gm Life of a HTTP request, as seen by my toy web server - https://tia.mat.br/posts/2014/10/06/life_of_a_http_request.html On some subtleties of Paxos - https://www.the-paper-trail.org/post/2012-11-03-on-some-subtleties-of-paxos/ Consensus Protocols: A Paxos Implementation - https://www.the-paper-trail.org/post/2009-02-09-consensus-protocols-a-paxos-implementation/ Consensus, Two Phase and Three Phase Commits - https://medium.com/@balrajasubbiah/consensus-two-phase-and-three-phase-commits-4e35c1a435ac Is Scalable OLTP in the Cloud a Solved Problem? (CIDR 2023) - https://muratbuffalo.blogspot.com/2023/01/is-scalable-oltp-in-cloud-solved.html Jeff Dean: Designs, Lessons and Advice from Building Large Distributed Systems - https://www.cs.cornell.edu/projects/ladis2009/talks/dean-keynote-ladis2009.pdf Modern hinted handoff - https://www.datastax.com/blog/modern-hinted-handoff Amazon Aurora Under the Hood: Quorum Reads and Mutating State - https://aws.amazon.com/blogs/database/amazon-aurora-under-the-hood-quorum-reads-and-mutating-state/ HAT, not CAP: Introducing Highly Available Transactions - www.bailis.org/blog/hat-not-cap-introducing-highly-available-transactions/ Back to Basics: service boundaries, autonomous components, and coupling - https://milestone.topics.it/2023/05/17/back-to-basics-boundaries.html 😱 Status quo stories: Alan thinks he needs async locks - https://rust-lang.github.io/wg-async/vision/submitted_stories/status_quo/alan_thinks_he_needs_async_locks.html Let\u0026rsquo;s #TalkConcurrency Panel Discussion with Sir Tony Hoare, Joe Armstrong, and Carl Hewitt - https://www.youtube.com/watch?v=37wFVVVZlVU Students\u0026rsquo; Guide to Raft - https://thesquareplanet.com/blog/students-guide-to-raft/ Instructors\u0026rsquo; Guide to Raft - https://thesquareplanet.com/blog/instructors-guide-to-raft/ How Much Equity to Give Your Cofounder - Michael Seibel - https://www.youtube.com/watch?v=9NhEBVPlJs4 Abandoning Async - rgrinberg.com/posts/abandoning-async/ Getting Started with Lwt threads - https://mirage.io/docs/tutorial-lwt Lwt manual - https://ocsigen.org/lwt/latest/manual/manual TCP Server and Client in OCaml - https://medium.com/@aryangodara_19887/tcp-server-and-client-in-ocaml-13ebefd54f60 Non-Send Futures When? - https://matklad.github.io/2023/12/10/nsfw.html The Big Problem With \u0026ldquo;Serverless\u0026rdquo; - https://www.youtube.com/watch?v=10kVndpDKvA The effect of Random UUID on database performance - https://www.youtube.com/watch?v=OAOQ7U0XAi0 How does fork work with open files? - https://www.youtube.com/watch?v=SThwp5ijh6o Why Riak - https://web.archive.org/web/20181021220147/http://docs.basho.com/riak/1.4.8/theory/why-riak/ Introduction - https://pgrandinetti.github.io/compilers/page/introduction/ Can I Get a Job After I Study Compilers? - https://pgrandinetti.github.io/compilers/page/can-i-get-a-job-in-compilers/ Why There Are So Many Programming Languages? - https://pgrandinetti.github.io/compilers/page/why-so-many-programming-languages/ The Story of Grafana | Episode 2: Community | Grafana Documentary - https://www.youtube.com/watch?v=lbBQk_QPnEs RAND is too slow (in MySQL) - https://www.youtube.com/watch?v=wTcpZWPHl6w Design de API\u0026rsquo;s Resilientes: Explorando Técnicas de Idempotência - https://www.youtube.com/watch?v=bnRZTi3C_JM The Real Hidden Cost of a Request - https://www.youtube.com/watch?v=MN2jIUonuQQ IT in Three: What is RAID? - https://www.youtube.com/watch?v=Aa0RTgxJJy8 How databases store data on disk? - https://www.youtube.com/watch?v=haz2h7_xFDk Divide and Conquer: The Art of Breaking Down Problems | Recursion Series - https://www.youtube.com/watch?v=ib4BHvr5-Ao Why create Index blocks writes - https://www.youtube.com/watch?v=ykVumkmkbik How Databases Store and Retrieve Data - https://siemens.blog/posts/how-databases-store-and-retrieve-data/ The unreasonable generality of feed-forward neural networks (a tribute) - https://www.youtube.com/watch?v=EXbgUXt8fFU Simple introduction to monads in OCaml - https://www.cryptologie.net/article/578/simple-introduction-to-monads-in-ocaml/ OCaml has some new shiny syntax - https://jobjo.github.io/2019/04/24/ocaml-has-some-new-shiny-syntax.html A Tutorial to OCaml -ppx Language Extensions - https://victor.darvariu.me/jekyll/update/2018/06/19/ppx-tutorial.html Let syntax, and why you should use it - https://blog.janestreet.com/let-syntax-and-why-you-should-use-it/ Mitchell reflects as he departs HashiCorp - https://www.hashicorp.com/blog/mitchell-reflects-as-he-departs-hashicorp What Are the Differences Between Programming Languages - https://pgrandinetti.github.io/compilers/page/what-are-the-differences-in-programming-languages/ Jeff Bezos: Amazon and Blue Origin | Lex Fridman Podcast #405 - https://www.youtube.com/watch?v=DcWqzZ3I2cY Leaving Sourcegraph - https://registerspill.thorstenball.com/p/leaving-sourcegraph Let\u0026rsquo;s build a distributed Postgres proof of concept - https://notes.eatonphil.com/distributed-postgres.html FoundationDB: CAP Theorem - https://apple.github.io/foundationdb/cap-theorem.html FoundationDB: Fault Tolerance - https://apple.github.io/foundationdb/fault-tolerance.html Key Startup Metrics | Startup School - https://www.youtube.com/watch?v=_mKeVGSqQac Design a Blob Storage | Facebook F4 | Warm Storage - https://www.youtube.com/watch?v=zx9pz1IklUE\u0026list=PL4kInuyvT-Aw_Bz7l33AwTHXDgD3s0nkv\u0026index=13 Two new MySQL expressions - https://www.youtube.com/watch?v=NZqFiBDQG1s Partial Return Address Overwrite - Exploit Dev 10 - https://www.youtube.com/watch?v=fqsSAqbNFfo Design Metrics Aggregation System | LSM Tree Storage | Scaling - https://www.youtube.com/watch?v=7qfVRn4lFXY Memory layout and mechanics of arrays and slices | Golang | intermediate level - https://www.youtube.com/watch?v=RVTfPy_NELc A Close Look at a Spinlock - https://blog.regehr.org/archives/2173 Database Fundamentals - https://tontinton.com/posts/database-fundementals/ Learn In Public - https://www.swyx.io/learn-in-public \u0026ldquo;Simple Made Easy\u0026rdquo; (12-minute redux) by Rich Hickey (2011) - https://www.youtube.com/watch?v=F87PtAoJNtg the hidden structure you\u0026rsquo;ve been using all along - https://www.youtube.com/watch?v=CRTR5ljBjPM Diving into Kafka Internals with David Jacot - https://www.youtube.com/watch?v=d89W_GzWnRw Ocaml docs: Mutability, loops, and imperative programming - https://ocaml.org/docs/mutability-loops-and-imperative Introducing Solid Queue - https://dev.37signals.com/introducing-solid-queue/ Eio \u0026ndash; Effects-Based Parallel IO for OCaml - https://github.com/ocaml-multicore/eio Replication: Introducing leaderless replication - https://distributed-computing-musings.com/2022/01/replication-introducing-leaderless-replication/ How to Hook Steam Overlay Tutorial - 64-bit IMGUI Hook - https://www.youtube.com/watch?v=z7zUMieOO98 WHAT IS HOOKING? - https://www.youtube.com/watch?v=KY2Y7Zn3HW0 How to Be Great? Just Be Good, Repeatably - https://blog.stephsmith.io/how-to-be-great/ Locking In On Concurrency Control - https://www.youtube.com/watch?v=PyxadX8yrsI How are memories stored in neural networks? | The Hopfield Network #SoME2 - https://www.youtube.com/watch?v=piF6D6CQxUw The Log: What every software engineer should know about real-time data\u0026rsquo;s unifying abstraction - https://engineering.linkedin.com/distributed-systems/log-what-every-software-engineer-should-know-about-real-time-datas-unifying malloc sucks so i wrote my own heap in C - https://www.youtube.com/watch?v=CulF4YQt6zA Rich Hickey: Deconstructing the Database - https://www.youtube.com/watch?v=Cym4TZwTCNU The Design of Datomic - Rich Hickey - https://www.youtube.com/watch?v=Pz_NvY1kw6I Does P = NP? | Complexity Theory Explained Visually - https://www.youtube.com/watch?v=rK3xcRYLWeg Datomic: Immutable database for new web architecture (S03E08) - https://www.youtube.com/watch?v=VlNeWWcIQI4 What I Wish Someone Had Told Me - https://blog.samaltman.com/what-i-wish-someone-had-told-me The dark side of inlining and monomorphization - https://nickb.dev/blog/the-dark-side-of-inlining-and-monomorphization/ How do Video Game Graphics Work? - https://www.youtube.com/watch?v=C8YtdC8mxTU How do I Set, Clear, and Toggle a Single Bit? - https://www.youtube.com/watch?v=F9742wnBWRc Datomic overview - https://docs.datomic.com/pro/overview/introduction.html Internals of Interfaces in Golang | Intermediate level - https://www.youtube.com/watch?v=x87Cs9vU4Fk Dear Functional Bros - https://www.youtube.com/watch?v=nuML9SmdbJ4 Memory Allocation - https://samwho.dev/memory-allocation/ The secret lives of data: Raft - https://thesecretlivesofdata.com/raft/ How does B-tree make your queries fast? - https://blog.allegro.tech/2023/11/how-does-btree-make-your-queries-fast.html Cursed C++ Casts - https://www.youtube.com/watch?v=SmlLdd1Q2V8 A simple, arena-backed, generic dynamic array for C - https://nullprogram.com/blog/2023/10/05/ Essential Matrix Algebra for Neural Networks, Clearly Explained - https://www.youtube.com/watch?v=ZTt9gsGcdDo Alex Petrov: Algorithms Behind Modern Storage Systems - https://queue.acm.org/detail.cfm?id=3220266 Life Beyond Distributed Transactions - https://queue.acm.org/detail.cfm?id=3025012 Performance Engineering on Hard Mode with Andrew Hunter - https://signals-threads.simplecast.com/episodes/performance-engineering-on-hard-mode-with-andrew-hunter-fxhCMIkB Kubernetes Tutorial: Container vs. Pod vs. Deployment vs. StatefulSet \u0026amp; More - https://www.youtube.com/watch?v=4MEgCP7h8UU Kubernetes Tutorial: Container vs. Pod vs. Deployment vs. StatefulSet \u0026amp; More - https://www.youtube.com/watch?v=4MEgCP7h8UU Announcing Rust 1.75.0 - https://blog.rust-lang.org/2023/12/28/Rust-1.75.0.html A Machine Learning Primer: How to Build an ML Model - https://www.youtube.com/watch?v=Vx2DpMgplEM The value of canonicity - https://building.nubank.com.br/the-value-of-canonicity/ An introduction to the basic principles of Functional Programming - https://www.iamtk.co/an-introduction-to-the-basic-principles-of-functional-programming ","permalink":"https://poorlydefinedbehaviour.github.io/posts/reading_list_2023/","summary":"\u003ch1 id=\"the-list-of-things-i-read-or-watched-in-2023\"\u003eThe list of things I read or watched in 2023\u003c/h1\u003e\n\u003ch2 id=\"january\"\u003eJanuary\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperator pattern - \u003ca href=\"https://kubernetes.io/docs/concepts/extend-kubernetes/operator/\"\u003ehttps://kubernetes.io/docs/concepts/extend-kubernetes/operator/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eControllers - \u003ca href=\"https://kubernetes.io/docs/concepts/architecture/controller/\"\u003ehttps://kubernetes.io/docs/concepts/architecture/controller/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eIntroducing Operators: Putting Operational Knowledge into Software - \u003ca href=\"https://web.archive.org/web/20170129131616/https://coreos.com/blog/introducing-operators.html\"\u003ehttps://web.archive.org/web/20170129131616/https://coreos.com/blog/introducing-operators.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eBest practices for building Kubernetes Operators and stateful apps - \u003ca href=\"https://cloud.google.com/blog/products/containers-kubernetes/best-practices-for-building-kubernetes-operators-and-stateful-apps\"\u003ehttps://cloud.google.com/blog/products/containers-kubernetes/best-practices-for-building-kubernetes-operators-and-stateful-apps\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eCNCF Operator WHITE PAPER - \u003ca href=\"https://www.cncf.io/wp-content/uploads/2021/07/CNCF_Operator_WhitePaper.pdf\"\u003ehttps://www.cncf.io/wp-content/uploads/2021/07/CNCF_Operator_WhitePaper.pdf\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhy do we need a Database Connection Pool? -every programmer must know - \u003ca href=\"https://medium.com/javarevisited/why-do-we-need-a-database-connection-pool-every-programmer-must-know-9f90e7c8e5af\"\u003ehttps://medium.com/javarevisited/why-do-we-need-a-database-connection-pool-every-programmer-must-know-9f90e7c8e5af\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDifference in String pool between Java 6 and 7? Answer - \u003ca href=\"https://javarevisited.blogspot.com/2016/07/difference-in-string-pool-between-java6-java7.html\"\u003ehttps://javarevisited.blogspot.com/2016/07/difference-in-string-pool-between-java6-java7.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eA deep dive into Kubernetes controllers - \u003ca href=\"https://docs.bitnami.com/tutorials/a-deep-dive-into-kubernetes-controllers\"\u003ehttps://docs.bitnami.com/tutorials/a-deep-dive-into-kubernetes-controllers\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhat is eBPF, anyway, and why should Kubernetes admins care? - \u003ca href=\"https://www.groundcover.com/blog/what-is-ebpf\"\u003ehttps://www.groundcover.com/blog/what-is-ebpf\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhat I learnt about Kubernetes Controllers - \u003ca href=\"https://fntlnz.wtf/post/what-i-learnt-about-kubernetes-controller/\"\u003ehttps://fntlnz.wtf/post/what-i-learnt-about-kubernetes-controller/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e[Backend #56] Why you should send async tasks to Redis within a DB transaction - \u003ca href=\"https://www.youtube.com/watch?v=ZfFxdPbgN88\"\u003ehttps://www.youtube.com/watch?v=ZfFxdPbgN88\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eCmputer Networking (Deepdive) - \u003ca href=\"https://www.youtube.com/watch?v=6G14NrjekLQ\"\u003ehttps://www.youtube.com/watch?v=6G14NrjekLQ\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eGrafana k8s rollout-operator code walkthrough - \u003ca href=\"https://github.com/grafana/rollout-operator\"\u003ehttps://github.com/grafana/rollout-operator\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWe migrated to Rust, but what did we gain? - \u003ca href=\"https://bytebaker.medium.com/we-migrated-to-rust-but-what-did-we-gain-1429d036d0c\"\u003ehttps://bytebaker.medium.com/we-migrated-to-rust-but-what-did-we-gain-1429d036d0c\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eCAP Theorem Simplified | System Design Fundamentals - \u003ca href=\"https://www.youtube.com/watch?v=BHqjEjzAicA\"\u003ehttps://www.youtube.com/watch?v=BHqjEjzAicA\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eOperational Use case Patterns for Apache Kafka and Flink — Part 1 - \u003ca href=\"https://medium.com/event-driven-utopia/operational-use-case-patterns-for-apache-kafka-and-flink-part-1-5a0f8742df90\"\u003ehttps://medium.com/event-driven-utopia/operational-use-case-patterns-for-apache-kafka-and-flink-part-1-5a0f8742df90\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSTATE MACHINES III: TYPE STATES - \u003ca href=\"https://blog.yoshuawuyts.com/state-machines-3/\"\u003ehttps://blog.yoshuawuyts.com/state-machines-3/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow SQLite Scales Read Concurrency - \u003ca href=\"https://fly.io/blog/sqlite-internals-wal/\"\u003ehttps://fly.io/blog/sqlite-internals-wal/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow JPMorgan Chase uses Grafana and AI to monitor SLOs, SLIs, and more - \u003ca href=\"https://grafana.com/blog/2023/01/03/how-jpmorgan-chase-uses-grafana-and-ai-to-monitor-slos-slis-and-more/?mdm=social\"\u003ehttps://grafana.com/blog/2023/01/03/how-jpmorgan-chase-uses-grafana-and-ai-to-monitor-slos-slis-and-more/?mdm=social\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eRust Case Study: Community makes Rust an easy choice for npm - \u003ca href=\"https://www.rust-lang.org/static/pdfs/Rust-npm-Whitepaper.pdf\"\u003ehttps://www.rust-lang.org/static/pdfs/Rust-npm-Whitepaper.pdf\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eBryan Cantrill on What’s Next for Infrastructure, Open Source \u0026amp; Rust - \u003ca href=\"https://www.scylladb.com/2023/01/04/bryan-cantrill-on-whats-next-for-infrastructure-open-source-rust/\"\u003ehttps://www.scylladb.com/2023/01/04/bryan-cantrill-on-whats-next-for-infrastructure-open-source-rust/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eCQRS - \u003ca href=\"https://martinfowler.com/bliki/CQRS.html\"\u003ehttps://martinfowler.com/bliki/CQRS.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow to Use PHP Extensions - \u003ca href=\"https://www.zend.com/blog/php-development-using-php-extensions#:~:text=Why%20Use%20PHP%20Extensions%3F,to%20your%20application%27s%20PHP%20binary\"\u003ehttps://www.zend.com/blog/php-development-using-php-extensions#:~:text=Why%20Use%20PHP%20Extensions%3F,to%20your%20application's%20PHP%20binary\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003eSeastar: The future\u0026lt;\u0026gt; is Here - \u003ca href=\"https://seastar.io/blog/2018/02/seastar-the-future-is-here/\"\u003ehttps://seastar.io/blog/2018/02/seastar-the-future-is-here/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSeastar: Futures and Promises - \u003ca href=\"https://seastar.io/futures-promises/\"\u003ehttps://seastar.io/futures-promises/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eContinuations Made Simple and Illustrated Denys Duchier - \u003ca href=\"https://www.ps.uni-saarland.de/~duchier/python/continuations.html\"\u003ehttps://www.ps.uni-saarland.de/~duchier/python/continuations.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e10 Things I wish I’d known before building a Kubernetes CRD controller - \u003ca href=\"https://omerxx.com/k8s-controllers/\"\u003ehttps://omerxx.com/k8s-controllers/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eExtend Kubernetes via a shared informer - \u003ca href=\"https://www.cncf.io/blog/2019/10/15/extend-kubernetes-via-a-shared-informer/\"\u003ehttps://www.cncf.io/blog/2019/10/15/extend-kubernetes-via-a-shared-informer/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eEvent Sourcing - \u003ca href=\"https://medium.com/ssense-tech/event-sourcing-part-i-understanding-what-it-is-core-components-and-common-misconceptions-5dec65f6d61\"\u003ehttps://medium.com/ssense-tech/event-sourcing-part-i-understanding-what-it-is-core-components-and-common-misconceptions-5dec65f6d61\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe Kubernetes dynamic client - \u003ca href=\"https://caiorcferreira.github.io/post/the-kubernetes-dynamic-client/\"\u003ehttps://caiorcferreira.github.io/post/the-kubernetes-dynamic-client/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eGo (Golang) vs Node JS (Microservices) performance benchmark (Istio - Prometheus - Grafana) - \u003ca href=\"https://www.youtube.com/watch?v=ntMKNlESCpM\"\u003ehttps://www.youtube.com/watch?v=ntMKNlESCpM\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMonitoring on steroids: How JPMorgan Chase uses Grafana for their trading platform to spot issues quickly and proactively - \u003ca href=\"https://grafana.com/go/observabilitycon/2022/monitoring-on-steroids-how-jpmorgan-chase-uses-grafana-for-their-trading-platform-to-spot-issues-quickly-and-proactively/?pg=blog\u0026amp;plcmt=body-txt\"\u003ehttps://grafana.com/go/observabilitycon/2022/monitoring-on-steroids-how-jpmorgan-chase-uses-grafana-for-their-trading-platform-to-spot-issues-quickly-and-proactively/?pg=blog\u0026plcmt=body-txt\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe Kubernetes Operator Framework Book - \u003ca href=\"https://www.amazon.com/Kubernetes-Operator-Framework-Book-management/dp/1803232854\"\u003ehttps://www.amazon.com/Kubernetes-Operator-Framework-Book-management/dp/1803232854\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ePractical Networked Applications in Rust, Part 1: Non-Networked Key-Value Store - \u003ca href=\"https://arveknudsen.com/posts/practical-networked-applications-in-rust/module-1/\"\u003ehttps://arveknudsen.com/posts/practical-networked-applications-in-rust/module-1/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSimple leader election with Kubernetes and Docker - \u003ca href=\"https://kubernetes.io/blog/2016/01/simple-leader-election-with-kubernetes/\"\u003ehttps://kubernetes.io/blog/2016/01/simple-leader-election-with-kubernetes/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eLeader election in Kubernetes using client-go - \u003ca href=\"https://itnext.io/leader-election-in-kubernetes-using-client-go-a19cbe7a9a85\"\u003ehttps://itnext.io/leader-election-in-kubernetes-using-client-go-a19cbe7a9a85\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eUnderstanding lockForUpdate and sharedLock in Laravel - \u003ca href=\"https://blog.renoki.org/understanding-lockforupdate-and-sharedlock-in-laravel\"\u003ehttps://blog.renoki.org/understanding-lockforupdate-and-sharedlock-in-laravel\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eKubebuilder book - \u003ca href=\"https://book.kubebuilder.io/introduction.html\"\u003ehttps://book.kubebuilder.io/introduction.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe Future of the Web is on the Edge - \u003ca href=\"https://deno.com/blog/the-future-of-web-is-on-the-edge\"\u003ehttps://deno.com/blog/the-future-of-web-is-on-the-edge\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHashicorp: Operating Cadence - \u003ca href=\"https://works.hashicorp.com/articles/operating-cadence\"\u003ehttps://works.hashicorp.com/articles/operating-cadence\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eKubernetes docs: Leases - \u003ca href=\"https://kubernetes.io/docs/concepts/architecture/leases/\"\u003ehttps://kubernetes.io/docs/concepts/architecture/leases/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow to get started with K8s contributions - \u003ca href=\"https://abhii85.hashnode.dev/how-to-get-started-with-k8s-contributions\"\u003ehttps://abhii85.hashnode.dev/how-to-get-started-with-k8s-contributions\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAmazon builder\u0026rsquo;s library: Leader Election in Distributed Systems - \u003ca href=\"https://aws.amazon.com/builders-library/leader-election-in-distributed-systems/\"\u003ehttps://aws.amazon.com/builders-library/leader-election-in-distributed-systems/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhat is leader election in distributed systems? -https://www.enjoyalgorithms.com/blog/leader-election-system-design\u003c/li\u003e\n\u003cli\u003eAzure: Leader Election pattern - \u003ca href=\"https://learn.microsoft.com/en-us/azure/architecture/patterns/leader-election\"\u003ehttps://learn.microsoft.com/en-us/azure/architecture/patterns/leader-election\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eElastic: Leader Election, Why Should I Care? - \u003ca href=\"https://www.elastic.co/blog/found-leader-election-in-general\"\u003ehttps://www.elastic.co/blog/found-leader-election-in-general\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eKeep Your Cache Always Fresh with Debezium! by Gunnar Morling - \u003ca href=\"https://www.youtube.com/watch?v=zOOFMHAjoPI\"\u003ehttps://www.youtube.com/watch?v=zOOFMHAjoPI\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eevery good programmer should know how to code this data structure (its easy) - \u003ca href=\"https://www.youtube.com/watch?v=dti0F7w3yOQ\"\u003ehttps://www.youtube.com/watch?v=dti0F7w3yOQ\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eNginx vs Traefik performance benchmark (HTTP - HTTPS - gRPC | Latency - CPU - Memory | Prometheus) - \u003ca href=\"https://www.youtube.com/watch?v=bgcfEW_Yh7E\"\u003ehttps://www.youtube.com/watch?v=bgcfEW_Yh7E\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eComparing Optimistic and Pessimistic Locking With GO and PostgreSQL - \u003ca href=\"https://hackernoon.com/comparing-optimistic-and-pessimistic-locking-with-go-and-postgresql\"\u003ehttps://hackernoon.com/comparing-optimistic-and-pessimistic-locking-with-go-and-postgresql\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eImplementing Your Own Transactions with MVCC - \u003ca href=\"https://levelup.gitconnected.com/implementing-your-own-transactions-with-mvcc-bba11cab8e70\"\u003ehttps://levelup.gitconnected.com/implementing-your-own-transactions-with-mvcc-bba11cab8e70\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTransactional memory - \u003ca href=\"https://en.wikipedia.org/wiki/Transactional_memory\"\u003ehttps://en.wikipedia.org/wiki/Transactional_memory\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMultiversion concurrency control - \u003ca href=\"https://en.wikipedia.org/wiki/Multiversion_concurrency_control\"\u003ehttps://en.wikipedia.org/wiki/Multiversion_concurrency_control\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eBi-Directional Streaming With GRPC In Golang - \u003ca href=\"https://www.youtube.com/watch?v=IHQNiQlQVXo\"\u003ehttps://www.youtube.com/watch?v=IHQNiQlQVXo\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow does videogame AI make its decisions? (FSM, Behaviour Trees, BDI, GOAP) | Bitwise - \u003ca href=\"https://www.youtube.com/watch?v=ValJk15l_y8\"\u003ehttps://www.youtube.com/watch?v=ValJk15l_y8\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eBully algorithm - \u003ca href=\"https://en.wikipedia.org/wiki/Bully_algorithm\"\u003ehttps://en.wikipedia.org/wiki/Bully_algorithm\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow Amazon grew an awkward side project into AWS, a behemoth that’s now 4 times bigger than its original shopping business - \u003ca href=\"https://fortune-com.cdn.ampproject.org/c/s/fortune.com/longform/amazon-web-services-ceo-adam-selipsky-cloud-computing/amp/\"\u003ehttps://fortune-com.cdn.ampproject.org/c/s/fortune.com/longform/amazon-web-services-ceo-adam-selipsky-cloud-computing/amp/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAchieving idempotency in the AWS serverless space - \u003ca href=\"https://qasimalbaqali.medium.com/achieving-idempotency-in-the-aws-serverless-space-d0671a521479\"\u003ehttps://qasimalbaqali.medium.com/achieving-idempotency-in-the-aws-serverless-space-d0671a521479\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eRing network - \u003ca href=\"https://en.wikipedia.org/wiki/Ring_network\"\u003ehttps://en.wikipedia.org/wiki/Ring_network\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eZookeeper Atomic Broadcast Protocol (ZAB) and implementation of Zookeeper. - \u003ca href=\"https://www.cloudkarafka.com/blog/cloudkarafka-zab.html#:~:text=What%20is%20ZAB%20%28Zookeeper%20Atomic,restoration%20of%20any%20failed%20nodes\"\u003ehttps://www.cloudkarafka.com/blog/cloudkarafka-zab.html#:~:text=What%20is%20ZAB%20(Zookeeper%20Atomic,restoration%20of%20any%20failed%20nodes\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003eScaling a Monolith with 5 Different Patterns - \u003ca href=\"https://www.youtube.com/watch?v=rSCDuZLP9UM\"\u003ehttps://www.youtube.com/watch?v=rSCDuZLP9UM\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhat is Apache Pinot? (and User-Facing Analytics) | A StarTree Lightboard by Tim Berglund - \u003ca href=\"https://www.youtube.com/watch?v=_lqdfq2c9cQ\"\u003ehttps://www.youtube.com/watch?v=_lqdfq2c9cQ\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSplit-brain, Quorum, and Fencing - \u003ca href=\"https://techthoughts.typepad.com/managing_computers/2007/10/split-brain-quo.html\"\u003ehttps://techthoughts.typepad.com/managing_computers/2007/10/split-brain-quo.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhat Is Progressive Delivery All About? - \u003ca href=\"https://launchdarkly.com/blog/what-is-progressive-delivery-all-about/\"\u003ehttps://launchdarkly.com/blog/what-is-progressive-delivery-all-about/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eInstalling OpenTelemetry On Kubernetes - \u003ca href=\"https://www.youtube.com/watch?v=D6XtpSCH3Nk\"\u003ehttps://www.youtube.com/watch?v=D6XtpSCH3Nk\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eZero Allocations And Benchmarking In Golang - \u003ca href=\"https://www.youtube.com/watch?v=QFGbTOsk-Bk\"\u003ehttps://www.youtube.com/watch?v=QFGbTOsk-Bk\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMySQL Performance Benchmarking: MySQL 5.7 vs MySQL 8.0 - \u003ca href=\"https://severalnines.com/blog/mysql-performance-benchmarking-mysql-57-vs-mysql-80/\"\u003ehttps://severalnines.com/blog/mysql-performance-benchmarking-mysql-57-vs-mysql-80/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eCharset and Collation Settings Impact on MySQL Performance - \u003ca href=\"https://www.percona.com/blog/2019/02/27/charset-and-collation-settings-impact-on-mysql-performance/\"\u003ehttps://www.percona.com/blog/2019/02/27/charset-and-collation-settings-impact-on-mysql-performance/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe Engineers Are Bloggers Now - \u003ca href=\"https://www.nytimes.com/2023/01/07/business/uber-engineer-bloggers.html?unlocked_article_code=dzR4qpOXZ8gpfTTyCkq7xitIcXbyR5k9QmIlBgqWzUKcht9wVo8LVAOTuoFkc3eKTkHzZYAMKrFy63GAJ_wyh_yraHRAjn3xMn43WeGSmpasESxUmHz5WSgIZZ-d2OrLewYrgI2szmSVuinQpxLxVvMm88ej6KLcdofzxNliV7OS2cwfYZtwbULf_OB2FGbsOZD2NsN2yUumaj21jRA84mtfllfLLtjaX62E342K8SQU1NpWeWw4EHDEpx3t1AEc8wbcmzaFtG_TeNy6yIWIyzKMkQLq2CAuc8_5e6m_EC9sl0zZyut7b1a9kG_0xEaOnZLl4vNwBuZXl7tSMiNdrxk\u0026amp;smid=share-url\"\u003ehttps://www.nytimes.com/2023/01/07/business/uber-engineer-bloggers.html?unlocked_article_code=dzR4qpOXZ8gpfTTyCkq7xitIcXbyR5k9QmIlBgqWzUKcht9wVo8LVAOTuoFkc3eKTkHzZYAMKrFy63GAJ_wyh_yraHRAjn3xMn43WeGSmpasESxUmHz5WSgIZZ-d2OrLewYrgI2szmSVuinQpxLxVvMm88ej6KLcdofzxNliV7OS2cwfYZtwbULf_OB2FGbsOZD2NsN2yUumaj21jRA84mtfllfLLtjaX62E342K8SQU1NpWeWw4EHDEpx3t1AEc8wbcmzaFtG_TeNy6yIWIyzKMkQLq2CAuc8_5e6m_EC9sl0zZyut7b1a9kG_0xEaOnZLl4vNwBuZXl7tSMiNdrxk\u0026smid=share-url\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eA better domain events pattern - \u003ca href=\"https://lostechies.com/jimmybogard/2014/05/13/a-better-domain-events-pattern/\"\u003ehttps://lostechies.com/jimmybogard/2014/05/13/a-better-domain-events-pattern/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTransactional Outbox pattern with Azure Cosmos DB - \u003ca href=\"https://learn.microsoft.com/en-us/azure/architecture/best-practices/transactional-outbox-cosmos\"\u003ehttps://learn.microsoft.com/en-us/azure/architecture/best-practices/transactional-outbox-cosmos\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eGenerational indices guide - \u003ca href=\"https://lucassardois.medium.com/generational-indices-guide-8e3c5f7fd594\"\u003ehttps://lucassardois.medium.com/generational-indices-guide-8e3c5f7fd594\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhat is Computational Storage? - \u003ca href=\"https://www.youtube.com/watch?v=lCuJnhZaTv8\"\u003ehttps://www.youtube.com/watch?v=lCuJnhZaTv8\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eData sovereignty is the future of cloud - \u003ca href=\"https://redpanda.com/blog/kafka-redpanda-future\"\u003ehttps://redpanda.com/blog/kafka-redpanda-future\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe Weekend Read - Issue #2 - \u003ca href=\"https://dtornow225.substack.com/p/the-weekend-read-issue-2-961455\"\u003ehttps://dtornow225.substack.com/p/the-weekend-read-issue-2-961455\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow we built Shadow Indexing, the subsystem powering Redpanda’s tiered storage capabilities - \u003ca href=\"https://redpanda.com/blog/tiered-storage-architecture-shadow-indexing-deep-dive\"\u003ehttps://redpanda.com/blog/tiered-storage-architecture-shadow-indexing-deep-dive\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAnnouncing Rust 1.66.1 - \u003ca href=\"https://blog.rust-lang.org/2023/01/10/Rust-1.66.1.html\"\u003ehttps://blog.rust-lang.org/2023/01/10/Rust-1.66.1.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eProgram counter - \u003ca href=\"https://en.wikipedia.org/wiki/Program_counter\"\u003ehttps://en.wikipedia.org/wiki/Program_counter\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eVon Neumann architecture - \u003ca href=\"https://en.wikipedia.org/wiki/Von_Neumann_architecture\"\u003ehttps://en.wikipedia.org/wiki/Von_Neumann_architecture\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAVI Networks: Subnet Mask - \u003ca href=\"https://avinetworks.com/glossary/subnet-mask/\"\u003ehttps://avinetworks.com/glossary/subnet-mask/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eScheduling In Go : Part I - OS Scheduler - \u003ca href=\"https://www.ardanlabs.com/blog/2018/08/scheduling-in-go-part1.html\"\u003ehttps://www.ardanlabs.com/blog/2018/08/scheduling-in-go-part1.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSimplifying Redpanda Raft implementation - \u003ca href=\"https://redpanda.com/blog/simplifying-raft-replication-in-redpanda\"\u003ehttps://redpanda.com/blog/simplifying-raft-replication-in-redpanda\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSet up and observe a Spring Boot application with Grafana Cloud, Prometheus, and OpenTelemetry - \u003ca href=\"https://grafana.com/blog/2022/04/26/set-up-and-observe-a-spring-boot-application-with-grafana-cloud-prometheus-and-opentelemetry/\"\u003ehttps://grafana.com/blog/2022/04/26/set-up-and-observe-a-spring-boot-application-with-grafana-cloud-prometheus-and-opentelemetry/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAnnouncing Grafana Mimir, the most scalable open source TSDB in the world - \u003ca href=\"https://grafana.com/blog/2022/03/30/announcing-grafana-mimir/\"\u003ehttps://grafana.com/blog/2022/03/30/announcing-grafana-mimir/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e1 Problem, 24 Programming Languages - \u003ca href=\"https://www.youtube.com/watch?v=U6I-Kwj-AvY\"\u003ehttps://www.youtube.com/watch?v=U6I-Kwj-AvY\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u0026ldquo;I Became A Programmer By Mistake\u0026rdquo; Says the Creator of C++ 🫢 - \u003ca href=\"https://www.youtube.com/watch?v=OQZhHHq3p1I\"\u003ehttps://www.youtube.com/watch?v=OQZhHHq3p1I\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eKubernetes Explained in 6 Minutes | k8s Architecture - \u003ca href=\"https://www.youtube.com/watch?v=TlHvYWVUZyc\"\u003ehttps://www.youtube.com/watch?v=TlHvYWVUZyc\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhy innodb_file_per_table is important - \u003ca href=\"https://www.catalyst2.com/knowledgebase/server-management/why-innodb_file_per_table-is-important/#:~:text=The%20innodb_file_per_table%20setting%20defines%20how,to%20%E2%80%9Con%E2%80%9D%20by%20default\"\u003ehttps://www.catalyst2.com/knowledgebase/server-management/why-innodb_file_per_table-is-important/#:~:text=The%20innodb_file_per_table%20setting%20defines%20how,to%20%E2%80%9Con%E2%80%9D%20by%20default\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003eGCP MySQL: Operational guidelines - \u003ca href=\"https://cloud.google.com/sql/docs/mysql/operational-guidelines\"\u003ehttps://cloud.google.com/sql/docs/mysql/operational-guidelines\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eYou DON\u0026rsquo;T want an In-Memory Event Bus like MediatR - \u003ca href=\"https://www.youtube.com/watch?v=KCvsk5tTP3w\"\u003ehttps://www.youtube.com/watch?v=KCvsk5tTP3w\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eBuffered VS UnBuffered Channels In Golang - \u003ca href=\"https://www.youtube.com/watch?v=HLGrvgbo-Yk\"\u003ehttps://www.youtube.com/watch?v=HLGrvgbo-Yk\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eProxySQL, a Google Cloud Platform alternative to SQL database management - \u003ca href=\"https://www.makingscience.com/blog/proxysql-a-google-cloud-platform-gcp-alternative-to-sql-database-management/\"\u003ehttps://www.makingscience.com/blog/proxysql-a-google-cloud-platform-gcp-alternative-to-sql-database-management/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow we achieved MySQL High Availability using ProxySQL - \u003ca href=\"https://exotel.com/blog/achieving-mysql-high-availability-proxysql/\"\u003ehttps://exotel.com/blog/achieving-mysql-high-availability-proxysql/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAWS Lambda now supports Maximum Concurrency for Amazon SQS as an event source - \u003ca href=\"https://aws.amazon.com/about-aws/whats-new/2023/01/aws-lambda-maximum-concurrency-amazon-sqs-event-source/\"\u003ehttps://aws.amazon.com/about-aws/whats-new/2023/01/aws-lambda-maximum-concurrency-amazon-sqs-event-source/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eKRaft: Apache Kafka Without ZooKeeper - \u003ca href=\"https://developer.confluent.io/learn/kraft/\"\u003ehttps://developer.confluent.io/learn/kraft/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eIntroduction to Amazon RDS Multi-AZ deployments | Amazon Web Services - \u003ca href=\"https://www.youtube.com/watch?v=_MROZtLtCcA\"\u003ehttps://www.youtube.com/watch?v=_MROZtLtCcA\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eRust Powered Polymorphism ⚡️ With Traits - \u003ca href=\"https://www.youtube.com/watch?v=CHRNj5oubwc\"\u003ehttps://www.youtube.com/watch?v=CHRNj5oubwc\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eUsing an /etc/hosts file for custom domains during development - \u003ca href=\"https://support-acquia.force.com/s/article/360004175973-Using-an-etc-hosts-file-for-custom-domains-during-development#:~:text=The%20%2Fetc%2Fhosts%20file%20contains,before%20making%20a%20website%20live\"\u003ehttps://support-acquia.force.com/s/article/360004175973-Using-an-etc-hosts-file-for-custom-domains-during-development#:~:text=The%20%2Fetc%2Fhosts%20file%20contains,before%20making%20a%20website%20live\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003eWhat is Process Mining? - \u003ca href=\"https://www.youtube.com/watch?v=5thuFbUQ7Qg\"\u003ehttps://www.youtube.com/watch?v=5thuFbUQ7Qg\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eGo (Golang) vs Java performance benchmark (Fiber vs Spring Boot | Prometheus | Minio | MongoDB) - \u003ca href=\"https://www.youtube.com/watch?v=8CiErLxdaA8\"\u003ehttps://www.youtube.com/watch?v=8CiErLxdaA8\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSupporting the Use of Rust in the Chromium Project - \u003ca href=\"https://security.googleblog.com/2023/01/supporting-use-of-rust-in-chromium.html\"\u003ehttps://security.googleblog.com/2023/01/supporting-use-of-rust-in-chromium.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe Rule Of 2 - \u003ca href=\"https://chromium.googlesource.com/chromium/src/\u0026#43;/master/docs/security/rule-of-2.md\"\u003ehttps://chromium.googlesource.com/chromium/src/+/master/docs/security/rule-of-2.md\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eControllers and Operators - \u003ca href=\"https://joshrosso.com/docs/2019/2019-10-13-controllers-and-operators/\"\u003ehttps://joshrosso.com/docs/2019/2019-10-13-controllers-and-operators/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eFear and Loathing in Lock-Free Programming - \u003ca href=\"https://medium.com/@tylerneely/fear-and-loathing-in-lock-free-programming-7158b1cdd50c\"\u003ehttps://medium.com/@tylerneely/fear-and-loathing-in-lock-free-programming-7158b1cdd50c\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow To Avoid Locks (Mutex) In Your Golang Programs? - \u003ca href=\"https://www.youtube.com/watch?v=Ya5KRFrwPug\"\u003ehttps://www.youtube.com/watch?v=Ya5KRFrwPug\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eArchitecture Pitfalls: Don’t use your ORM entities for everything — embrace the SQL! - \u003ca href=\"https://www.blackparrotlabs.io/post/architecture-pitfalls-dont-use-your-orm-entities-for-everything\"\u003ehttps://www.blackparrotlabs.io/post/architecture-pitfalls-dont-use-your-orm-entities-for-everything\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSingle Writer Principle - \u003ca href=\"https://mechanical-sympathy.blogspot.com/2011/09/single-writer-principle.html\"\u003ehttps://mechanical-sympathy.blogspot.com/2011/09/single-writer-principle.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003estart to your hacking journey with this video (reverse engineering is IMPORTANT) - \u003ca href=\"https://www.youtube.com/watch?v=gh2RXE9BIN8\"\u003ehttps://www.youtube.com/watch?v=gh2RXE9BIN8\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTest-and-set spinlocks - \u003ca href=\"https://geidav.wordpress.com/2016/03/23/test-and-set-spinlocks/\"\u003ehttps://geidav.wordpress.com/2016/03/23/test-and-set-spinlocks/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAsync IO on Linux: select, poll, and epoll - \u003ca href=\"https://jvns.ca/blog/2017/06/03/async-io-on-linux--select--poll--and-epoll/\"\u003ehttps://jvns.ca/blog/2017/06/03/async-io-on-linux--select--poll--and-epoll/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTransactions in MongoDB, Cassandra, Zookeeper and others - \u003ca href=\"http://rystsov.info/2012/09/01/cas.html\"\u003ehttp://rystsov.info/2012/09/01/cas.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWriting Kubernetes Custom Controllers - \u003ca href=\"https://cloudark.medium.com/kubernetes-custom-controllers-b6c7d0668fdf\"\u003ehttps://cloudark.medium.com/kubernetes-custom-controllers-b6c7d0668fdf\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow To Use A Bytes Buffer In Golang And Make It Even Better? - \u003ca href=\"https://www.youtube.com/watch?v=ENxfg9rS5dc\"\u003ehttps://www.youtube.com/watch?v=ENxfg9rS5dc\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eRustFest Paris 2018: Building Reliable Infrastructure in Rust by Tyler Neely - \u003ca href=\"https://www.youtube.com/watch?v=hMJEPWcSD8w\"\u003ehttps://www.youtube.com/watch?v=hMJEPWcSD8w\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eEnable Cross-Account Observability in Amazon CloudWatch | Amazon Web Services - \u003ca href=\"https://www.youtube.com/watch?v=lUaDO9dqISc\"\u003ehttps://www.youtube.com/watch?v=lUaDO9dqISc\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e01 - History of Databases (CMU Databases / Spring 2020) - \u003ca href=\"https://www.youtube.com/watch?v=SdW5RKUboKc\"\u003ehttps://www.youtube.com/watch?v=SdW5RKUboKc\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eStrategies To Detect and Respond To Failures in Cloud Applications - \u003ca href=\"https://www.youtube.com/watch?v=NRlGeVTDpGU\"\u003ehttps://www.youtube.com/watch?v=NRlGeVTDpGU\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eNginx vs Apache HTTP Server performance benchmark (Prometheus | HTTP | HTTPS | Grafana | Ansible) - \u003ca href=\"https://www.youtube.com/watch?v=Fx8afVZJLd4\"\u003ehttps://www.youtube.com/watch?v=Fx8afVZJLd4\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e01 - Course Introduction \u0026amp; Relational Model (CMU Intro to Database Systems / Fall 2021) - \u003ca href=\"https://www.youtube.com/watch?v=v4bU6n97Vr8\u0026amp;list=PLSE8ODhjZXjZaHA6QcxDfJ0SIWBzQFKEG\"\u003ehttps://www.youtube.com/watch?v=v4bU6n97Vr8\u0026list=PLSE8ODhjZXjZaHA6QcxDfJ0SIWBzQFKEG\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ePerformance Schema: Great Power Comes Without Great Cost - \u003ca href=\"https://dev.mysql.com/blog-archive/performance-schema-great-power-comes-without-great-cost/\"\u003ehttps://dev.mysql.com/blog-archive/performance-schema-great-power-comes-without-great-cost/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMySQL Connection Handling and Scaling - \u003ca href=\"https://dev.mysql.com/blog-archive/mysql-connection-handling-and-scaling/\"\u003ehttps://dev.mysql.com/blog-archive/mysql-connection-handling-and-scaling/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eOn connections - \u003ca href=\"https://dom.as/2011/08/28/mysql-connection-accept-speed/\"\u003ehttps://dom.as/2011/08/28/mysql-connection-accept-speed/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eKubernetes docs: Considerations for large clusters - \u003ca href=\"https://kubernetes.io/docs/setup/best-practices/cluster-large/#:~:text=No%20more%20than%20300%2C000%20total%20containers\"\u003ehttps://kubernetes.io/docs/setup/best-practices/cluster-large/#:~:text=No%20more%20than%20300%2C000%20total%20containers\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe evolution of software compliance and accreditation in the Department of Defense - \u003ca href=\"https://assets.website-files.com/6030224cd6bd6639e9d922c9/6398ad388c573712eb14d3b4_White%20Paper_%20Evolution%20of%20Software%20Compliance%20%26%20Accreditation%20in%20DoD.pdf\"\u003ehttps://assets.website-files.com/6030224cd6bd6639e9d922c9/6398ad388c573712eb14d3b4_White%20Paper_%20Evolution%20of%20Software%20Compliance%20%26%20Accreditation%20in%20DoD.pdf\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eQUERYING PROMETHEUS - \u003ca href=\"https://prometheus.io/docs/prometheus/latest/querying/basics/#expression-language-data-types\"\u003ehttps://prometheus.io/docs/prometheus/latest/querying/basics/#expression-language-data-types\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eIntroducing LiteFS - \u003ca href=\"https://fly.io/blog/introducing-litefs/\"\u003ehttps://fly.io/blog/introducing-litefs/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ePrometheus: METRIC TYPES - \u003ca href=\"https://prometheus.io/docs/concepts/metric_types/\"\u003ehttps://prometheus.io/docs/concepts/metric_types/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ePrometheus: DATA MODEL - \u003ca href=\"https://prometheus.io/docs/concepts/data_model/\"\u003ehttps://prometheus.io/docs/concepts/data_model/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eBasics and best practices for getting started with PromQL - \u003ca href=\"https://grafana.com/blog/2021/01/29/basics-and-best-practices-for-getting-started-with-promql/\"\u003ehttps://grafana.com/blog/2021/01/29/basics-and-best-practices-for-getting-started-with-promql/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eNew in Grafana 9: The Prometheus query builder makes writing PromQL queries easier - \u003ca href=\"https://grafana.com/blog/2022/07/18/new-in-grafana-9-the-prometheus-query-builder-makes-writing-promql-queries-easier/\"\u003ehttps://grafana.com/blog/2022/07/18/new-in-grafana-9-the-prometheus-query-builder-makes-writing-promql-queries-easier/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eExploring Prometheus Go client metrics - \u003ca href=\"https://povilasv.me/prometheus-go-metrics/\"\u003ehttps://povilasv.me/prometheus-go-metrics/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ePrometheus: HISTOGRAMS AND SUMMARIES - \u003ca href=\"https://prometheus.io/docs/practices/histograms/\"\u003ehttps://prometheus.io/docs/practices/histograms/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ePrometheus: TYPES OF METRICS.- \u003ca href=\"https://prometheus.io/docs/tutorials/understanding_metric_types/\"\u003ehttps://prometheus.io/docs/tutorials/understanding_metric_types/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eConsensus Protocols: Two-Phase Commit - \u003ca href=\"https://www.the-paper-trail.org/post/2008-11-27-consensus-protocols-two-phase-commit/\"\u003ehttps://www.the-paper-trail.org/post/2008-11-27-consensus-protocols-two-phase-commit/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow summary metrics work in Prometheus - \u003ca href=\"https://grafana.com/blog/2022/03/01/how-summary-metrics-work-in-prometheus/\"\u003ehttps://grafana.com/blog/2022/03/01/how-summary-metrics-work-in-prometheus/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eElastic Cloud Services: Scaling Snowflake’s Control Plane - \u003ca href=\"https://www.micahlerner.com/2023/01/19/elastic-cloud-services-scaling-snowflakes-control-plane.html\"\u003ehttps://www.micahlerner.com/2023/01/19/elastic-cloud-services-scaling-snowflakes-control-plane.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow we clone a running VM in 2 seconds - \u003ca href=\"https://codesandbox.io/blog/how-we-clone-a-running-vm-in-2-seconds\"\u003ehttps://codesandbox.io/blog/how-we-clone-a-running-vm-in-2-seconds\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSneaking By The Rust Borrow Checker - Interior Mutability - \u003ca href=\"https://www.youtube.com/watch?v=HwupNf9iCJk\"\u003ehttps://www.youtube.com/watch?v=HwupNf9iCJk\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eNoisy Neighbor antipattern - \u003ca href=\"https://learn.microsoft.com/en-us/azure/architecture/antipatterns/noisy-neighbor/noisy-neighbor\"\u003ehttps://learn.microsoft.com/en-us/azure/architecture/antipatterns/noisy-neighbor/noisy-neighbor\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow Recommender Systems Work (Netflix/Amazon) - \u003ca href=\"https://www.youtube.com/watch?v=n3RKsY2H-NE\"\u003ehttps://www.youtube.com/watch?v=n3RKsY2H-NE\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eCollaborative Filtering - \u003ca href=\"https://developers.google.com/machine-learning/recommendation/collaborative/basics\"\u003ehttps://developers.google.com/machine-learning/recommendation/collaborative/basics\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMatrix Factorization - \u003ca href=\"https://developers.google.com/machine-learning/recommendation/collaborative/matrix\"\u003ehttps://developers.google.com/machine-learning/recommendation/collaborative/matrix\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ePrototyping a Recommender System Step by Step Part 1: KNN Item-Based Collaborative Filtering - \u003ca href=\"https://towardsdatascience.com/prototyping-a-recommender-system-step-by-step-part-1-knn-item-based-collaborative-filtering-637969614ea\"\u003ehttps://towardsdatascience.com/prototyping-a-recommender-system-step-by-step-part-1-knn-item-based-collaborative-filtering-637969614ea\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eBuild a Recommendation Engine With Collaborative Filtering - \u003ca href=\"https://realpython.com/build-recommendation-engine-collaborative-filtering/#using-python-to-build-recommenders\"\u003ehttps://realpython.com/build-recommendation-engine-collaborative-filtering/#using-python-to-build-recommenders\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhat is Geographic DNS Routing? - \u003ca href=\"https://ns1.com/resources/how-geographic-routing-works\"\u003ehttps://ns1.com/resources/how-geographic-routing-works\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eGeolocation routing - \u003ca href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy-geo.html\"\u003ehttps://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy-geo.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eUsing CloudFront Signed URLs with Built-In Authenticated Access to S3 - \u003ca href=\"https://doordash.engineering/2021/12/14/building-authenticated-access-to-s3/\"\u003ehttps://doordash.engineering/2021/12/14/building-authenticated-access-to-s3/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eEffect system - \u003ca href=\"https://en.wikipedia.org/wiki/Effect_system\"\u003ehttps://en.wikipedia.org/wiki/Effect_system\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eA Programmer-Friendly I/O Abstraction Over io_uring and kqueue - \u003ca href=\"https://tigerbeetle.com/blog/a-friendly-abstraction-over-iouring-and-kqueue/\"\u003ehttps://tigerbeetle.com/blog/a-friendly-abstraction-over-iouring-and-kqueue/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eIntrusive linked lists - \u003ca href=\"https://www.data-structures-in-practice.com/intrusive-linked-lists/\"\u003ehttps://www.data-structures-in-practice.com/intrusive-linked-lists/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMerbridge - Accelerate your mesh with eBPF - \u003ca href=\"https://istio.io/v1.15/blog/2022/merbridge/\"\u003ehttps://istio.io/v1.15/blog/2022/merbridge/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eA Database Without Dynamic Memory Allocation - \u003ca href=\"https://tigerbeetle.com/blog/a-database-without-dynamic-memory/\"\u003ehttps://tigerbeetle.com/blog/a-database-without-dynamic-memory/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMemory access on the Apple M1 processor - \u003ca href=\"https://lemire.me/blog/2021/01/06/memory-access-on-the-apple-m1-processor/\"\u003ehttps://lemire.me/blog/2021/01/06/memory-access-on-the-apple-m1-processor/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThree Clocks are Better than One - \u003ca href=\"https://tigerbeetle.com/blog/three-clocks-are-better-than-one/\"\u003ehttps://tigerbeetle.com/blog/three-clocks-are-better-than-one/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eNext Rust Compiler - \u003ca href=\"https://matklad.github.io/2023/01/25/next-rust-compiler.html\"\u003ehttps://matklad.github.io/2023/01/25/next-rust-compiler.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe RED Method: key metrics for microservices architecture - \u003ca href=\"https://www.weave.works/blog/the-red-method-key-metrics-for-microservices-architecture/\"\u003ehttps://www.weave.works/blog/the-red-method-key-metrics-for-microservices-architecture/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eJsonnet Training Course - \u003ca href=\"https://jsonnet-libs.github.io/jsonnet-training-course/\"\u003ehttps://jsonnet-libs.github.io/jsonnet-training-course/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhy Is System Design Interview Important? - \u003ca href=\"https://www.youtube.com/watch?v=EyMRZpgJUuc\"\u003ehttps://www.youtube.com/watch?v=EyMRZpgJUuc\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe Log-Structured Merge-Tree (LSM Tree) - \u003ca href=\"https://blog.acolyer.org/2014/11/26/the-log-structured-merge-tree-lsm-tree/\"\u003ehttps://blog.acolyer.org/2014/11/26/the-log-structured-merge-tree-lsm-tree/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHYTRADBOI \u0026lsquo;22 — TigerBeetle\u0026rsquo;s LSM-Forest - \u003ca href=\"https://www.youtube.com/watch?v=yBBpUMR8dHw\"\u003ehttps://www.youtube.com/watch?v=yBBpUMR8dHw\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ehighscalability.com: Paper: Immutability Changes Everything By Pat Helland - \u003ca href=\"http://highscalability.com/blog/2015/1/26/paper-immutability-changes-everything-by-pat-helland.html\"\u003ehttp://highscalability.com/blog/2015/1/26/paper-immutability-changes-everything-by-pat-helland.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe size of Rust Futures - \u003ca href=\"https://swatinem.de/blog/future-size/\"\u003ehttps://swatinem.de/blog/future-size/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe network is reliable - \u003ca href=\"https://aphyr.com/posts/288-the-network-is-reliable\"\u003ehttps://aphyr.com/posts/288-the-network-is-reliable\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eIntroduction to continuous profiling - \u003ca href=\"https://www.youtube.com/watch?v=pU6GFVHFPFU\u0026amp;list=PLDGkOdUX1UjqEzcxQrbROMy8DN7MZv_h4\u0026amp;index=2\"\u003ehttps://www.youtube.com/watch?v=pU6GFVHFPFU\u0026list=PLDGkOdUX1UjqEzcxQrbROMy8DN7MZv_h4\u0026index=2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eNew in Grafana Loki 2.4: The Simple Scalable Deployment Mode - \u003ca href=\"https://www.youtube.com/watch?v=M8nYWBpbwWg\u0026amp;list=PLDGkOdUX1UjqEzcxQrbROMy8DN7MZv_h4\u0026amp;index=2\"\u003ehttps://www.youtube.com/watch?v=M8nYWBpbwWg\u0026list=PLDGkOdUX1UjqEzcxQrbROMy8DN7MZv_h4\u0026index=2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eGrafana Loki 2.3: Easier \u0026amp; Faster Querying - \u003ca href=\"https://www.youtube.com/watch?v=zIdEVNA6YTI\u0026amp;list=PLDGkOdUX1UjqEzcxQrbROMy8DN7MZv_h4\u0026amp;index=3\"\u003ehttps://www.youtube.com/watch?v=zIdEVNA6YTI\u0026list=PLDGkOdUX1UjqEzcxQrbROMy8DN7MZv_h4\u0026index=3\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eARM vs x86 performance benchmark (amd64 vs arm64 - AWS Graviton - AWS EKS - Kubernetes - Golang) - \u003ca href=\"https://www.youtube.com/watch?v=ndXKHgFIIL4\"\u003ehttps://www.youtube.com/watch?v=ndXKHgFIIL4\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhy Uber Fails to Disrupt Transportation - \u003ca href=\"https://www.youtube.com/watch?v=ajHg97qx4r0\"\u003ehttps://www.youtube.com/watch?v=ajHg97qx4r0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eRust\u0026rsquo;s Witchcraft - \u003ca href=\"https://www.youtube.com/watch?v=MWRPYBoCEaY\"\u003ehttps://www.youtube.com/watch?v=MWRPYBoCEaY\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eJepsen: MongoDB - \u003ca href=\"https://aphyr.com/posts/284-call-me-maybe-mongodb\"\u003ehttps://aphyr.com/posts/284-call-me-maybe-mongodb\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eC++ vs Rust: Tuples - \u003ca href=\"https://www.youtube.com/watch?v=0RsLGM_7ODE\"\u003ehttps://www.youtube.com/watch?v=0RsLGM_7ODE\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eJepsen: Riak - \u003ca href=\"https://aphyr.com/posts/285-call-me-maybe-riak\"\u003ehttps://aphyr.com/posts/285-call-me-maybe-riak\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ePaper: CRDTs: Consistency Without Concurrency Control - \u003ca href=\"http://highscalability.com/blog/2010/12/23/paper-crdts-consistency-without-concurrency-control.html\"\u003ehttp://highscalability.com/blog/2010/12/23/paper-crdts-consistency-without-concurrency-control.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eJepsen: final thoughts - \u003ca href=\"https://aphyr.com/posts/286-call-me-maybe-final-thoughts\"\u003ehttps://aphyr.com/posts/286-call-me-maybe-final-thoughts\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSloppy Quorum and Hinted handoff: Quorum in the times of failure - \u003ca href=\"https://distributed-computing-musings.com/2022/05/sloppy-quorum-and-hinted-handoff-quorum-in-the-times-of-failure/\"\u003ehttps://distributed-computing-musings.com/2022/05/sloppy-quorum-and-hinted-handoff-quorum-in-the-times-of-failure/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAn introduction to replication - \u003ca href=\"https://distributed-computing-musings.com/2021/12/an-introduction-to-replication/\"\u003ehttps://distributed-computing-musings.com/2021/12/an-introduction-to-replication/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDistributed Consensus: Why do we need everyone to agree? - \u003ca href=\"https://distributed-computing-musings.com/2021/12/distributed-consensus-why-do-we-need-everyone-to-agree/\"\u003ehttps://distributed-computing-musings.com/2021/12/distributed-consensus-why-do-we-need-everyone-to-agree/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDistributed Consensus: How to decide what everyone agrees on? - \u003ca href=\"https://distributed-computing-musings.com/2021/12/distributed-consensus-how-to-decide-what-everyone-agrees-on/\"\u003ehttps://distributed-computing-musings.com/2021/12/distributed-consensus-how-to-decide-what-everyone-agrees-on/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDistributed Consensus: How to deal with disagreement? - \u003ca href=\"https://distributed-computing-musings.com/2021/12/distributed-consensus-how-to-deal-with-disagreement/\"\u003ehttps://distributed-computing-musings.com/2021/12/distributed-consensus-how-to-deal-with-disagreement/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eReplication: Challenges in onboarding a new follower - \u003ca href=\"https://distributed-computing-musings.com/2021/12/replication-challenges-in-onboarding-a-new-follower/\"\u003ehttps://distributed-computing-musings.com/2021/12/replication-challenges-in-onboarding-a-new-follower/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eReplication: Handling node failure - \u003ca href=\"https://distributed-computing-musings.com/2021/12/replication-handling-node-failure/\"\u003ehttps://distributed-computing-musings.com/2021/12/replication-handling-node-failure/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSplit-brain (computing) - \u003ca href=\"https://en.wikipedia.org/wiki/Split-brain_%28computing%29\"\u003ehttps://en.wikipedia.org/wiki/Split-brain_(computing)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eFencing (computing) - \u003ca href=\"https://en.wikipedia.org/wiki/Fencing_%28computing%29\"\u003ehttps://en.wikipedia.org/wiki/Fencing_(computing)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSTONITH - \u003ca href=\"https://en.wikipedia.org/wiki/STONITH\"\u003ehttps://en.wikipedia.org/wiki/STONITH\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWatchdog timer - \u003ca href=\"https://en.wikipedia.org/wiki/Watchdog_timer\"\u003ehttps://en.wikipedia.org/wiki/Watchdog_timer\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow does the detour crate work? - \u003ca href=\"https://www.youtube.com/watch?v=aLeMCUXFJwY\"\u003ehttps://www.youtube.com/watch?v=aLeMCUXFJwY\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eReplication: Synchronous vs Asynchronous replication - \u003ca href=\"https://distributed-computing-musings.com/2022/01/replication-synchronous-vs-asynchronous-replication/\"\u003ehttps://distributed-computing-musings.com/2022/01/replication-synchronous-vs-asynchronous-replication/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eReplication: Issues with replication lag - \u003ca href=\"https://distributed-computing-musings.com/2022/01/replication-issues-with-replication-lag/\"\u003ehttps://distributed-computing-musings.com/2022/01/replication-issues-with-replication-lag/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eBehind the scenes of Vercel\u0026rsquo;s infrastructure: Achieving optimal scalability and performance - \u003ca href=\"https://vercel.com/blog/behind-the-scenes-of-vercels-infrastructure\"\u003ehttps://vercel.com/blog/behind-the-scenes-of-vercels-infrastructure\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSuture - Supervisor Trees for Go - \u003ca href=\"https://www.jerf.org/iri/post/2930/\"\u003ehttps://www.jerf.org/iri/post/2930/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eError wrapping in Go - \u003ca href=\"https://bitfieldconsulting.com/golang/wrapping-errors\"\u003ehttps://bitfieldconsulting.com/golang/wrapping-errors\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eGrafana Screencasts - \u003ca href=\"https://www.youtube.com/watch?v=zIdEVNA6YTI\u0026amp;list=PLDGkOdUX1UjqEzcxQrbROMy8DN7MZv_h4\u0026amp;index=4\"\u003ehttps://www.youtube.com/watch?v=zIdEVNA6YTI\u0026list=PLDGkOdUX1UjqEzcxQrbROMy8DN7MZv_h4\u0026index=4\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eBuilding a powerful Double Entry Accounting system - Lucas Cavalcanti - \u003ca href=\"https://www.youtube.com/watch?v=aw6y4r4NAlw\"\u003ehttps://www.youtube.com/watch?v=aw6y4r4NAlw\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDesign Considerations When Using Transactionality - \u003ca href=\"https://hazelcast.com/blog/design-considerations-when-using-transactionality/\"\u003ehttps://hazelcast.com/blog/design-considerations-when-using-transactionality/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAn Elegant DB Schema for Double-Entry Accounting - \u003ca href=\"https://blog.journalize.io/posts/an-elegant-db-schema-for-double-entry-accounting/\"\u003ehttps://blog.journalize.io/posts/an-elegant-db-schema-for-double-entry-accounting/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTigerbeetle: Design Document - \u003ca href=\"https://github.com/tigerbeetledb/tigerbeetle/blob/main/docs/DESIGN.md\"\u003ehttps://github.com/tigerbeetledb/tigerbeetle/blob/main/docs/DESIGN.md\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTigerBeetle - A Million Financial Transactions per Second in Zig - \u003ca href=\"https://www.youtube.com/watch?v=BH2jvJ74npM\"\u003ehttps://www.youtube.com/watch?v=BH2jvJ74npM\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMy Rust journey and how to learn Rust - \u003ca href=\"https://blog.moelove.info/my-rust-journey-and-how-to-learn-rust\"\u003ehttps://blog.moelove.info/my-rust-journey-and-how-to-learn-rust\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhy doesn\u0026rsquo;t Go have variance in its type system? - \u003ca href=\"https://blog.merovius.de/posts/2018-06-03-why-doesnt-go-have-variance-in/\"\u003ehttps://blog.merovius.de/posts/2018-06-03-why-doesnt-go-have-variance-in/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eCI/CD In 5 Minutes | Is It Worth The Hassle? - \u003ca href=\"https://www.youtube.com/watch?v=42UP1fxi2SY\"\u003ehttps://www.youtube.com/watch?v=42UP1fxi2SY\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e2022 in Programming Languages - \u003ca href=\"https://www.youtube.com/watch?v=1Evd69G6ItM\"\u003ehttps://www.youtube.com/watch?v=1Evd69G6ItM\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow Does Encryption Work? - \u003ca href=\"https://www.youtube.com/watch?v=sPJmIeHpWd4\"\u003ehttps://www.youtube.com/watch?v=sPJmIeHpWd4\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTigerBeetle raises $6.4M to power the future of financial accounting infrastructure - \u003ca href=\"https://tigerbeetle.com/blog/2023-01-30-series-seed-announcement/\"\u003ehttps://tigerbeetle.com/blog/2023-01-30-series-seed-announcement/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe Power of 10: Rules for Developing Safety-Critical Code - \u003ca href=\"https://en.wikipedia.org/wiki/The_Power_of_10:_Rules_for_Developing_Safety-Critical_Code\"\u003ehttps://en.wikipedia.org/wiki/The_Power_of_10:_Rules_for_Developing_Safety-Critical_Code\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhat is Zig\u0026rsquo;s Comptime? - \u003ca href=\"https://kristoff.it/blog/what-is-zig-comptime/\"\u003ehttps://kristoff.it/blog/what-is-zig-comptime/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ePaxos consensus for beginners - \u003ca href=\"https://medium.com/distributed-knowledge/paxos-consensus-for-beginners-1b8519d3360f\"\u003ehttps://medium.com/distributed-knowledge/paxos-consensus-for-beginners-1b8519d3360f\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"february\"\u003eFebruary\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eRutgers: Understanding Paxos - \u003ca href=\"https://people.cs.rutgers.edu/~pxk/417/notes/paxos.html\"\u003ehttps://people.cs.rutgers.edu/~pxk/417/notes/paxos.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eGuaranteed Scheduling For Critical Add-On Pods - \u003ca href=\"https://kubernetes.io/docs/tasks/administer-cluster/guaranteed-scheduling-critical-addon-pods/\"\u003ehttps://kubernetes.io/docs/tasks/administer-cluster/guaranteed-scheduling-critical-addon-pods/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ePod Priority and Preemption - \u003ca href=\"https://kubernetes.io/docs/concepts/scheduling-eviction/pod-priority-preemption/\"\u003ehttps://kubernetes.io/docs/concepts/scheduling-eviction/pod-priority-preemption/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eLoad Balancers for System Design Interviews - \u003ca href=\"https://www.youtube.com/watch?v=chyZRNT7eEo\"\u003ehttps://www.youtube.com/watch?v=chyZRNT7eEo\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe Hardest Part of Writing Tests is Getting Started - \u003ca href=\"https://shopify.engineering/the-hardest-part-of-writing-tests-is-getting-started\"\u003ehttps://shopify.engineering/the-hardest-part-of-writing-tests-is-getting-started\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e8 Key Data Structures That Power Modern Databases - \u003ca href=\"https://www.youtube.com/watch?v=W_v05d_2RTo\"\u003ehttps://www.youtube.com/watch?v=W_v05d_2RTo\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTroubleshooting Kafka with 2000 Microservices | Event Driven - \u003ca href=\"https://www.youtube.com/watch?v=t5lsPZSs01Q\"\u003ehttps://www.youtube.com/watch?v=t5lsPZSs01Q\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e[Backend #58] Why a bit of delay is good for your async tasks - \u003ca href=\"https://www.youtube.com/watch?v=ILNiZgseLUI\"\u003ehttps://www.youtube.com/watch?v=ILNiZgseLUI\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u0026ldquo;Testing Distributed Systems w/ Deterministic Simulation\u0026rdquo; by Will Wilson - \u003ca href=\"https://www.youtube.com/watch?v=4fFDFbi3toc\"\u003ehttps://www.youtube.com/watch?v=4fFDFbi3toc\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eIs This NEW Language BETTER Than Rust? C++? (Zig First Impressions) - \u003ca href=\"https://www.youtube.com/watch?v=zFELcHTki9U\"\u003ehttps://www.youtube.com/watch?v=zFELcHTki9U\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eCarving the Scheduler Out of Our Orchestrator - \u003ca href=\"https://fly.io/blog/carving-the-scheduler-out-of-our-orchestrator/\"\u003ehttps://fly.io/blog/carving-the-scheduler-out-of-our-orchestrator/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eRedis replication - \u003ca href=\"https://redis.io/docs/management/replication/\"\u003ehttps://redis.io/docs/management/replication/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eRedis: Unsafe At Any Speed - \u003ca href=\"https://towardsdatascience.com/redis-unsafe-at-any-speed-f2731f738a25\"\u003ehttps://towardsdatascience.com/redis-unsafe-at-any-speed-f2731f738a25\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDistributed Computing Concepts - \u003ca href=\"https://medium.com/codex/distributed-computing-concepts-f6275078a81\"\u003ehttps://medium.com/codex/distributed-computing-concepts-f6275078a81\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eCAP theorem - \u003ca href=\"https://en.wikipedia.org/wiki/CAP_theorem\"\u003ehttps://en.wikipedia.org/wiki/CAP_theorem\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe many faces of consistency - \u003ca href=\"https://blog.acolyer.org/2017/01/12/the-many-faces-of-consistency/\"\u003ehttps://blog.acolyer.org/2017/01/12/the-many-faces-of-consistency/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eJepsen: Redis - \u003ca href=\"https://aphyr.com/posts/283-jepsen-redis\"\u003ehttps://aphyr.com/posts/283-jepsen-redis\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eJepsen: MongoDB - \u003ca href=\"https://aphyr.com/posts/284-call-me-maybe-mongodb\"\u003ehttps://aphyr.com/posts/284-call-me-maybe-mongodb\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eJepsen: MongoDB 3.4.0-rc3 - \u003ca href=\"https://jepsen.io/analyses/mongodb-3-4-0-rc3\"\u003ehttps://jepsen.io/analyses/mongodb-3-4-0-rc3\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eRed5: Live Video Streaming Protocols and the Race to Zero Latency - \u003ca href=\"https://www.red5pro.com/live-video-streaming-protocols-zero-latency-whitepaper/\"\u003ehttps://www.red5pro.com/live-video-streaming-protocols-zero-latency-whitepaper/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eJepsen: On the perils of network partitions - \u003ca href=\"https://aphyr.com/posts/281-call-me-maybe\"\u003ehttps://aphyr.com/posts/281-call-me-maybe\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eJepsen: Postgres - \u003ca href=\"https://aphyr.com/posts/282-call-me-maybe-postgres\"\u003ehttps://aphyr.com/posts/282-call-me-maybe-postgres\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDesigning futures for Rust - \u003ca href=\"http://aturon.github.io/blog/2016/09/07/futures-design/\"\u003ehttp://aturon.github.io/blog/2016/09/07/futures-design/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003egRPC vs Kafka: Which one should you choose? - \u003ca href=\"https://www.youtube.com/watch?v=Qkhfhhn8ALU\"\u003ehttps://www.youtube.com/watch?v=Qkhfhhn8ALU\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow To Stream Large Files Over TCP In Golang - \u003ca href=\"https://www.youtube.com/watch?v=82oFmY-Qeok\"\u003ehttps://www.youtube.com/watch?v=82oFmY-Qeok\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eBloom is More Complicated Than You Think - \u003ca href=\"https://www.youtube.com/watch?v=ml-5OGZC7vE\"\u003ehttps://www.youtube.com/watch?v=ml-5OGZC7vE\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe Golang Scheduler - \u003ca href=\"https://www.kelche.co/blog/go/golang-scheduling/\"\u003ehttps://www.kelche.co/blog/go/golang-scheduling/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eCausal Consistency - \u003ca href=\"https://jepsen.io/consistency/models/causal\"\u003ehttps://jepsen.io/consistency/models/causal\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eJepsen: Redis-Raft 1b3fbf6 - \u003ca href=\"https://jepsen.io/analyses/redis-raft-1b3fbf6\"\u003ehttps://jepsen.io/analyses/redis-raft-1b3fbf6\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eA Foolish Consistency: Consul at Fly.io - \u003ca href=\"https://fly.io/blog/a-foolish-consistency/\"\u003ehttps://fly.io/blog/a-foolish-consistency/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eFly.io: Building Clusters With Serf, My New Favorite Thing - \u003ca href=\"https://fly.io/blog/building-clusters-with-serf/#what-serf-is-doing\"\u003ehttps://fly.io/blog/building-clusters-with-serf/#what-serf-is-doing\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eLamport timestamp - \u003ca href=\"https://en.wikipedia.org/wiki/Lamport_timestamp\"\u003ehttps://en.wikipedia.org/wiki/Lamport_timestamp\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ePaxos at its heart is very simple - \u003ca href=\"https://blog.the-pans.com/paxos-explained/\"\u003ehttps://blog.the-pans.com/paxos-explained/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow Redis cluster achieves high availability and data persistence - \u003ca href=\"https://medium.com/@bb8s/how-redis-cluster-achieves-high-availability-and-data-persistence-8cdc899764e8\"\u003ehttps://medium.com/@bb8s/how-redis-cluster-achieves-high-availability-and-data-persistence-8cdc899764e8\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTime and Order - \u003ca href=\"https://blog.the-pans.com/time-and-order/\"\u003ehttps://blog.the-pans.com/time-and-order/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eState Machine and Synchronization - \u003ca href=\"https://blog.the-pans.com/state-machine-and-sync/\"\u003ehttps://blog.the-pans.com/state-machine-and-sync/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ePaxos vs. Quorum-based Consistency - \u003ca href=\"https://blog.the-pans.com/paxos-vs-quorum-based-consistency/\"\u003ehttps://blog.the-pans.com/paxos-vs-quorum-based-consistency/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eUnderstanding Paxos as a Read-modify-write Transaction - \u003ca href=\"https://blog.the-pans.com/understanding-paxos/\"\u003ehttps://blog.the-pans.com/understanding-paxos/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eStructural Subtyping in Go - \u003ca href=\"https://www.youtube.com/watch?v=aBhnP6FOvJo\"\u003ehttps://www.youtube.com/watch?v=aBhnP6FOvJo\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eStanford: Paxos lecture (Raft user study) - \u003ca href=\"https://www.youtube.com/watch?v=JEpsBg0AO6o\"\u003ehttps://www.youtube.com/watch?v=JEpsBg0AO6o\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThinking distributed systems: Pre­fa­ce - \u003ca href=\"https://book.dtornow.com/assets/chapters/Preface.pdf\"\u003ehttps://book.dtornow.com/assets/chapters/Preface.pdf\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eLeslie Lamport: Paxos Made Simple - \u003ca href=\"https://lamport.azurewebsites.net/pubs/paxos-simple.pdf\"\u003ehttps://lamport.azurewebsites.net/pubs/paxos-simple.pdf\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWriting a Static Analyser for PHP in Rust - Overview - \u003ca href=\"https://ryangjchandler.co.uk/posts/writing-a-static-analyser-for-php-in-rust-overview\"\u003ehttps://ryangjchandler.co.uk/posts/writing-a-static-analyser-for-php-in-rust-overview\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eEnvelope Encryption - \u003ca href=\"https://jayendrapatil.com/envelope-encryption/\"\u003ehttps://jayendrapatil.com/envelope-encryption/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eEnvelope Encryption - Putting Your Encryption Key in an Envelope Is the Safer Option - \u003ca href=\"https://senthilnayagan.com/data-security-and-compliance/2022/envelope-encryption\"\u003ehttps://senthilnayagan.com/data-security-and-compliance/2022/envelope-encryption\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhat Are the Benefits of Envelope Encryption? - \u003ca href=\"https://support.huaweicloud.com/intl/en-us/dew_faq/dew_01_0054.html\"\u003ehttps://support.huaweicloud.com/intl/en-us/dew_faq/dew_01_0054.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eKubernetes: Fine Parallel Processing Using a Work Queue - \u003ca href=\"https://kubernetes.io/docs/tasks/job/fine-parallel-processing-work-queue/\"\u003ehttps://kubernetes.io/docs/tasks/job/fine-parallel-processing-work-queue/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ePublic Cloud Inter-region Network Latency as Heat-maps - \u003ca href=\"https://medium.com/@sachinkagarwal/public-cloud-inter-region-network-latency-as-heat-maps-134e22a5ff19\"\u003ehttps://medium.com/@sachinkagarwal/public-cloud-inter-region-network-latency-as-heat-maps-134e22a5ff19\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe technology behind GitHub’s new code search - \u003ca href=\"https://github.blog/2023-02-06-the-technology-behind-githubs-new-code-search/\"\u003ehttps://github.blog/2023-02-06-the-technology-behind-githubs-new-code-search/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eFileWave: Why we moved from ZeroMQ to NATS - \u003ca href=\"https://synadia.com/blog/filewave-why-we-moved-from-zeromq-to-nats-and-picked-it-over-kafka-and-rabbitmq\"\u003ehttps://synadia.com/blog/filewave-why-we-moved-from-zeromq-to-nats-and-picked-it-over-kafka-and-rabbitmq\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhat are dependent types? aka the Calculus of Construction (as a type wizard - \u003ca href=\"https://www.youtube.com/watch?v=cf3hVL1bgNc\"\u003ehttps://www.youtube.com/watch?v=cf3hVL1bgNc\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eLamport Clock - \u003ca href=\"https://martinfowler.com/articles/patterns-of-distributed-systems/lamport-clock.html\"\u003ehttps://martinfowler.com/articles/patterns-of-distributed-systems/lamport-clock.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMake any algorithm lock-free with this one crazy trick - \u003ca href=\"https://www.the-paper-trail.org/post/2016-05-25-make-any-algorithm-lock-free-with-this-one-crazy-trick/\"\u003ehttps://www.the-paper-trail.org/post/2016-05-25-make-any-algorithm-lock-free-with-this-one-crazy-trick/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eUser or *User - Do We Need Struct Pointers Everywhere? - \u003ca href=\"https://preslav.me/2023/02/06/golang-do-we-need-struct-pointers-everywhere/\"\u003ehttps://preslav.me/2023/02/06/golang-do-we-need-struct-pointers-everywhere/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSharedArrayBuffer warnings in Search Console: Clarifying a new cross-origin isolation security policy - \u003ca href=\"https://searchengineland.com/sharedarraybuffer-warnings-in-search-console-clarifying-a-new-cross-origin-isolation-security-policy-346865\"\u003ehttps://searchengineland.com/sharedarraybuffer-warnings-in-search-console-clarifying-a-new-cross-origin-isolation-security-policy-346865\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eLamport TLA+ Course Lecture 1: Introduction to TLA+ (HD) - \u003ca href=\"https://www.youtube.com/watch?v=p54W-XOIEF8\"\u003ehttps://www.youtube.com/watch?v=p54W-XOIEF8\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eLamport TLA+ Course Lecture 2: State Machines in TLA+ (HD) - \u003ca href=\"https://www.youtube.com/watch?v=4snwZl726c4\"\u003ehttps://www.youtube.com/watch?v=4snwZl726c4\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eEvent-Driven Architecture: I do not think it means what you think it means - \u003ca href=\"https://www.youtube.com/watch?v=iAA7PTqs4xY\"\u003ehttps://www.youtube.com/watch?v=iAA7PTqs4xY\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTime, Clocks, and the Ordering of Events in a Distributed System - \u003ca href=\"https://lamport.azurewebsites.net/pubs/time-clocks.pdf\"\u003ehttps://lamport.azurewebsites.net/pubs/time-clocks.pdf\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTwo-phase commit - \u003ca href=\"https://www.researchgate.net/publication/275155037_Two-Phase_Commit\"\u003ehttps://www.researchgate.net/publication/275155037_Two-Phase_Commit\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe Consequences of Ignoring Memory Safety (but what does that mean) - \u003ca href=\"https://www.youtube.com/watch?v=lxUYZVX_FjQ\"\u003ehttps://www.youtube.com/watch?v=lxUYZVX_FjQ\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAbstractions to easily swap implementations? Not so fast. - \u003ca href=\"https://www.youtube.com/watch?v=qeJeS-7luo8\"\u003ehttps://www.youtube.com/watch?v=qeJeS-7luo8\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eGo internals - The context package - \u003ca href=\"https://www.damianopetrungaro.com/posts/go-internal-context-package/\"\u003ehttps://www.damianopetrungaro.com/posts/go-internal-context-package/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe LMAX Architecture - \u003ca href=\"https://martinfowler.com/articles/lmax.html\"\u003ehttps://martinfowler.com/articles/lmax.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHandling Failures From First Principles - \u003ca href=\"https://dominik-tornow.medium.com/handling-failures-from-first-principles-1ed976b1b869\"\u003ehttps://dominik-tornow.medium.com/handling-failures-from-first-principles-1ed976b1b869\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ePaper Summary: Sagas - \u003ca href=\"https://dominik-tornow.medium.com/paper-summary-sagas-395ef2a9a575\"\u003ehttps://dominik-tornow.medium.com/paper-summary-sagas-395ef2a9a575\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ePattern: Saga - \u003ca href=\"https://microservices.io/patterns/data/saga.html\"\u003ehttps://microservices.io/patterns/data/saga.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDistributed Transactions \u0026amp; Two-phase Commit - \u003ca href=\"https://medium.com/geekculture/distributed-transactions-two-phase-commit-c82752d69324\"\u003ehttps://medium.com/geekculture/distributed-transactions-two-phase-commit-c82752d69324\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMIT Distributed systems: Lecture 12: Distributed Transactions - \u003ca href=\"https://www.youtube.com/watch?v=aDp99WDIM_4\"\u003ehttps://www.youtube.com/watch?v=aDp99WDIM_4\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTesting complex workflows in Go - \u003ca href=\"https://blog.lobocv.com/posts/golang_testing/?utm_source=reddit\u0026amp;utm_medium=blog\u0026amp;utm_campaign=golang\u0026amp;utm_content=testing_advanced_flows\"\u003ehttps://blog.lobocv.com/posts/golang_testing/?utm_source=reddit\u0026utm_medium=blog\u0026utm_campaign=golang\u0026utm_content=testing_advanced_flows\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAll your comparable types - \u003ca href=\"https://go.dev/blog/comparable\"\u003ehttps://go.dev/blog/comparable\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eReducing system load with event folding - \u003ca href=\"https://blog.lobocv.com/posts/event_folding/\"\u003ehttps://blog.lobocv.com/posts/event_folding/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eCrash recovery in a distributed data storage system - \u003ca href=\"https://www.microsoft.com/en-us/research/publication/crash-recovery-in-a-distributed-data-storage-system/\"\u003ehttps://www.microsoft.com/en-us/research/publication/crash-recovery-in-a-distributed-data-storage-system/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ePaper Summary: Fundamentals of Fault-Tolerant Distributed Computing - \u003ca href=\"https://dominik-tornow.medium.com/paper-summary-fundamentals-of-fault-tolerant-distributed-computing-53969eaa38f3\"\u003ehttps://dominik-tornow.medium.com/paper-summary-fundamentals-of-fault-tolerant-distributed-computing-53969eaa38f3\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eLamport: Computation and state machines - \u003ca href=\"https://lamport.azurewebsites.net/pubs/state-machine.pdf\"\u003ehttps://lamport.azurewebsites.net/pubs/state-machine.pdf\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eRutgers: distributed transactions - \u003ca href=\"https://people.cs.rutgers.edu/~pxk/417/notes/transactions.html\"\u003ehttps://people.cs.rutgers.edu/~pxk/417/notes/transactions.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe Elephant was a Trojan Horse: On the Death of Map-Reduce at Google - \u003ca href=\"https://www.the-paper-trail.org/post/2014-06-25-the-elephant-was-a-trojan-horse-on-the-death-of-map-reduce-at-google/\"\u003ehttps://www.the-paper-trail.org/post/2014-06-25-the-elephant-was-a-trojan-horse-on-the-death-of-map-reduce-at-google/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDistributed systems for fun and for profit - \u003ca href=\"https://book.mixu.net/distsys/\"\u003ehttps://book.mixu.net/distsys/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eExactly-once or not, atomic broadcast is still impossible in Kafka - or anywhere - \u003ca href=\"https://www.the-paper-trail.org/post/2017-07-28-exactly-not-atomic-broadcast-still-impossible-kafka/\"\u003ehttps://www.the-paper-trail.org/post/2017-07-28-exactly-not-atomic-broadcast-still-impossible-kafka/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eA brief tour of FLP impossibility - \u003ca href=\"https://www.the-paper-trail.org/post/2008-08-13-a-brief-tour-of-flp-impossibility/\"\u003ehttps://www.the-paper-trail.org/post/2008-08-13-a-brief-tour-of-flp-impossibility/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ePub/Sub Best Practices: Features - \u003ca href=\"https://www.youtube.com/watch?v=2-8wgvanQHI\"\u003ehttps://www.youtube.com/watch?v=2-8wgvanQHI\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDistributed systems for fun and profit - \u003ca href=\"https://book.mixu.net/distsys/index.html\"\u003ehttps://book.mixu.net/distsys/index.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAlgebraic Effects for the Rest of Us - \u003ca href=\"https://overreacted.io/algebraic-effects-for-the-rest-of-us/\"\u003ehttps://overreacted.io/algebraic-effects-for-the-rest-of-us/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eNotes on Distributed Systems for Young Bloods - \u003ca href=\"https://www.somethingsimilar.com/2013/01/14/notes-on-distributed-systems-for-young-bloods/\"\u003ehttps://www.somethingsimilar.com/2013/01/14/notes-on-distributed-systems-for-young-bloods/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTackling Concurrency Bugs with TLA+\u0026quot; by Hillel Wayne - \u003ca href=\"https://www.youtube.com/watch?v=_9B__0S21y8\"\u003ehttps://www.youtube.com/watch?v=_9B__0S21y8\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWriting high-performance clients for TigerBeetle - \u003ca href=\"https://tigerbeetle.com/blog/2023-02-21-writing-high-performance-clients-for-tigerbeetle/\"\u003ehttps://tigerbeetle.com/blog/2023-02-21-writing-high-performance-clients-for-tigerbeetle/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eGossip Glomers - \u003ca href=\"https://fly.io/blog/gossip-glomers/\"\u003ehttps://fly.io/blog/gossip-glomers/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eYou Can’t Sacrifice Partition Tolerance - \u003ca href=\"https://codahale.com/you-cant-sacrifice-partition-tolerance/\"\u003ehttps://codahale.com/you-cant-sacrifice-partition-tolerance/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhat is Zig\u0026rsquo;s “Colorblind” Async/Await? - \u003ca href=\"https://kristoff.it/blog/zig-colorblind-async-await/\"\u003ehttps://kristoff.it/blog/zig-colorblind-async-await/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow To Contribute To Open Source Projects - \u003ca href=\"https://www.youtube.com/watch?v=xl8TQfwRLgo\"\u003ehttps://www.youtube.com/watch?v=xl8TQfwRLgo\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhy does this Rust program leak memory? - \u003ca href=\"https://www.youtube.com/watch?v=YB6LTaGRQJg\"\u003ehttps://www.youtube.com/watch?v=YB6LTaGRQJg\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"march\"\u003eMarch\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eModern Open Source Messaging: Apache Kafka, RabbitMQ and NATS in Action - \u003ca href=\"https://seroter.com/2016/05/16/modern-open-source-messaging-apache-kafka-rabbitmq-and-nats-in-action/\"\u003ehttps://seroter.com/2016/05/16/modern-open-source-messaging-apache-kafka-rabbitmq-and-nats-in-action/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe Why and How of Microservice Messaging in Kubernetes - \u003ca href=\"https://dzone.com/articles/microservice-messaging-in-kubernetes\"\u003ehttps://dzone.com/articles/microservice-messaging-in-kubernetes\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eKafka vs. Pulsar vs. RabbitMQ: Performance, Architecture, and Features Compared - \u003ca href=\"https://www.confluent.io/kafka-vs-pulsar/\"\u003ehttps://www.confluent.io/kafka-vs-pulsar/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow To Build A TCP Server With Actors In Golang - \u003ca href=\"https://www.youtube.com/watch?v=XyUsMV6nCCw\"\u003ehttps://www.youtube.com/watch?v=XyUsMV6nCCw\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eRajesh K. Karmani, Gul Agha: Actors - \u003ca href=\"http://web.cs.ucla.edu/~palsberg/course/cs239/papers/karmani-agha.pdf\"\u003ehttp://web.cs.ucla.edu/~palsberg/course/cs239/papers/karmani-agha.pdf\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDive into MySQL replication protocol - \u003ca href=\"https://medium.com/@siddontang/dive-into-mysql-replication-protocol-cd14791bcc\"\u003ehttps://medium.com/@siddontang/dive-into-mysql-replication-protocol-cd14791bcc\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eLatency Exists, Cope! - \u003ca href=\"https://web.archive.org/web/20181004043647/http://www.addsimplicity.com/adding_simplicity_an_engi/2007/02/latency_exists_.html\"\u003ehttps://web.archive.org/web/20181004043647/http://www.addsimplicity.com/adding_simplicity_an_engi/2007/02/latency_exists_.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eGo basically never frees heap memory back to the operating system - \u003ca href=\"https://utcc.utoronto.ca/~cks/space/blog/programming/GoNoMemoryFreeing\"\u003ehttps://utcc.utoronto.ca/~cks/space/blog/programming/GoNoMemoryFreeing\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eUsing Apache Kafka to process 1 trillion inter-service messages - \u003ca href=\"https://blog.cloudflare.com/using-apache-kafka-to-process-1-trillion-messages/\"\u003ehttps://blog.cloudflare.com/using-apache-kafka-to-process-1-trillion-messages/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eImpossibility proofs - \u003ca href=\"https://aphyr.com/posts/310-impossibility-proofs\"\u003ehttps://aphyr.com/posts/310-impossibility-proofs\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eIndexing Engine: Index Write Overhead - \u003ca href=\"https://pganalyze.com/docs/indexing-engine/index-write-overhead\"\u003ehttps://pganalyze.com/docs/indexing-engine/index-write-overhead\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eExactly-once or not, atomic broadcast is still impossible in Kafka - or anywhere - \u003ca href=\"https://www.the-paper-trail.org/post/2017-07-28-exactly-not-atomic-broadcast-still-impossible-kafka/\"\u003ehttps://www.the-paper-trail.org/post/2017-07-28-exactly-not-atomic-broadcast-still-impossible-kafka/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eIntroducing Service Weaver: A Framework for Writing Distributed Applications - \u003ca href=\"https://opensource.googleblog.com/2023/03/introducing-service-weaver-framework-for-writing-distributed-applications.html\"\u003ehttps://opensource.googleblog.com/2023/03/introducing-service-weaver-framework-for-writing-distributed-applications.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eBEWARE of Consumer Lag! Event Driven Architecture Monitoring - \u003ca href=\"https://www.youtube.com/watch?v=jguxDV1gWk8\"\u003ehttps://www.youtube.com/watch?v=jguxDV1gWk8\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eStatic vs Dynamic dispatch - \u003ca href=\"https://gist.github.com/greister/37289c6eb3629d4fefa7dd0acf6de378\"\u003ehttps://gist.github.com/greister/37289c6eb3629d4fefa7dd0acf6de378\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eLists are Monoids - \u003ca href=\"https://ucsd-progsys.github.io/liquidhaskell-blog/2016/10/06/structural-induction.lhs/\"\u003ehttps://ucsd-progsys.github.io/liquidhaskell-blog/2016/10/06/structural-induction.lhs/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhat is change data capture? - \u003ca href=\"https://www.cockroachlabs.com/blog/change-data-capture/\"\u003ehttps://www.cockroachlabs.com/blog/change-data-capture/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhen (and why) you should use change data capture - \u003ca href=\"https://www.cockroachlabs.com/blog/why-use-change-data-capture/\"\u003ehttps://www.cockroachlabs.com/blog/why-use-change-data-capture/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eIdempotency and ordering in event-driven systems - \u003ca href=\"https://www.cockroachlabs.com/blog/idempotency-and-ordering-in-event-driven-systems/\"\u003ehttps://www.cockroachlabs.com/blog/idempotency-and-ordering-in-event-driven-systems/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eUsing sync.Cond To Fix My Lock Free Queue In Golang. - \u003ca href=\"https://www.youtube.com/watch?v=BO029A-3430\"\u003ehttps://www.youtube.com/watch?v=BO029A-3430\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003estrace feels like magic — let’s fix that (with Rust) - \u003ca href=\"https://www.youtube.com/watch?v=engduNoI6DE\"\u003ehttps://www.youtube.com/watch?v=engduNoI6DE\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHOW DISCORD STORES TRILLIONS OF MESSAGES - \u003ca href=\"https://discord.com/blog/how-discord-stores-trillions-of-messages\"\u003ehttps://discord.com/blog/how-discord-stores-trillions-of-messages\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eBut What Is Cloud Native Really All About? - \u003ca href=\"https://www.youtube.com/watch?v=p-88GN1WVs8\"\u003ehttps://www.youtube.com/watch?v=p-88GN1WVs8\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTesting in Production to Stay Safe and Sensible - \u003ca href=\"https://launchdarkly.com/blog/testing-in-production-for-safety-and-sanity/\"\u003ehttps://launchdarkly.com/blog/testing-in-production-for-safety-and-sanity/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e8 Design Patterns EVERY Developer Should Know - \u003ca href=\"https://www.youtube.com/watch?v=tAuRQs_d9F8\"\u003ehttps://www.youtube.com/watch?v=tAuRQs_d9F8\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhat is a Multitenancy Architecture and Why Is it becoming popular? - \u003ca href=\"https://www.youtube.com/watch?v=x8vtmX4vF9I\"\u003ehttps://www.youtube.com/watch?v=x8vtmX4vF9I\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMulti-tenant Architecture for SaaS - \u003ca href=\"https://www.youtube.com/watch?v=e8k6TynqGFs\"\u003ehttps://www.youtube.com/watch?v=e8k6TynqGFs\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMy TOP Patterns for Event Driven Architecture - \u003ca href=\"https://www.youtube.com/watch?v=P5hq6iWn_p8\"\u003ehttps://www.youtube.com/watch?v=P5hq6iWn_p8\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eConsensus Protocols: Two-Phase Commit - \u003ca href=\"https://www.the-paper-trail.org/post/2008-11-27-consensus-protocols-two-phase-commit/\"\u003ehttps://www.the-paper-trail.org/post/2008-11-27-consensus-protocols-two-phase-commit/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eConsensus Protocols: Three-phase Commit - \u003ca href=\"https://www.the-paper-trail.org/post/2008-11-27-consensus-protocols-two-phase-commit/\"\u003ehttps://www.the-paper-trail.org/post/2008-11-27-consensus-protocols-two-phase-commit/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eLoad shedding in the Nomad eval broker - \u003ca href=\"https://www.hashicorp.com/blog/load-shedding-in-the-nomad-eval-broker\"\u003ehttps://www.hashicorp.com/blog/load-shedding-in-the-nomad-eval-broker\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eGrafana Labs: Observability Survey 2023 - \u003ca href=\"https://grafana.com/observability-survey-2023/\"\u003ehttps://grafana.com/observability-survey-2023/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eKubernetes docs: Owners and Dependents - \u003ca href=\"https://kubernetes.io/docs/concepts/overview/working-with-objects/owners-dependents/\"\u003ehttps://kubernetes.io/docs/concepts/overview/working-with-objects/owners-dependents/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eKubernetes docs: Garbage collection - \u003ca href=\"https://kubernetes.io/docs/concepts/architecture/garbage-collection/#:~:text=Owner%20references%20tell%20the%20control,Kubernetes%20manages%20owner%20references%20automatically\"\u003ehttps://kubernetes.io/docs/concepts/architecture/garbage-collection/#:~:text=Owner%20references%20tell%20the%20control,Kubernetes%20manages%20owner%20references%20automatically\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAWS builders library: Avoiding overload in distributed systems by putting the smaller service in control - \u003ca href=\"https://aws.amazon.com/builders-library/avoiding-overload-in-distributed-systems-by-putting-the-smaller-service-in-control/\"\u003ehttps://aws.amazon.com/builders-library/avoiding-overload-in-distributed-systems-by-putting-the-smaller-service-in-control/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAWS builders library: Leader Election in Distributed Systems - \u003ca href=\"https://aws.amazon.com/builders-library/leader-election-in-distributed-systems/\"\u003ehttps://aws.amazon.com/builders-library/leader-election-in-distributed-systems/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eA brief history of Consensus, 2PC and Transaction Commit. - \u003ca href=\"http://betathoughts.blogspot.com/2007/06/brief-history-of-consensus-2pc-and.html\"\u003ehttp://betathoughts.blogspot.com/2007/06/brief-history-of-consensus-2pc-and.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eGolang Error Handling Is Better Than You Think! - \u003ca href=\"https://www.youtube.com/watch?v=XCXHzfJZ6CA\"\u003ehttps://www.youtube.com/watch?v=XCXHzfJZ6CA\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe Registers of Rust - \u003ca href=\"https://without.boats/blog/the-registers-of-rust/\"\u003ehttps://without.boats/blog/the-registers-of-rust/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhy Zig When There is Already C++, D, and Rust? - \u003ca href=\"https://ziglang.org/learn/why_zig_rust_d_cpp/\"\u003ehttps://ziglang.org/learn/why_zig_rust_d_cpp/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eGreg Young answers your Event Sourcing questions! - \u003ca href=\"https://www.youtube.com/watch?v=LGjRfgsumPk\"\u003ehttps://www.youtube.com/watch?v=LGjRfgsumPk\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eIssue #10 - Queues Don\u0026rsquo;t Fix Overload - \u003ca href=\"https://dtornow225.substack.com/p/issue-10-queues-dont-fix-overload?utm_source=twitter\u0026amp;utm_campaign=auto_share\u0026amp;r=1pyk7m\"\u003ehttps://dtornow225.substack.com/p/issue-10-queues-dont-fix-overload?utm_source=twitter\u0026utm_campaign=auto_share\u0026r=1pyk7m\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eQueues Don\u0026rsquo;t Fix Overload - \u003ca href=\"https://ferd.ca/queues-don-t-fix-overload.html\"\u003ehttps://ferd.ca/queues-don-t-fix-overload.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eEnd-to-end principle - \u003ca href=\"https://en.wikipedia.org/wiki/End-to-end_principle\"\u003ehttps://en.wikipedia.org/wiki/End-to-end_principle\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eRedpanda raison d\u0026rsquo;etre - \u003ca href=\"https://redpanda.com/blog/redpanda-raison-detre\"\u003ehttps://redpanda.com/blog/redpanda-raison-detre\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThread-per-core buffer management for a modern Kafka-API storage system - \u003ca href=\"https://redpanda.com/blog/tpc-buffers\"\u003ehttps://redpanda.com/blog/tpc-buffers\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e1024cores: Producer-Consumer Queues - \u003ca href=\"https://www.1024cores.net/home/lock-free-algorithms/queues\"\u003ehttps://www.1024cores.net/home/lock-free-algorithms/queues\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMeet Zig: The modern alternative to C - \u003ca href=\"https://www.infoworld.com/article/3689648/meet-the-zig-programming-language.html\"\u003ehttps://www.infoworld.com/article/3689648/meet-the-zig-programming-language.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eZig: In-depth Overview - \u003ca href=\"https://ziglang.org/learn/overview/\"\u003ehttps://ziglang.org/learn/overview/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e9 YEARS OF OPEN-SOURCE DATABASE DEVELOPMENT: REVIEWING RQLITE DESIGN CHOICES - \u003ca href=\"https://www.philipotoole.com/9-years-of-open-source-database-development-the-design-docs/\"\u003ehttps://www.philipotoole.com/9-years-of-open-source-database-development-the-design-docs/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eREPLICATING SQLITE USING RAFT CONSENSUS - \u003ca href=\"https://www.philipotoole.com/replicating-sqlite-using-raft-consensus/\"\u003ehttps://www.philipotoole.com/replicating-sqlite-using-raft-consensus/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWHAT I LEARNED FROM PROGRAMMING DATABASES - \u003ca href=\"https://www.philipotoole.com/what-i-learned-from-programming-a-database/\"\u003ehttps://www.philipotoole.com/what-i-learned-from-programming-a-database/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e20 System Design Concepts Explained in 10 Minutes - \u003ca href=\"https://www.youtube.com/watch?v=i53Gi_K3o7I\"\u003ehttps://www.youtube.com/watch?v=i53Gi_K3o7I\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eziglearn.org - \u003ca href=\"https://ziglearn.org/\"\u003ehttps://ziglearn.org/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eIt’s Time to Move on from Two Phase Commit - \u003ca href=\"http://dbmsmusings.blogspot.com/2019/01/its-time-to-move-on-from-two-phase.html\"\u003ehttp://dbmsmusings.blogspot.com/2019/01/its-time-to-move-on-from-two-phase.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAWS Lambda: Resilience under-the-hood - \u003ca href=\"https://aws.amazon.com/blogs/compute/aws-lambda-resilience-under-the-hood/\"\u003ehttps://aws.amazon.com/blogs/compute/aws-lambda-resilience-under-the-hood/#\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ePaper Notes: Dynamo – Amazon’s Highly Available Key-value Store - \u003ca href=\"https://distributed-computing-musings.com/2022/05/paper-notes-dynamo-amazons-highly-available-key-value-store/\"\u003ehttps://distributed-computing-musings.com/2022/05/paper-notes-dynamo-amazons-highly-available-key-value-store/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSloppy Quorum and Hinted handoff: Quorum in the times of failure - \u003ca href=\"https://distributed-computing-musings.com/2022/05/sloppy-quorum-and-hinted-handoff-quorum-in-the-times-of-failure/\"\u003ehttps://distributed-computing-musings.com/2022/05/sloppy-quorum-and-hinted-handoff-quorum-in-the-times-of-failure/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThundering Herd/Cache Stampede - \u003ca href=\"https://distributed-computing-musings.com/2021/12/thundering-herd-cache-stampede/\"\u003ehttps://distributed-computing-musings.com/2021/12/thundering-herd-cache-stampede/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMagical handler functions in Rust - \u003ca href=\"https://lunatic.solutions/blog/magic-handler-functions-in-rust/\"\u003ehttps://lunatic.solutions/blog/magic-handler-functions-in-rust/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ePatry overview paper: PASTRY - \u003ca href=\"https://www.freepastry.org/PAST/overview.pdf\"\u003ehttps://www.freepastry.org/PAST/overview.pdf\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMaterialized Views: An alternative to full-blown cache systems - \u003ca href=\"https://distributed-computing-musings.com/2022/11/materialized-views-an-alternative-to-full-blown-cache-systems/\"\u003ehttps://distributed-computing-musings.com/2022/11/materialized-views-an-alternative-to-full-blown-cache-systems/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ePaper Notes: SWIM(Scalable Weakly-consistent Infection-style Process Group Membership Protocol) - \u003ca href=\"https://distributed-computing-musings.com/2023/01/paper-notes-swimscalable-weakly-consistent-infection-style-process-group-membership-protocol/\"\u003ehttps://distributed-computing-musings.com/2023/01/paper-notes-swimscalable-weakly-consistent-infection-style-process-group-membership-protocol/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eLSM Tree: Data structure powering write heavy storage engines - \u003ca href=\"https://distributed-computing-musings.com/2022/07/lsm-tree-data-structure-powering-write-heavy-storage-engines/\"\u003ehttps://distributed-computing-musings.com/2022/07/lsm-tree-data-structure-powering-write-heavy-storage-engines/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eReplication: Maintaining a Quorum - \u003ca href=\"https://distributed-computing-musings.com/2022/01/replication-maintaining-a-quorum/\"\u003ehttps://distributed-computing-musings.com/2022/01/replication-maintaining-a-quorum/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eReplication: Introducing leaderless replication - \u003ca href=\"https://distributed-computing-musings.com/2022/01/replication-introducing-leaderless-replication/\"\u003ehttps://distributed-computing-musings.com/2022/01/replication-introducing-leaderless-replication/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eReplication: Handling node failure - \u003ca href=\"https://distributed-computing-musings.com/2021/12/replication-handling-node-failure/\"\u003ehttps://distributed-computing-musings.com/2021/12/replication-handling-node-failure/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow does your computer know what time it is and why will it break your distributed systems? - \u003ca href=\"https://distributed-computing-musings.com/2023/03/how-does-your-computer-know-what-time-it-is-and-why-will-it-break-your-distributed-systems/\"\u003ehttps://distributed-computing-musings.com/2023/03/how-does-your-computer-know-what-time-it-is-and-why-will-it-break-your-distributed-systems/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eReplication: Can we have more than one leader? - \u003ca href=\"https://distributed-computing-musings.com/2022/01/replication-can-we-have-more-than-one-leader/\"\u003ehttps://distributed-computing-musings.com/2022/01/replication-can-we-have-more-than-one-leader/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eReplication: Conflict resolution in multi-leader replication - \u003ca href=\"https://distributed-computing-musings.com/2022/01/replication-conflict-resolution-in-multi-leader-replication/\"\u003ehttps://distributed-computing-musings.com/2022/01/replication-conflict-resolution-in-multi-leader-replication/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eLeslie Lamport: Thinking Above the Code - \u003ca href=\"https://www.youtube.com/watch?v=-4Yp3j_jk8Q\"\u003ehttps://www.youtube.com/watch?v=-4Yp3j_jk8Q\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDead letter queue - \u003ca href=\"https://en.wikipedia.org/wiki/Dead_letter_queue\"\u003ehttps://en.wikipedia.org/wiki/Dead_letter_queue\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDisaster Recovery for Multi-Region Kafka at Uber - \u003ca href=\"https://www.uber.com/en-BR/blog/kafka/\"\u003ehttps://www.uber.com/en-BR/blog/kafka/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSome possible reasons for 8-bit bytes - \u003ca href=\"https://jvns.ca/blog/2023/03/06/possible-reasons-8-bit-bytes/\"\u003ehttps://jvns.ca/blog/2023/03/06/possible-reasons-8-bit-bytes/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eUse of Formal Methods at Amazon Web Services - \u003ca href=\"https://lamport.azurewebsites.net/tla/formal-methods-amazon.pdf\"\u003ehttps://lamport.azurewebsites.net/tla/formal-methods-amazon.pdf\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSTOP! This Is How You Structure Golang Applications - \u003ca href=\"https://www.youtube.com/watch?v=eSDYl-RuHjc\"\u003ehttps://www.youtube.com/watch?v=eSDYl-RuHjc\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eExploring TLA+ with two-phase commit - \u003ca href=\"https://brooker.co.za/blog/2013/01/20/two-phase.html\"\u003ehttps://brooker.co.za/blog/2013/01/20/two-phase.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhat is AWS Identity and Access Management Roles Anywhere? - \u003ca href=\"https://docs.aws.amazon.com/rolesanywhere/latest/userguide/introduction.html\"\u003ehttps://docs.aws.amazon.com/rolesanywhere/latest/userguide/introduction.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eIs it better to split Kafka clusters? - \u003ca href=\"https://developers.redhat.com/articles/2022/03/10/which-better-single-kafka-cluster-rule-them-all-or-many\"\u003ehttps://developers.redhat.com/articles/2022/03/10/which-better-single-kafka-cluster-rule-them-all-or-many#\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDistributed transaction patterns for microservices compared - \u003ca href=\"https://developers.redhat.com/articles/2021/09/21/distributed-transaction-patterns-microservices-compared\"\u003ehttps://developers.redhat.com/articles/2021/09/21/distributed-transaction-patterns-microservices-compared#\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHashicorp\u0026rsquo;s banking story - \u003ca href=\"https://mitchellh.com/writing/my-startup-banking-story\"\u003ehttps://mitchellh.com/writing/my-startup-banking-story\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eListen to Yourself: A Design Pattern for Event-Driven Microservices - \u003ca href=\"https://medium.com/@odedia/listen-to-yourself-design-pattern-for-event-driven-microservices-16f97e3ed066\"\u003ehttps://medium.com/@odedia/listen-to-yourself-design-pattern-for-event-driven-microservices-16f97e3ed066\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e(Un) Reliability in messaging: idempotency and de-duplication - \u003ca href=\"https://lostechies.com/jimmybogard/2013/06/03/un-reliability-in-messaging-idempotency-and-de-duplication/\"\u003ehttps://lostechies.com/jimmybogard/2013/06/03/un-reliability-in-messaging-idempotency-and-de-duplication/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eACID 2.0 in action - \u003ca href=\"https://lostechies.com/jimmybogard/2013/06/06/acid-2-0-in-action/\"\u003ehttps://lostechies.com/jimmybogard/2013/06/06/acid-2-0-in-action/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eACID 2.0 - \u003ca href=\"https://www.waitingforcode.com/general-big-data/acid-2-0/read\"\u003ehttps://www.waitingforcode.com/general-big-data/acid-2-0/read\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAchieving consistency without transaction managers - \u003ca href=\"https://blog.bernd-ruecker.com/achieving-consistency-without-transaction-managers-7cb480bd08c\"\u003ehttps://blog.bernd-ruecker.com/achieving-consistency-without-transaction-managers-7cb480bd08c\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eGo runtime vs CFS quota - \u003ca href=\"https://vladimir.varank.in/notes/2023/01/go-runtime-vs-cfs-quota/\"\u003ehttps://vladimir.varank.in/notes/2023/01/go-runtime-vs-cfs-quota/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eShould I take a systems reading course? - \u003ca href=\"https://www.the-paper-trail.org/post/2012-03-09-should-i-take-a-systems-reading-course/\"\u003ehttps://www.the-paper-trail.org/post/2012-03-09-should-i-take-a-systems-reading-course/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow to do distributed locking - \u003ca href=\"https://martin.kleppmann.com/2016/02/08/how-to-do-distributed-locking.html\"\u003ehttps://martin.kleppmann.com/2016/02/08/how-to-do-distributed-locking.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eChange Data Capture + Event Driven Architecture - \u003ca href=\"https://www.youtube.com/watch?v=ARWNnnDGPag\"\u003ehttps://www.youtube.com/watch?v=ARWNnnDGPag\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eIsaac Freund: May 2022 Status Update - \u003ca href=\"https://isaacfreund.com/blog/\"\u003ehttps://isaacfreund.com/blog/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eServer Name Indication - \u003ca href=\"https://en.wikipedia.org/wiki/Server_Name_Indication\"\u003ehttps://en.wikipedia.org/wiki/Server_Name_Indication\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSOCKS Protocol Version 5 - \u003ca href=\"https://www.rfc-editor.org/rfc/rfc1928\"\u003ehttps://www.rfc-editor.org/rfc/rfc1928\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThree Clocks are Better than One - \u003ca href=\"https://tigerbeetle.com/blog/three-clocks-are-better-than-one/\"\u003ehttps://tigerbeetle.com/blog/three-clocks-are-better-than-one/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMissing CLOCK_BOOTTIME_RAW? - \u003ca href=\"https://lkml.org/lkml/2020/5/8/1707\"\u003ehttps://lkml.org/lkml/2020/5/8/1707\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eVirtual Synchrony - \u003ca href=\"https://people.cs.rutgers.edu/~pxk/417/notes/virtual_synchrony.html\"\u003ehttps://people.cs.rutgers.edu/~pxk/417/notes/virtual_synchrony.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMust move types - \u003ca href=\"https://smallcultfollowing.com/babysteps/blog/2023/03/16/must-move-types/\"\u003ehttps://smallcultfollowing.com/babysteps/blog/2023/03/16/must-move-types/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eNil is not nil - \u003ca href=\"https://yourbasic.org/golang/gotcha-why-nil-error-not-equal-nil/\"\u003ehttps://yourbasic.org/golang/gotcha-why-nil-error-not-equal-nil/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e11 Essentials For New Software Engineers (From A Principal Engineer) - \u003ca href=\"https://www.youtube.com/watch?v=kmnG5Fy8kEs\"\u003ehttps://www.youtube.com/watch?v=kmnG5Fy8kEs\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhy you should avoid Date.now() to measure time durations - \u003ca href=\"https://blog.insiderattack.net/how-not-to-measure-time-in-programming-11089d546180\"\u003ehttps://blog.insiderattack.net/how-not-to-measure-time-in-programming-11089d546180\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eExploring the PROXY Protocol - \u003ca href=\"https://seriousben.com/posts/2020-02-exploring-the-proxy-protocol/\"\u003ehttps://seriousben.com/posts/2020-02-exploring-the-proxy-protocol/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhat Is SSL Passthrough? How Does SSL Passthrough Work? - \u003ca href=\"https://www.ssl2buy.com/wiki/ssl-passthrough-work\"\u003ehttps://www.ssl2buy.com/wiki/ssl-passthrough-work\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eNodeJS Architecture - I/O - \u003ca href=\"https://www.youtube.com/watch?v=DaU1-XoANig\"\u003ehttps://www.youtube.com/watch?v=DaU1-XoANig\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eShard (database architecture) - \u003ca href=\"https://en.wikipedia.org/wiki/Shard_%28database_architecture%29\"\u003ehttps://en.wikipedia.org/wiki/Shard_(database_architecture)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eRoy\u0026rsquo;s Technology Diary: Shard - A Database Design - \u003ca href=\"http://technoroy.blogspot.com/2008/07/shard-database-design.html\"\u003ehttp://technoroy.blogspot.com/2008/07/shard-database-design.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDistributed Systems 1.1: Introduction - \u003ca href=\"https://www.youtube.com/watch?v=UEAMfLPZZhE\u0026amp;list=PLeKd45zvjcDFUEv_ohr_HdUFe97RItdiB\u0026amp;index=1\"\u003ehttps://www.youtube.com/watch?v=UEAMfLPZZhE\u0026list=PLeKd45zvjcDFUEv_ohr_HdUFe97RItdiB\u0026index=1\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDistributed Systems 1.2: Computer networking - \u003ca href=\"https://www.youtube.com/watch?v=1F3DEq8ML1U\u0026amp;list=PLeKd45zvjcDFUEv_ohr_HdUFe97RItdiB\u0026amp;index=2\"\u003ehttps://www.youtube.com/watch?v=1F3DEq8ML1U\u0026list=PLeKd45zvjcDFUEv_ohr_HdUFe97RItdiB\u0026index=2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDistributed Systems 1.3: RPC (Remote Procedure Call) - \u003ca href=\"https://www.youtube.com/watch?v=S2osKiqQG9s\u0026amp;list=PLeKd45zvjcDFUEv_ohr_HdUFe97RItdiB\u0026amp;index=3\"\u003ehttps://www.youtube.com/watch?v=S2osKiqQG9s\u0026list=PLeKd45zvjcDFUEv_ohr_HdUFe97RItdiB\u0026index=3\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDistributed Systems 2.1: The two generals problem - \u003ca href=\"https://www.youtube.com/watch?v=MDuWnzVnfpI\u0026amp;list=PLeKd45zvjcDFUEv_ohr_HdUFe97RItdiB\u0026amp;index=4\"\u003ehttps://www.youtube.com/watch?v=MDuWnzVnfpI\u0026list=PLeKd45zvjcDFUEv_ohr_HdUFe97RItdiB\u0026index=4\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDistributed Systems 2.2: The Byzantine generals problem - \u003ca href=\"https://www.youtube.com/watch?v=LoGx_ldRBU0\u0026amp;list=PLeKd45zvjcDFUEv_ohr_HdUFe97RItdiB\u0026amp;index=5\"\u003ehttps://www.youtube.com/watch?v=LoGx_ldRBU0\u0026list=PLeKd45zvjcDFUEv_ohr_HdUFe97RItdiB\u0026index=5\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eOutliers: Why Some People Succeed and Some Don\u0026rsquo;t - \u003ca href=\"https://www.youtube.com/watch?v=EcMKLwVlpJk\"\u003ehttps://www.youtube.com/watch?v=EcMKLwVlpJk\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eEverything You Need to Know About DNS (Domain Name System) - \u003ca href=\"https://www.youtube.com/watch?v=27r4Bzuj5NQ\"\u003ehttps://www.youtube.com/watch?v=27r4Bzuj5NQ\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eConsensus Protocols: Three-phase Commit - \u003ca href=\"https://www.the-paper-trail.org/post/2008-11-29-consensus-protocols-three-phase-commit/\"\u003ehttps://www.the-paper-trail.org/post/2008-11-29-consensus-protocols-three-phase-commit/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSteve Yegge\u0026rsquo;s rant about Google not having a platform - \u003ca href=\"https://web.archive.org/web/20190319154842/https://plus.google.com/112678702228711889851/posts/eVeouesvaVX\"\u003ehttps://web.archive.org/web/20190319154842/https://plus.google.com/112678702228711889851/posts/eVeouesvaVX\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e276 - OBJETOS VERSUS FUNÇÕES ⚔️⚔️⚔️ | theWiseDev Functional - \u003ca href=\"https://www.youtube.com/watch?v=yz_nNpr_hCc\"\u003ehttps://www.youtube.com/watch?v=yz_nNpr_hCc\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow robust are gossip-based communication protocols? - \u003ca href=\"https://www.cs.cornell.edu/lorenzo/papers/p14-alvisi.pdf\"\u003ehttps://www.cs.cornell.edu/lorenzo/papers/p14-alvisi.pdf\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAll Postgres Locks Explained | A Deep Dive - \u003ca href=\"https://www.youtube.com/watch?v=URwmzTeuHdk\"\u003ehttps://www.youtube.com/watch?v=URwmzTeuHdk\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe tail at scale - \u003ca href=\"https://abelay.github.io/6828seminar/papers/dean:tailatscale.pdf\"\u003ehttps://abelay.github.io/6828seminar/papers/dean:tailatscale.pdf\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eExploit Development Part 6 - Writing A ROP Decoder - \u003ca href=\"https://www.youtube.com/watch?v=muhqy8tm2nc\"\u003ehttps://www.youtube.com/watch?v=muhqy8tm2nc\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eGoogle cloud: External TCP/UDP Network Load Balancing overview - \u003ca href=\"https://cloud.google.com/load-balancing/docs/network\"\u003ehttps://cloud.google.com/load-balancing/docs/network\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDefer blocks and async drop - \u003ca href=\"https://www.ncameron.org/blog/defer-blocks-and-async-drop/\"\u003ehttps://www.ncameron.org/blog/defer-blocks-and-async-drop/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eArroyo: 10x faster sliding windows: how our Rust streaming engine beats Flink - \u003ca href=\"https://www.arroyo.dev/blog/how-arroyo-beats-flink-at-sliding-windows\"\u003ehttps://www.arroyo.dev/blog/how-arroyo-beats-flink-at-sliding-windows\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e10+ Scala Concepts you Need to Know - \u003ca href=\"https://www.youtube.com/watch?v=nI57LUpjGrk\"\u003ehttps://www.youtube.com/watch?v=nI57LUpjGrk\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eUnderstand Cloud Load Balancer Like a Senior Engineer - \u003ca href=\"https://medium.com/google-cloud/understand-cloud-load-balancer-like-a-senior-engineer-d4f55f3111fc\"\u003ehttps://medium.com/google-cloud/understand-cloud-load-balancer-like-a-senior-engineer-d4f55f3111fc\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow consistent is eventual consistency? - \u003ca href=\"https://www.the-paper-trail.org/post/2012-01-04-how-consistent-is-eventual-consistency/\"\u003ehttps://www.the-paper-trail.org/post/2012-01-04-how-consistent-is-eventual-consistency/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eGetting schooled by AI, colleges must evolve - \u003ca href=\"https://muratbuffalo.blogspot.com/2023/03/getting-schooled-by-ai-colleges-must.html\"\u003ehttps://muratbuffalo.blogspot.com/2023/03/getting-schooled-by-ai-colleges-must.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eBowling your way to the top - \u003ca href=\"https://muratbuffalo.blogspot.com/2017/02/bowling-your-way-to-top.html\"\u003ehttps://muratbuffalo.blogspot.com/2017/02/bowling-your-way-to-top.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow to go for 10X - How to go for 10X - \u003ca href=\"http://muratbuffalo.blogspot.com/2015/08/how-to-go-for-10x.html\"\u003ehttp://muratbuffalo.blogspot.com/2015/08/how-to-go-for-10x.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe Most Beloved Burger for Developers - \u003ca href=\"https://www.youtube.com/watch?v=7swoLEqABhQ\"\u003ehttps://www.youtube.com/watch?v=7swoLEqABhQ\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eIntroducing Grafana Cloud k6 - \u003ca href=\"https://www.youtube.com/watch?v=HyM4lNZjKqk\"\u003ehttps://www.youtube.com/watch?v=HyM4lNZjKqk\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eEnsuring rollback safety during deployments - \u003ca href=\"https://aws.amazon.com/builders-library/ensuring-rollback-safety-during-deployments/\"\u003ehttps://aws.amazon.com/builders-library/ensuring-rollback-safety-during-deployments/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eIn response to a frontend developer asking about database development - \u003ca href=\"https://letters.eatonphil.com/2023-01-01-letter-to-a-frontend-developer-asking-about-database-development.html\"\u003ehttps://letters.eatonphil.com/2023-01-01-letter-to-a-frontend-developer-asking-about-database-development.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhat\u0026rsquo;s the biggest scam in software development? - \u003ca href=\"https://www.youtube.com/watch?v=QZMAYA19mY4\"\u003ehttps://www.youtube.com/watch?v=QZMAYA19mY4\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eI built my own memory profiler (in Rust, on Linux) - \u003ca href=\"https://www.youtube.com/watch?v=DpnXaNkM9_M\"\u003ehttps://www.youtube.com/watch?v=DpnXaNkM9_M\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe Birds in Your Code are Dying to Tell You Something - \u003ca href=\"https://www.youtube.com/watch?v=z6gdQt8mjn4\"\u003ehttps://www.youtube.com/watch?v=z6gdQt8mjn4\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eIs there a drop in software engineer job openings, globally? - \u003ca href=\"https://newsletter.pragmaticengineer.com/p/is-there-a-drop-in-software-engineer?utm_source=substack\u0026amp;utm_medium=email\"\u003ehttps://newsletter.pragmaticengineer.com/p/is-there-a-drop-in-software-engineer?utm_source=substack\u0026utm_medium=email\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe Verification of a Distributed System - \u003ca href=\"https://queue.acm.org/detail.cfm?ref=rss\u0026amp;id=2889274\"\u003ehttps://queue.acm.org/detail.cfm?ref=rss\u0026id=2889274\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHermetic Servers - \u003ca href=\"https://testing.googleblog.com/2012/10/hermetic-servers.html\"\u003ehttps://testing.googleblog.com/2012/10/hermetic-servers.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eOn Ways To Agree, Part 1: DistSys Vocabulary - \u003ca href=\"https://medium.com/databasss/on-ways-to-agree-part-1-links-and-flp-impossibility-f6bd8a6a0980\"\u003ehttps://medium.com/databasss/on-ways-to-agree-part-1-links-and-flp-impossibility-f6bd8a6a0980\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSafety and Liveness: Eventual Consistency Is Not Safe - \u003ca href=\"http://www.bailis.org/blog/safety-and-liveness-eventual-consistency-is-not-safe/\"\u003ehttp://www.bailis.org/blog/safety-and-liveness-eventual-consistency-is-not-safe/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTCP Flow Control - \u003ca href=\"https://www.brianstorti.com/tcp-flow-control/\"\u003ehttps://www.brianstorti.com/tcp-flow-control/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eUsing Rust to Build a 100% ScyllaDB Shard-Aware Application - \u003ca href=\"https://thenewstack.io/using-rust-to-build-a-100-scylladb-shard-aware-application/\"\u003ehttps://thenewstack.io/using-rust-to-build-a-100-scylladb-shard-aware-application/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSwitch Your Databases To Flash Storage. Now. Or You\u0026rsquo;re Doing It Wrong. - \u003ca href=\"http://highscalability.com/blog/2012/12/10/switch-your-databases-to-flash-storage-now-or-youre-doing-it.html\"\u003ehttp://highscalability.com/blog/2012/12/10/switch-your-databases-to-flash-storage-now-or-youre-doing-it.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWerner Vogels: Eventually Consistent - Revisited - \u003ca href=\"https://www.allthingsdistributed.com/2008/12/eventually_consistent.html\"\u003ehttps://www.allthingsdistributed.com/2008/12/eventually_consistent.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMartin Kleppmann, Alastair R. Beresford, and Boerge Sving: Online event processing - \u003ca href=\"https://queue.acm.org/detail.cfm?id=3321612\"\u003ehttps://queue.acm.org/detail.cfm?id=3321612\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe Unix process API is unreliable and unsafe - \u003ca href=\"http://catern.com/process.html\"\u003ehttp://catern.com/process.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTime-of-check to time-of-use - \u003ca href=\"https://en.wikipedia.org/wiki/Time-of-check_to_time-of-use\"\u003ehttps://en.wikipedia.org/wiki/Time-of-check_to_time-of-use\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eBeyond process supervisors - \u003ca href=\"http://catern.com/supervisors.html\"\u003ehttp://catern.com/supervisors.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eIntroduction To The Actor Paradigm In Golang - \u003ca href=\"https://www.youtube.com/watch?v=EXThuaEzxdc\"\u003ehttps://www.youtube.com/watch?v=EXThuaEzxdc\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWait-for graph - \u003ca href=\"https://www.cs.colostate.edu/~cs551/CourseNotes/Deadlock/WFGs.html\"\u003ehttps://www.cs.colostate.edu/~cs551/CourseNotes/Deadlock/WFGs.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWikipedia: Wait-for graph - \u003ca href=\"https://en.wikipedia.org/wiki/Wait-for_graph#:~:text=A%20wait%2Dfor%20graph%20in,systems%20and%20relational%20database%20systems\"\u003ehttps://en.wikipedia.org/wiki/Wait-for_graph#:~:text=A%20wait%2Dfor%20graph%20in,systems%20and%20relational%20database%20systems\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003ePat Helland: Consistently Eventual For many data items, the work never settles on a value. - \u003ca href=\"https://queue.acm.org/detail.cfm?id=3226077\"\u003ehttps://queue.acm.org/detail.cfm?id=3226077\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eEvolution and Practice: Low-latency Distributed Applications in Finance The finance industry has unique demands for low-latency distributed systems. - \u003ca href=\"https://queue.acm.org/detail.cfm?id=2770868\"\u003ehttps://queue.acm.org/detail.cfm?id=2770868\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMatklad: Zig and Rust - \u003ca href=\"https://matklad.github.io/2023/03/26/zig-and-rust.html\"\u003ehttps://matklad.github.io/2023/03/26/zig-and-rust.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eRust\u0026rsquo;s Golden Rule - \u003ca href=\"https://steveklabnik.com/writing/rusts-golden-rule\"\u003ehttps://steveklabnik.com/writing/rusts-golden-rule\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMatklad: Call Site Dependency Injection - \u003ca href=\"https://matklad.github.io/2020/12/28/csdi.html\"\u003ehttps://matklad.github.io/2020/12/28/csdi.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eRiak: What in the hell is HyperLogLog - \u003ca href=\"https://riak.com/posts/technical/what-in-the-hell-is-hyperloglog/index.html?p=13169.html\"\u003ehttps://riak.com/posts/technical/what-in-the-hell-is-hyperloglog/index.html?p=13169.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e10+ Key Memory \u0026amp; Storage Systems - \u003ca href=\"https://www.youtube.com/watch?v=lX4CrbXMsNQ\"\u003ehttps://www.youtube.com/watch?v=lX4CrbXMsNQ\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTigerbeetle: Random fuzzy thoughts - \u003ca href=\"https://tigerbeetle.com/blog/2023-03-28-random-fuzzy-thoughts/\"\u003ehttps://tigerbeetle.com/blog/2023-03-28-random-fuzzy-thoughts/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eEricsson: Packet reordering: The key to efficient high-speed packet processing - \u003ca href=\"https://www.ericsson.com/en/blog/2022/8/packet-reordering-effects-on-packet-processing\"\u003ehttps://www.ericsson.com/en/blog/2022/8/packet-reordering-effects-on-packet-processing\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eGoogle cloud tech: What are service accounts? - \u003ca href=\"https://www.youtube.com/watch?v=xXk1YlkKW_k\"\u003ehttps://www.youtube.com/watch?v=xXk1YlkKW_k\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eoh $%!\u0026amp;, I didn\u0026rsquo;t want to do that! UNDO UNDO UNDO! - \u003ca href=\"https://www.youtube.com/watch?v=8J9qwtooKoI\"\u003ehttps://www.youtube.com/watch?v=8J9qwtooKoI\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTorvalds being rude(what a surprise) - \u003ca href=\"https://lkml.org/lkml/2022/9/19/1105#1105.php\"\u003ehttps://lkml.org/lkml/2022/9/19/1105#1105.php\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eRust is a scalable language - \u003ca href=\"https://matklad.github.io/2023/03/28/rust-is-a-scalable-language.html\"\u003ehttps://matklad.github.io/2023/03/28/rust-is-a-scalable-language.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eYOSHUA WUYTS: Linear types one-pager - \u003ca href=\"https://blog.yoshuawuyts.com/linear-types-one-pager/\"\u003ehttps://blog.yoshuawuyts.com/linear-types-one-pager/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDominik Tornow: Getting started with small-step operational semantics - \u003ca href=\"https://dominik-tornow.medium.com/getting-started-with-small-step-operational-semantics-9531a35621e0\"\u003ehttps://dominik-tornow.medium.com/getting-started-with-small-step-operational-semantics-9531a35621e0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWebSockets: Scale at Fractional Footprint in Go - \u003ca href=\"https://www.druva.com/blog/websockets--scale-at-fractional-footprint-in-go\"\u003ehttps://www.druva.com/blog/websockets--scale-at-fractional-footprint-in-go\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eLife in a Redis Cluster: Meet and Gossip with your neighbors - \u003ca href=\"https://cristian.regolo.cc/2015/09/05/life-in-a-redis-cluster.html\"\u003ehttps://cristian.regolo.cc/2015/09/05/life-in-a-redis-cluster.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSimulatedRides: How Lyft uses load testing to ensure reliable service during peak events - \u003ca href=\"https://eng.lyft.com/simulatedrides-how-lyft-uses-load-testing-to-ensure-reliable-service-during-peak-events-644dcb654454\"\u003ehttps://eng.lyft.com/simulatedrides-how-lyft-uses-load-testing-to-ensure-reliable-service-during-peak-events-644dcb654454\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDominik Tornow: What is a Saga in Microservices? - \u003ca href=\"https://www.youtube.com/watch?v=0W8BtIwh824\"\u003ehttps://www.youtube.com/watch?v=0W8BtIwh824\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003emcyoung: Atomicless concurrency - \u003ca href=\"https://mcyoung.xyz/2023/03/29/rseq-checkout/\"\u003ehttps://mcyoung.xyz/2023/03/29/rseq-checkout/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eGrafana Phlare hash rings - \u003ca href=\"https://grafana.com/docs/phlare/latest/operators-guide/architecture/hash-ring/\"\u003ehttps://grafana.com/docs/phlare/latest/operators-guide/architecture/hash-ring/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eGrafana Phlare memberlist and gossip protocol - \u003ca href=\"https://grafana.com/docs/phlare/latest/operators-guide/architecture/memberlist-and-the-gossip-protocol/\"\u003ehttps://grafana.com/docs/phlare/latest/operators-guide/architecture/memberlist-and-the-gossip-protocol/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eCassandra and its Accrual Failure Detector - \u003ca href=\"https://ljungblad.nu/post/44006928392/cassandra-and-its-accrual-failure-detector\"\u003ehttps://ljungblad.nu/post/44006928392/cassandra-and-its-accrual-failure-detector\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eChain replication - \u003ca href=\"http://dsrg.pdos.csail.mit.edu/2013/08/08/chain-replication/\"\u003ehttp://dsrg.pdos.csail.mit.edu/2013/08/08/chain-replication/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eObservational equivalence and unsafe code - \u003ca href=\"https://smallcultfollowing.com/babysteps/blog/2016/10/02/observational-equivalence-and-unsafe-code/\"\u003ehttps://smallcultfollowing.com/babysteps/blog/2016/10/02/observational-equivalence-and-unsafe-code/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eClocks and Causality - Ordering Events in Distributed Systems - \u003ca href=\"https://www.exhypothesi.com/clocks-and-causality/\"\u003ehttps://www.exhypothesi.com/clocks-and-causality/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTwitter\u0026rsquo;s Recommendation Algorithm - \u003ca href=\"https://blog.twitter.com/engineering/en_us/topics/open-source/2023/twitter-recommendation-algorithm\"\u003ehttps://blog.twitter.com/engineering/en_us/topics/open-source/2023/twitter-recommendation-algorithm\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eCoroutines in less than 20 lines of standard C - \u003ca href=\"https://fanf.livejournal.com/105413.html\"\u003ehttps://fanf.livejournal.com/105413.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTwo trie implementations in Rust (one\u0026rsquo;s super fast) - \u003ca href=\"https://dev.to/timclicks/two-trie-implementations-in-rust-ones-super-fast-2f3m\"\u003ehttps://dev.to/timclicks/two-trie-implementations-in-rust-ones-super-fast-2f3m\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eA brutally effective hash function in Rust - \u003ca href=\"https://nnethercote.github.io/2021/12/08/a-brutally-effective-hash-function-in-rust.html\"\u003ehttps://nnethercote.github.io/2021/12/08/a-brutally-effective-hash-function-in-rust.html\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"april\"\u003eApril\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eAn Effective Way To Authorize Handlers In Golang - \u003ca href=\"https://www.youtube.com/watch?v=MmPItr7-MdM\"\u003ehttps://www.youtube.com/watch?v=MmPItr7-MdM\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSouJava na Campus - Evitando Race Conditions em Aplicações Distribuídas - \u003ca href=\"https://www.youtube.com/watch?v=7DYE0mY0CRE\"\u003ehttps://www.youtube.com/watch?v=7DYE0mY0CRE\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eCaitie McCaffrey on \u0026ldquo;Distributed Programming in Argus\u0026rdquo; - \u003ca href=\"https://www.youtube.com/watch?v=-osjxoiP4rg\"\u003ehttps://www.youtube.com/watch?v=-osjxoiP4rg\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow And When To Use io.MultiWriter In Golang!? - \u003ca href=\"https://www.youtube.com/watch?v=g9tv-M-VCpU\"\u003ehttps://www.youtube.com/watch?v=g9tv-M-VCpU\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eLunatic: Writing Rust the Elixir way - \u003ca href=\"https://lunatic.solutions/blog/writing-rust-the-elixir-way/\"\u003ehttps://lunatic.solutions/blog/writing-rust-the-elixir-way/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eLunatic: Writing Rust the Elixir way - 18 months later - \u003ca href=\"https://lunatic.solutions/blog/writing-rust-the-elixir-way-1.5-years-later/\"\u003ehttps://lunatic.solutions/blog/writing-rust-the-elixir-way-1.5-years-later/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMERKLE TREES AND THEIR APPLICATION IN GIT - \u003ca href=\"https://ieee.nitk.ac.in/blog/merkle-trees-and-their-application-in-git/\"\u003ehttps://ieee.nitk.ac.in/blog/merkle-trees-and-their-application-in-git/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMulticast - \u003ca href=\"https://en.wikipedia.org/wiki/Multicast\"\u003ehttps://en.wikipedia.org/wiki/Multicast\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eCloudflare: Everything you ever wanted to know about UDP sockets but were afraid to ask, part 1 - \u003ca href=\"https://blog.cloudflare.com/everything-you-ever-wanted-to-know-about-udp-sockets-but-were-afraid-to-ask-part-1/\"\u003ehttps://blog.cloudflare.com/everything-you-ever-wanted-to-know-about-udp-sockets-but-were-afraid-to-ask-part-1/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eCache Systems Every Developer Should Know - \u003ca href=\"https://www.youtube.com/watch?v=dGAgxozNWFE\"\u003ehttps://www.youtube.com/watch?v=dGAgxozNWFE\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSpeeding up Queries by Pre-computation \u0026amp; Transformation - \u003ca href=\"https://www.youtube.com/watch?v=hQVisFBAQio\"\u003ehttps://www.youtube.com/watch?v=hQVisFBAQio\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDatabase Pages — A deep dive - \u003ca href=\"https://medium.com/@hnasr/database-pages-a-deep-dive-38cdb2c79eb5\"\u003ehttps://medium.com/@hnasr/database-pages-a-deep-dive-38cdb2c79eb5\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHoley JavaScript Arrays - \u003ca href=\"https://abdulapopoola.com/2020/10/12/holey-javascript-arrays/\"\u003ehttps://abdulapopoola.com/2020/10/12/holey-javascript-arrays/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eJavaScript Arrays Are Objects - \u003ca href=\"https://abdulapopoola.com/2020/09/30/javascript-arrays-are-objects/\"\u003ehttps://abdulapopoola.com/2020/09/30/javascript-arrays-are-objects/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eArray iteration and holes in JavaScript - \u003ca href=\"https://2ality.com/2013/07/array-iteration-holes.html\"\u003ehttps://2ality.com/2013/07/array-iteration-holes.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWindows Internals - Processes and Threads Explained - Windows Internals - Processes and Threads Explained\u003c/li\u003e\n\u003cli\u003e\u0026ldquo;Making Systems Programming Accessible\u0026rdquo; by Andrew Kelley - \u003ca href=\"https://www.youtube.com/watch?v=Qncdi-Fg0-I\"\u003ehttps://www.youtube.com/watch?v=Qncdi-Fg0-I\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow do you choose a suitable gossip protocol for your distributed system? - \u003ca href=\"https://www.linkedin.com/advice/0/how-do-you-choose-suitable-gossip-protocol\"\u003ehttps://www.linkedin.com/advice/0/how-do-you-choose-suitable-gossip-protocol\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003erand( ) isn\u0026rsquo;t doing what you think it does - \u003ca href=\"https://www.youtube.com/watch?v=wDj64pSeQ4I\"\u003ehttps://www.youtube.com/watch?v=wDj64pSeQ4I\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWikipedia: Gossip protocol - \u003ca href=\"https://en.wikipedia.org/wiki/Gossip_protocol\"\u003ehttps://en.wikipedia.org/wiki/Gossip_protocol\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMartin Fowler: Gossip Dissemination - \u003ca href=\"https://martinfowler.com/articles/patterns-of-distributed-systems/gossip-dissemination.html\"\u003ehttps://martinfowler.com/articles/patterns-of-distributed-systems/gossip-dissemination.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMartin Fowler: Consistent core - \u003ca href=\"https://martinfowler.com/articles/patterns-of-distributed-systems/consistent-core.html\"\u003ehttps://martinfowler.com/articles/patterns-of-distributed-systems/consistent-core.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMartin Fowler: Generation clock - \u003ca href=\"https://martinfowler.com/articles/patterns-of-distributed-systems/generation.html\"\u003ehttps://martinfowler.com/articles/patterns-of-distributed-systems/generation.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ePhil Wadler: Featherweight Go - \u003ca href=\"https://www.youtube.com/watch?v=Dq0WFigax_c\"\u003ehttps://www.youtube.com/watch?v=Dq0WFigax_c\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eKIP-650: Enhance Kafkaesque Raft semantics - \u003ca href=\"https://cwiki.apache.org/confluence/display/KAFKA/KIP-650%3A\u0026#43;Enhance\u0026#43;Kafkaesque\u0026#43;Raft\u0026#43;semantics#KIP650:EnhanceKafkaesqueRaftsemantics-Non-leaderLinearizableRead\"\u003ehttps://cwiki.apache.org/confluence/display/KAFKA/KIP-650%3A+Enhance+Kafkaesque+Raft+semantics#KIP650:EnhanceKafkaesqueRaftsemantics-Non-leaderLinearizableRead\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eScylla docs: Gossip in Scylla - \u003ca href=\"https://docs.scylladb.com/stable/kb/gossip.html\"\u003ehttps://docs.scylladb.com/stable/kb/gossip.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHigh scalability: Using Gossip Protocols For Failure Detection, Monitoring, Messaging And Other Good Things - \u003ca href=\"http://highscalability.com/blog/2011/11/14/using-gossip-protocols-for-failure-detection-monitoring-mess.html\"\u003ehttp://highscalability.com/blog/2011/11/14/using-gossip-protocols-for-failure-detection-monitoring-mess.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eApple Inc.: Cassandra Internals — Understanding Gossip - \u003ca href=\"https://www.youtube.com/watch?v=FuP1Fvrv6ZQ\u0026amp;list=PLqcm6qE9lgKJkxYZUOIykswDndrOItnn2\u0026amp;index=50\"\u003ehttps://www.youtube.com/watch?v=FuP1Fvrv6ZQ\u0026list=PLqcm6qE9lgKJkxYZUOIykswDndrOItnn2\u0026index=50\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMartin Fowler: High-water mark - \u003ca href=\"https://martinfowler.com/articles/patterns-of-distributed-systems/high-watermark.html\"\u003ehttps://martinfowler.com/articles/patterns-of-distributed-systems/high-watermark.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMartin Fowler: Write-ahead log - \u003ca href=\"https://martinfowler.com/articles/patterns-of-distributed-systems/wal.html\"\u003ehttps://martinfowler.com/articles/patterns-of-distributed-systems/wal.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMartin Fowler: Low-water mark - \u003ca href=\"https://martinfowler.com/articles/patterns-of-distributed-systems/low-watermark.html\"\u003ehttps://martinfowler.com/articles/patterns-of-distributed-systems/low-watermark.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMartin Fowler: Singular update queue - \u003ca href=\"https://martinfowler.com/articles/patterns-of-distributed-systems/singular-update-queue.html\"\u003ehttps://martinfowler.com/articles/patterns-of-distributed-systems/singular-update-queue.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMechanical sympathy: Single writer principle - \u003ca href=\"https://mechanical-sympathy.blogspot.com/2011/09/single-writer-principle.html\"\u003ehttps://mechanical-sympathy.blogspot.com/2011/09/single-writer-principle.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMartin Fowler: Single socket channel - \u003ca href=\"https://martinfowler.com/articles/patterns-of-distributed-systems/single-socket-channel.html\"\u003ehttps://martinfowler.com/articles/patterns-of-distributed-systems/single-socket-channel.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHands-Free Kafka Replication: A Lesson in Operational Simplicity - \u003ca href=\"https://www.confluent.io/blog/hands-free-kafka-replication-a-lesson-in-operational-simplicity/\"\u003ehttps://www.confluent.io/blog/hands-free-kafka-replication-a-lesson-in-operational-simplicity/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eCan you truste a compiler to optimize your code? - \u003ca href=\"https://matklad.github.io/2023/04/09/can-you-trust-a-compiler-to-optimize-your-code.html\"\u003ehttps://matklad.github.io/2023/04/09/can-you-trust-a-compiler-to-optimize-your-code.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eInline in Rust - \u003ca href=\"https://matklad.github.io/2021/07/09/inline-in-rust.html\"\u003ehttps://matklad.github.io/2021/07/09/inline-in-rust.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eLoris Cro: Playing the open source game - \u003ca href=\"https://kristoff.it/blog/the-open-source-game/\"\u003ehttps://kristoff.it/blog/the-open-source-game/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eOnline gradient descent written in SQL - \u003ca href=\"https://maxhalford.github.io/blog/ogd-in-sql/\"\u003ehttps://maxhalford.github.io/blog/ogd-in-sql/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eGoogle cloud storage docs: Consistency - \u003ca href=\"https://cloud.google.com/storage/docs/consistency\"\u003ehttps://cloud.google.com/storage/docs/consistency\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe end of a myth: Distributed transactions can scale - \u003ca href=\"http://muratbuffalo.blogspot.com/2023/04/the-end-of-myth-distributed.html\"\u003ehttp://muratbuffalo.blogspot.com/2023/04/the-end-of-myth-distributed.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSilly fast fresh deploys with Rust past 1 - \u003ca href=\"https://www.youtube.com/watch?v=KAKccfVVslk\"\u003ehttps://www.youtube.com/watch?v=KAKccfVVslk\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eGuidance for cell-based architecture on AWS - \u003ca href=\"https://aws.amazon.com/solutions/guidance/cell-based-architecture-on-aws/\"\u003ehttps://aws.amazon.com/solutions/guidance/cell-based-architecture-on-aws/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSQL Maxis: Why We Ditched RabbitMQ And Replaced It With A Postgres Queue - \u003ca href=\"https://www.prequel.co/blog/sql-maxis-why-we-ditched-rabbitmq-and-replaced-it-with-a-postgres-queue\"\u003ehttps://www.prequel.co/blog/sql-maxis-why-we-ditched-rabbitmq-and-replaced-it-with-a-postgres-queue\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eStrict-serializability, but at what cost, for what purpose? - \u003ca href=\"http://muratbuffalo.blogspot.com/2022/08/strict-serializability-but-at-what-cost.html\"\u003ehttp://muratbuffalo.blogspot.com/2022/08/strict-serializability-but-at-what-cost.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eScylla paper: Reducing Complexity With a Self-Optimizing Database - \u003ca href=\"https://lp.scylladb.com/self-optimizing-database-offer.html\"\u003ehttps://lp.scylladb.com/self-optimizing-database-offer.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDatabase internals - \u003ca href=\"https://databass.dev\"\u003ehttps://databass.dev\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eBuilding a system that Junior Developers can be productive in - \u003ca href=\"https://www.youtube.com/watch?v=S0zC0u5tIx8\"\u003ehttps://www.youtube.com/watch?v=S0zC0u5tIx8\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eComponents of recursive functions | Recursion series - \u003ca href=\"https://www.youtube.com/watch?v=44TwrxjfIfo\"\u003ehttps://www.youtube.com/watch?v=44TwrxjfIfo\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eProxy Protocol: what is it and how to use it with Go - \u003ca href=\"https://inkel.github.io/posts/proxy-protocol/\"\u003ehttps://inkel.github.io/posts/proxy-protocol/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003elibuv, but multi-threaded, but not really - \u003ca href=\"http://kprotty.me/2023/04/13/libuv-but-multithreaded-but-not-really.html\"\u003ehttp://kprotty.me/2023/04/13/libuv-but-multithreaded-but-not-really.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAmazon builder\u0026rsquo;s library: Avoiding fallback in distributed systems - \u003ca href=\"https://aws.amazon.com/builders-library/avoiding-fallback-in-distributed-systems/?did=ba_card\u0026amp;trk=ba_card\"\u003ehttps://aws.amazon.com/builders-library/avoiding-fallback-in-distributed-systems/?did=ba_card\u0026trk=ba_card\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eIntro to the Zig Programming Language • Andrew Kelley • GOTO 2022 - \u003ca href=\"https://www.youtube.com/watch?v=YXrb-DqsBNU\"\u003ehttps://www.youtube.com/watch?v=YXrb-DqsBNU\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhat\u0026rsquo;s a Memory Allocator Anyway? - Benjamin Feng - \u003ca href=\"https://www.youtube.com/watch?v=vHWiDx_l4V0\"\u003ehttps://www.youtube.com/watch?v=vHWiDx_l4V0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTigerBeetle: Magical Memory Tour! (Joran Dirk Greef) - \u003ca href=\"https://www.youtube.com/watch?v=FyGukn77gqA\"\u003ehttps://www.youtube.com/watch?v=FyGukn77gqA\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eBEAM Concurrency in Action • Sasa Juric • YOW! 2022 - \u003ca href=\"https://www.youtube.com/watch?v=A4x6IfceJCM\"\u003ehttps://www.youtube.com/watch?v=A4x6IfceJCM\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eZig\u0026rsquo;s I/O and Concurrency Story - King Protty - Software You Can Love 2022 - \u003ca href=\"https://www.youtube.com/watch?v=Ul8OO4vQMTw\"\u003ehttps://www.youtube.com/watch?v=Ul8OO4vQMTw\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDistributed Systems 2.3: System models - \u003ca href=\"https://www.youtube.com/watch?v=y8f7ZG_UnGI\u0026amp;list=PLeKd45zvjcDFUEv_ohr_HdUFe97RItdiB\u0026amp;index=6\"\u003ehttps://www.youtube.com/watch?v=y8f7ZG_UnGI\u0026list=PLeKd45zvjcDFUEv_ohr_HdUFe97RItdiB\u0026index=6\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDistributed Systems 2.4: Fault tolerance - \u003ca href=\"https://www.youtube.com/watch?v=43TDfUNsM3E\u0026amp;list=PLeKd45zvjcDFUEv_ohr_HdUFe97RItdiB\u0026amp;index=7\"\u003ehttps://www.youtube.com/watch?v=43TDfUNsM3E\u0026list=PLeKd45zvjcDFUEv_ohr_HdUFe97RItdiB\u0026index=7\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDistributed Systems 3.1: Physical time - \u003ca href=\"https://www.youtube.com/watch?v=FQ_2N3AQu0M\u0026amp;list=PLeKd45zvjcDFUEv_ohr_HdUFe97RItdiB\u0026amp;index=8\"\u003ehttps://www.youtube.com/watch?v=FQ_2N3AQu0M\u0026list=PLeKd45zvjcDFUEv_ohr_HdUFe97RItdiB\u0026index=8\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDistributed Systems 3.2: Clock synchronisation - \u003ca href=\"https://www.youtube.com/watch?v=mAyW-4LeXZo\u0026amp;list=PLeKd45zvjcDFUEv_ohr_HdUFe97RItdiB\u0026amp;index=9\"\u003ehttps://www.youtube.com/watch?v=mAyW-4LeXZo\u0026list=PLeKd45zvjcDFUEv_ohr_HdUFe97RItdiB\u0026index=9\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDistributed Systems 3.3: Causality and happens-before - \u003ca href=\"https://www.youtube.com/watch?v=OKHIdpOAxto\u0026amp;list=PLeKd45zvjcDFUEv_ohr_HdUFe97RItdiB\u0026amp;index=10\"\u003ehttps://www.youtube.com/watch?v=OKHIdpOAxto\u0026list=PLeKd45zvjcDFUEv_ohr_HdUFe97RItdiB\u0026index=10\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDistributed Systems 4.1: Logical time - \u003ca href=\"https://www.youtube.com/watch?v=x-D8iFU1d-o\u0026amp;list=PLeKd45zvjcDFUEv_ohr_HdUFe97RItdiB\u0026amp;index=11\"\u003ehttps://www.youtube.com/watch?v=x-D8iFU1d-o\u0026list=PLeKd45zvjcDFUEv_ohr_HdUFe97RItdiB\u0026index=11\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eCross-site request forgery - \u003ca href=\"https://www.synopsys.com/glossary/what-is-csrf.html\"\u003ehttps://www.synopsys.com/glossary/what-is-csrf.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDOM crimes and feature flags (feat. DevCycle) - \u003ca href=\"https://www.youtube.com/watch?v=-HdTX5AfZ6c\"\u003ehttps://www.youtube.com/watch?v=-HdTX5AfZ6c\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eEfficiency trades off against resiliency - \u003ca href=\"https://blog.nelhage.com/post/efficiency-vs-resiliency/\"\u003ehttps://blog.nelhage.com/post/efficiency-vs-resiliency/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eGADTs for dummies - \u003ca href=\"https://news.ycombinator.com/item?id=27172843\"\u003ehttps://news.ycombinator.com/item?id=27172843\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003esled simulation guide (jepsen-proof engineering) - \u003ca href=\"https://sled.rs/simulation.html\"\u003ehttps://sled.rs/simulation.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSilly Fast Fresh Deploys with Rust (Part 2) - \u003ca href=\"https://www.youtube.com/watch?v=umeTH5qZUeQ\"\u003ehttps://www.youtube.com/watch?v=umeTH5qZUeQ\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u0026ldquo;Testing Distributed Systems w/ Deterministic Simulation\u0026rdquo; by Will Wilson - \u003ca href=\"https://www.youtube.com/watch?v=4fFDFbi3toc\"\u003ehttps://www.youtube.com/watch?v=4fFDFbi3toc\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe Inner Workings of Distributed Databases - \u003ca href=\"https://questdb.io/blog/inner-workings-distributed-databases/\"\u003ehttps://questdb.io/blog/inner-workings-distributed-databases/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eReduce the write amplification of write-ahead logging (WAL) - \u003ca href=\"https://scaleflux.com/reduce-write-amplification-write-ahead-logging/\"\u003ehttps://scaleflux.com/reduce-write-amplification-write-ahead-logging/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe perils of the “real” client IP - \u003ca href=\"https://adam-p.ca/blog/2022/03/x-forwarded-for/\"\u003ehttps://adam-p.ca/blog/2022/03/x-forwarded-for/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow to troubleshoot memory leaks in Go with Grafana Pyroscope - \u003ca href=\"https://grafana.com/blog/2023/04/19/how-to-troubleshoot-memory-leaks-in-go-with-grafana-pyroscope/\"\u003ehttps://grafana.com/blog/2023/04/19/how-to-troubleshoot-memory-leaks-in-go-with-grafana-pyroscope/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eCORBA vs. the Fallacies of Distributed Computing - \u003ca href=\"https://serviceweaver.dev/blog/corba.html\"\u003ehttps://serviceweaver.dev/blog/corba.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTesting sync at Dropbox - \u003ca href=\"https://dropbox.tech/infrastructure/-testing-our-new-sync-engine\"\u003ehttps://dropbox.tech/infrastructure/-testing-our-new-sync-engine\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDesigning futures for Rust - \u003ca href=\"http://aturon.github.io/tech/2016/09/07/futures-design/\"\u003ehttp://aturon.github.io/tech/2016/09/07/futures-design/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWindows Internals - Special Process Types Explained - \u003ca href=\"https://www.youtube.com/watch?v=GhG6Fc__HEE\"\u003ehttps://www.youtube.com/watch?v=GhG6Fc__HEE\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eUsing your Database as a Queue? Good or bad idea? - \u003ca href=\"https://www.youtube.com/watch?v=DOaDpHh1FsQ\"\u003ehttps://www.youtube.com/watch?v=DOaDpHh1FsQ\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMotivation \u0026amp; Making Money As A Software Engineer - \u003ca href=\"https://www.youtube.com/watch?v=3W8hUM12gQc\"\u003ehttps://www.youtube.com/watch?v=3W8hUM12gQc\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e22 - DuckDB Internals (CMU Advanced Databases / Spring 2023) - \u003ca href=\"https://www.youtube.com/watch?v=bZOvAKGkzpQ\"\u003ehttps://www.youtube.com/watch?v=bZOvAKGkzpQ\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eBuilding a low latency game server in golang - \u003ca href=\"https://www.youtube.com/watch?v=WBLpjEDNWqE\"\u003ehttps://www.youtube.com/watch?v=WBLpjEDNWqE\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAPM vs Observability - \u003ca href=\"https://www.youtube.com/watch?v=dXohgVATzDc\"\u003ehttps://www.youtube.com/watch?v=dXohgVATzDc\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eRust data modelling wih without OOP - \u003ca href=\"https://www.youtube.com/watch?v=z-0-bbc80JM\"\u003ehttps://www.youtube.com/watch?v=z-0-bbc80JM\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eInvesting in Systems by Natalie Vais - \u003ca href=\"https://www.youtube.com/watch?v=gG4PTvaVG9E\"\u003ehttps://www.youtube.com/watch?v=gG4PTvaVG9E\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e10 Math Concepts for Programmers - \u003ca href=\"https://www.youtube.com/watch?v=bOCHTHkBoAs\"\u003ehttps://www.youtube.com/watch?v=bOCHTHkBoAs\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow This Miracle Rock Changed the World Forever - \u003ca href=\"https://www.youtube.com/watch?v=VN0p95sNsfo\"\u003ehttps://www.youtube.com/watch?v=VN0p95sNsfo\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u0026ldquo;Consistency without consensus in production systems\u0026rdquo; by Peter Bourgon - \u003ca href=\"https://www.youtube.com/watch?v=em9zLzM8O7c\"\u003ehttps://www.youtube.com/watch?v=em9zLzM8O7c\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhat Is a Database? by Jamie Brandon - \u003ca href=\"https://www.youtube.com/watch?v=MqbVoSs0lXk\"\u003ehttps://www.youtube.com/watch?v=MqbVoSs0lXk\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDistributed Database Design Decisions to Support High Performance Event Streaming - \u003ca href=\"https://www.scylladb.com/2022/09/21/distributed-database-design-decisions-to-support-high-performance-event-streaming/?utm_medium=social%20media%20-%20organic\u0026amp;utm_source=twitter\u0026amp;utm_term=bg\"\u003ehttps://www.scylladb.com/2022/09/21/distributed-database-design-decisions-to-support-high-performance-event-streaming/?utm_medium=social%20media%20-%20organic\u0026utm_source=twitter\u0026utm_term=bg\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eGetting the Most out of Lightweight Transactions in ScyllaDB - \u003ca href=\"https://www.scylladb.com/2020/07/15/getting-the-most-out-of-lightweight-transactions-in-scylla/\"\u003ehttps://www.scylladb.com/2020/07/15/getting-the-most-out-of-lightweight-transactions-in-scylla/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eScylladb: Lightweight transactions at lightning speed - \u003ca href=\"https://www.youtube.com/watch?v=Jk1CsRZ7QJc\"\u003ehttps://www.youtube.com/watch?v=Jk1CsRZ7QJc\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWikipedia: ACID - \u003ca href=\"https://en.wikipedia.org/wiki/ACID\"\u003ehttps://en.wikipedia.org/wiki/ACID\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTwo-phase locking - \u003ca href=\"https://en.wikipedia.org/wiki/Two-phase_locking\"\u003ehttps://en.wikipedia.org/wiki/Two-phase_locking\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSerious Ben: Exploring the PROXY protocol - \u003ca href=\"https://seriousben.com/posts/2020-02-exploring-the-proxy-protocol/#proxy-protocol-version-2\"\u003ehttps://seriousben.com/posts/2020-02-exploring-the-proxy-protocol/#proxy-protocol-version-2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMalware Development: Processes, Threads, and Handles - \u003ca href=\"https://www.youtube.com/watch?v=aNEqC-U5tHM\"\u003ehttps://www.youtube.com/watch?v=aNEqC-U5tHM\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eA proposal for more reliable locks using Redis - \u003ca href=\"http://antirez.com/news/77\"\u003ehttp://antirez.com/news/77\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAphyr: the trouble with timestamps - \u003ca href=\"https://aphyr.com/posts/299-the-trouble-with-timestamps\"\u003ehttps://aphyr.com/posts/299-the-trouble-with-timestamps\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMartin Kleppmann: How to do distributed locking - \u003ca href=\"https://martin.kleppmann.com/2016/02/08/how-to-do-distributed-locking.html\"\u003ehttps://martin.kleppmann.com/2016/02/08/how-to-do-distributed-locking.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eEverything you need to know about unsafe.Pointer in Golang - \u003ca href=\"https://www.youtube.com/watch?v=3HgqRW09w4s\"\u003ehttps://www.youtube.com/watch?v=3HgqRW09w4s\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eOsa1: My thoughts on OCaml - \u003ca href=\"https://osa1.net/posts/2023-04-24-ocaml-thoughts.html\"\u003ehttps://osa1.net/posts/2023-04-24-ocaml-thoughts.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWerner Vogels: Eventually consistent - \u003ca href=\"https://queue.acm.org/detail.cfm?id=1466448\"\u003ehttps://queue.acm.org/detail.cfm?id=1466448\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSamwho: Load balancing - \u003ca href=\"https://samwho.dev/load-balancing/\"\u003ehttps://samwho.dev/load-balancing/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eScylladb docs: Counters - \u003ca href=\"https://docs.scylladb.com/stable/using-scylla/counters.html\"\u003ehttps://docs.scylladb.com/stable/using-scylla/counters.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWerner Vogels: Eventually consistent - \u003ca href=\"https://queue.acm.org/detail.cfm?id=1466448\"\u003ehttps://queue.acm.org/detail.cfm?id=1466448\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eA gradual type system for Elixir - \u003ca href=\"https://www.irif.fr/_media/users/gduboc/elixir-types.pdf\"\u003ehttps://www.irif.fr/_media/users/gduboc/elixir-types.pdf\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eRaft or not? The Best Solution to Data Consistency in Cloud-native Databases - \u003ca href=\"https://milvus.io/blog/raft-or-not.md\"\u003ehttps://milvus.io/blog/raft-or-not.md\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAmazon Aurora under the hood: quorums and correlated failure - \u003ca href=\"https://aws.amazon.com/blogs/database/amazon-aurora-under-the-hood-quorum-and-correlated-failure/\"\u003ehttps://aws.amazon.com/blogs/database/amazon-aurora-under-the-hood-quorum-and-correlated-failure/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eScyllaDB 1.7 introduces experimental support for counters - \u003ca href=\"https://www.scylladb.com/2017/04/04/counters/\"\u003ehttps://www.scylladb.com/2017/04/04/counters/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDijkstra: On the cruelty of really teaching computing science - \u003ca href=\"https://www.cs.utexas.edu/users/EWD/transcriptions/EWD10xx/EWD1036.html\"\u003ehttps://www.cs.utexas.edu/users/EWD/transcriptions/EWD10xx/EWD1036.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTigerStyle! (Or How To Design Safer Systems in Less Time) by Joran Dirk Greef - \u003ca href=\"https://www.youtube.com/watch?v=w3WYdYyjek4\"\u003ehttps://www.youtube.com/watch?v=w3WYdYyjek4\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAWS re:Invent 2022 - Journey to cell-based microservices architecture on AWS for hyperscale (ARC312) - \u003ca href=\"https://www.youtube.com/watch?v=ReRrhU-yRjg\"\u003ehttps://www.youtube.com/watch?v=ReRrhU-yRjg\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eOttertune: The Part of PostgreSQL We Hate the Most - \u003ca href=\"https://ottertune.com/blog/the-part-of-postgresql-we-hate-the-most/\"\u003ehttps://ottertune.com/blog/the-part-of-postgresql-we-hate-the-most/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e(zig) Testing and Files as Structs - \u003ca href=\"https://zig.news/aryaelfren/testing-and-files-as-structs-n94\"\u003ehttps://zig.news/aryaelfren/testing-and-files-as-structs-n94\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMartin Kleppmann: Distributed Systems 7.2: Linearizability - \u003ca href=\"https://www.youtube.com/watch?v=noUNH3jDLC0\"\u003ehttps://www.youtube.com/watch?v=noUNH3jDLC0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMartin Kleppmann: Distributed Systems 4.2: Broadcast ordering - \u003ca href=\"https://www.youtube.com/watch?v=A8oamrHf_cQ\u0026amp;list=PLeKd45zvjcDFUEv_ohr_HdUFe97RItdiB\u0026amp;index=27\"\u003ehttps://www.youtube.com/watch?v=A8oamrHf_cQ\u0026list=PLeKd45zvjcDFUEv_ohr_HdUFe97RItdiB\u0026index=27\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMartin Kleppman: Distributed Systems 4.3: Broadcast algorithms - \u003ca href=\"https://www.youtube.com/watch?v=77qpCahU3fo\u0026amp;list=PLeKd45zvjcDFUEv_ohr_HdUFe97RItdiB\u0026amp;index=13\"\u003ehttps://www.youtube.com/watch?v=77qpCahU3fo\u0026list=PLeKd45zvjcDFUEv_ohr_HdUFe97RItdiB\u0026index=13\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhat, exactly, is Object-oriented Programming? - \u003ca href=\"https://dev.to/ga_ts/what-exactly-is-object-oriented-programming-5a7a\"\u003ehttps://dev.to/ga_ts/what-exactly-is-object-oriented-programming-5a7a\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eStatic vs Dynamic dispatch - \u003ca href=\"https://gist.github.com/greister/37289c6eb3629d4fefa7dd0acf6de378\"\u003ehttps://gist.github.com/greister/37289c6eb3629d4fefa7dd0acf6de378\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eModern C++ Won\u0026rsquo;t Save Us - \u003ca href=\"https://alexgaynor.net/2019/apr/21/modern-c\u0026#43;\u0026#43;-wont-save-us/\"\u003ehttps://alexgaynor.net/2019/apr/21/modern-c++-wont-save-us/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMartin Kleppmann: Please stop calling databases CP or AP - \u003ca href=\"https://martin.kleppmann.com/2015/05/11/please-stop-calling-databases-cp-or-ap.html\"\u003ehttps://martin.kleppmann.com/2015/05/11/please-stop-calling-databases-cp-or-ap.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eConflict-free Replicated Data Types: An Overview - \u003ca href=\"https://arxiv.org/pdf/1806.10254.pdf\"\u003ehttps://arxiv.org/pdf/1806.10254.pdf\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eStrings \u0026amp; Palindromes | Recursion Series - \u003ca href=\"https://www.youtube.com/watch?v=n1AUAP7FdXI\"\u003ehttps://www.youtube.com/watch?v=n1AUAP7FdXI\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eRuss Cox: Go Data Structures: Interfaces - \u003ca href=\"https://research.swtch.com/interfaces\"\u003ehttps://research.swtch.com/interfaces\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe Power Of Golang\u0026rsquo;s Decorator Pattern - \u003ca href=\"https://www.youtube.com/watch?v=GipAZwKFgoA\"\u003ehttps://www.youtube.com/watch?v=GipAZwKFgoA\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"may\"\u003eMay\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOpen Versus Closed: A Cautionary Tale - \u003ca href=\"https://muratbuffalo.blogspot.com/2023/05/open-versus-closed-cautionary-tale.html\"\u003ehttps://muratbuffalo.blogspot.com/2023/05/open-versus-closed-cautionary-tale.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eChapter 9 - Consistency and Consensus (Part Two) - \u003ca href=\"https://timilearning.com/posts/ddia/part-two/chapter-9-2/\"\u003ehttps://timilearning.com/posts/ddia/part-two/chapter-9-2/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eCoda Hale: You Can’t Sacrifice Partition Tolerance - \u003ca href=\"https://codahale.com/you-cant-sacrifice-partition-tolerance/\"\u003ehttps://codahale.com/you-cant-sacrifice-partition-tolerance/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMongodb: What about Durability? - \u003ca href=\"https://www.mongodb.com/blog/post/what-about-durability\"\u003ehttps://www.mongodb.com/blog/post/what-about-durability\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eJeff Hodges: Notes on Distributed Systems for Young Bloods - \u003ca href=\"https://www.somethingsimilar.com/2013/01/14/notes-on-distributed-systems-for-young-bloods/\"\u003ehttps://www.somethingsimilar.com/2013/01/14/notes-on-distributed-systems-for-young-bloods/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eArnon Rotem-Gal-Oz: Fallacies of Distributed Computing Explained - \u003ca href=\"https://arnon.me/wp-content/uploads/Files/fallacies.pdf\"\u003ehttps://arnon.me/wp-content/uploads/Files/fallacies.pdf\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eKeynote: Silence is Golden: Coordination-Avoiding Systems Design - \u003ca href=\"https://www.youtube.com/watch?v=EYJnWttrC9k\"\u003ehttps://www.youtube.com/watch?v=EYJnWttrC9k\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eCHOOSE BORING TECHNOLOGY CULTURE - \u003ca href=\"https://charity.wtf/2023/05/01/choose-boring-technology-culture/\"\u003ehttps://charity.wtf/2023/05/01/choose-boring-technology-culture/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eA Deep Dive in How Slow SELECT * is - \u003ca href=\"https://www.youtube.com/watch?v=wybjsKtA9hI\"\u003ehttps://www.youtube.com/watch?v=wybjsKtA9hI\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eFly.io: Reliability: It’s Not Great - \u003ca href=\"https://community.fly.io/t/reliability-its-not-great/11253\"\u003ehttps://community.fly.io/t/reliability-its-not-great/11253\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eQuickwit: Efficient indexing with Quickwit Rust actor framework - \u003ca href=\"https://quickwit.io/blog/quickwit-actor-framework\"\u003ehttps://quickwit.io/blog/quickwit-actor-framework\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eUsing Rustlang\u0026rsquo;s Async Tokio Runtime for CPU-Bound Tasks - \u003ca href=\"https://www.influxdata.com/blog/using-rustlangs-async-tokio-runtime-for-cpu-bound-tasks/\"\u003ehttps://www.influxdata.com/blog/using-rustlangs-async-tokio-runtime-for-cpu-bound-tasks/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eCut Your S3 Spending With Amazon S3 Storage Lens - \u003ca href=\"https://www.youtube.com/watch?v=mJuOtZs3orM\"\u003ehttps://www.youtube.com/watch?v=mJuOtZs3orM\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eRust Kernel Programming - \u003ca href=\"https://coderjoshdk.github.io/posts/Rust-Kernel-Programming.html\"\u003ehttps://coderjoshdk.github.io/posts/Rust-Kernel-Programming.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhat makes an Aggregate (DDD)? Hint: it\u0026rsquo;s NOT hierarchy \u0026amp; relationships - \u003ca href=\"https://www.youtube.com/watch?v=djq0293b2bA\"\u003ehttps://www.youtube.com/watch?v=djq0293b2bA\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eL9: Paxos Simplified - \u003ca href=\"https://www.youtube.com/watch?v=SRsK-ZXTeZ0\"\u003ehttps://www.youtube.com/watch?v=SRsK-ZXTeZ0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDistributed Systems 5.1: Replication - \u003ca href=\"https://www.youtube.com/watch?v=mBUCF1WGI_I\u0026amp;list=PLeKd45zvjcDFUEv_ohr_HdUFe97RItdiB\u0026amp;index=20\"\u003ehttps://www.youtube.com/watch?v=mBUCF1WGI_I\u0026list=PLeKd45zvjcDFUEv_ohr_HdUFe97RItdiB\u0026index=20\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eStabilizing async fn in traits in 2023 - \u003ca href=\"https://blog.rust-lang.org/inside-rust/2023/05/03/stabilizing-async-fn-in-trait.html\"\u003ehttps://blog.rust-lang.org/inside-rust/2023/05/03/stabilizing-async-fn-in-trait.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe Most Efficient Struct Configuration Pattern For Golang - \u003ca href=\"https://www.youtube.com/watch?v=MDy7JQN5MN4\"\u003ehttps://www.youtube.com/watch?v=MDy7JQN5MN4\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe pendulum swings! Microservices to Monoliths - \u003ca href=\"https://www.youtube.com/watch?v=BFcxgcoO5Ns\"\u003ehttps://www.youtube.com/watch?v=BFcxgcoO5Ns\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eBootstrapping Uber’s Infrastructure on arm64 with Zig - \u003ca href=\"https://www.uber.com/en-US/blog/bootstrapping-ubers-infrastructure-on-arm64-with-zig/\"\u003ehttps://www.uber.com/en-US/blog/bootstrapping-ubers-infrastructure-on-arm64-with-zig/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMain problems of the multithreaded servers with blocking I/O - \u003ca href=\"https://habr.com/en/articles/676656/\"\u003ehttps://habr.com/en/articles/676656/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhat is gVisor? - \u003ca href=\"https://gvisor.dev/docs/\"\u003ehttps://gvisor.dev/docs/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMonoliths are not dinosaurs - \u003ca href=\"https://www.allthingsdistributed.com/2023/05/monoliths-are-not-dinosaurs.html\"\u003ehttps://www.allthingsdistributed.com/2023/05/monoliths-are-not-dinosaurs.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDo you understand how \u0026ldquo;return\u0026rdquo; ACTUALLY works? (are you SURE?) - \u003ca href=\"https://www.youtube.com/watch?v=e46wHUjNDjE\"\u003ehttps://www.youtube.com/watch?v=e46wHUjNDjE\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhy Apache Kafka Doesn\u0026rsquo;t Need Fsync To Be Safe - \u003ca href=\"https://jack-vanlightly.com/blog/2023/4/24/why-apache-kafka-doesnt-need-fsync-to-be-safe\"\u003ehttps://jack-vanlightly.com/blog/2023/4/24/why-apache-kafka-doesnt-need-fsync-to-be-safe\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWrite For Others But Mostly For Yourself - \u003ca href=\"https://jack-vanlightly.com/blog/2022/1/25/write-for-others-but-mostly-for-yourself\"\u003ehttps://jack-vanlightly.com/blog/2022/1/25/write-for-others-but-mostly-for-yourself\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDistributed Consensus Reloaded: Apache ZooKeeper and Replication in Apache Kafka - \u003ca href=\"https://www.confluent.io/blog/distributed-consensus-reloaded-apache-zookeeper-and-replication-in-kafka/\"\u003ehttps://www.confluent.io/blog/distributed-consensus-reloaded-apache-zookeeper-and-replication-in-kafka/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhy engineers need to be bored. - \u003ca href=\"https://onengineering.substack.com/p/why-engineers-need-to-be-bored?r=1uysoh\u0026amp;utm_campaign=post\u0026amp;utm_medium=web\"\u003ehttps://onengineering.substack.com/p/why-engineers-need-to-be-bored?r=1uysoh\u0026utm_campaign=post\u0026utm_medium=web\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDude, where’s my metadata? - \u003ca href=\"https://fpj.systems/2015/05/28/dude-wheres-my-metadata/\"\u003ehttps://fpj.systems/2015/05/28/dude-wheres-my-metadata/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHands-Free Kafka Replication: A Lesson in Operational Simplicity - \u003ca href=\"https://www.confluent.io/blog/hands-free-kafka-replication-a-lesson-in-operational-simplicity/\"\u003ehttps://www.confluent.io/blog/hands-free-kafka-replication-a-lesson-in-operational-simplicity/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eFear makes you a worse programmer - \u003ca href=\"https://jvns.ca/blog/2014/12/21/fear-makes-you-a-worse-programmer/\"\u003ehttps://jvns.ca/blog/2014/12/21/fear-makes-you-a-worse-programmer/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMore Turing-completeness in surprising places - kristerw.blogspot.com/2016/01/more-turing-completeness-in-surprising.html\u003c/li\u003e\n\u003cli\u003eArenas, strings and Scuffed Templates in C - \u003ca href=\"https://www.youtube.com/watch?v=3IAlJSIjvH0\"\u003ehttps://www.youtube.com/watch?v=3IAlJSIjvH0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eECC memory - \u003ca href=\"https://en.wikipedia.org/wiki/ECC_memory\"\u003ehttps://en.wikipedia.org/wiki/ECC_memory\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eVOPR\u0026rsquo;izing TigerBeetle - \u003ca href=\"https://www.youtube.com/watch?v=0esGaX5XekM\"\u003ehttps://www.youtube.com/watch?v=0esGaX5XekM\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eLinearizability versus Serializability - \u003ca href=\"https://www.bailis.org/blog/linearizability-versus-serializability/\"\u003ewww.bailis.org/blog/linearizability-versus-serializability/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eRaft does not Guarantee Liveness in the face of Network Faults - \u003ca href=\"https://decentralizedthoughts.github.io/2020-12-12-raft-liveness-full-omission/\"\u003ehttps://decentralizedthoughts.github.io/2020-12-12-raft-liveness-full-omission/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhen is \u0026ldquo;ACID\u0026rdquo; ACID? Rarely. - \u003ca href=\"https://www.bailis.org/blog/when-is-acid-acid-rarely/\"\u003ewww.bailis.org/blog/when-is-acid-acid-rarely/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eOn hiring, rehiring, and one question to answer them all - \u003ca href=\"https://world.hey.com/jason/on-hiring-rehiring-and-one-question-to-answer-them-all-5db97bcb\"\u003ehttps://world.hey.com/jason/on-hiring-rehiring-and-one-question-to-answer-them-all-5db97bcb\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTop 7 Most-Used Distributed System Patterns - \u003ca href=\"https://www.youtube.com/watch?v=nH4qjmP2KEE\"\u003ehttps://www.youtube.com/watch?v=nH4qjmP2KEE\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMastering Dependency Injection In Golang - \u003ca href=\"https://www.youtube.com/watch?v=UX4XjxWcDB4\"\u003ehttps://www.youtube.com/watch?v=UX4XjxWcDB4\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDifference between Kafka and Redpanda - Thread per Core Architecture - \u003ca href=\"https://www.youtube.com/watch?v=fluRjLXDf-E\"\u003ehttps://www.youtube.com/watch?v=fluRjLXDf-E\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe Go 1.19 Atomic Wrappers and why to use them - \u003ca href=\"https://medium.com/@deckarep/the-go-1-19-atomic-wrappers-and-why-to-use-them-ae14c1177ad8\"\u003ehttps://medium.com/@deckarep/the-go-1-19-atomic-wrappers-and-why-to-use-them-ae14c1177ad8\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e[EN]Real World Applications with the Ruby Fiber Scheduler / Samuel Williams @ioquatix - \u003ca href=\"https://www.youtube.com/watch?v=yXyj9wlkJKM\"\u003ehttps://www.youtube.com/watch?v=yXyj9wlkJKM\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eIs Sequential IO Dead In The Era Of The NVMe Drive? - \u003ca href=\"https://jack-vanlightly.com/blog/2023/5/9/is-sequential-io-dead-in-the-era-of-the-nvme-drive\"\u003ehttps://jack-vanlightly.com/blog/2023/5/9/is-sequential-io-dead-in-the-era-of-the-nvme-drive\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe power of the adversary - \u003ca href=\"https://decentralizedthoughts.github.io/2019-06-07-modeling-the-adversary/\"\u003ehttps://decentralizedthoughts.github.io/2019-06-07-modeling-the-adversary/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eInterledger Community Call - 25 November 2020 - \u003ca href=\"https://www.youtube.com/watch?v=J1OaBRTV2vs\"\u003ehttps://www.youtube.com/watch?v=J1OaBRTV2vs\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe string type is broken - \u003ca href=\"https://mortoray.com/the-string-type-is-broken/\"\u003ehttps://mortoray.com/the-string-type-is-broken/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eOpen and Closed, Omission and Collapse - \u003ca href=\"https://brooker.co.za/blog/2023/05/10/open-closed.html\"\u003ehttps://brooker.co.za/blog/2023/05/10/open-closed.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eFixing retries with token buckets and circuit breakers - \u003ca href=\"https://brooker.co.za/blog/2022/02/28/retries.html\"\u003ehttps://brooker.co.za/blog/2022/02/28/retries.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWebinar — Under the Hood of a Shard-per-Core Architecture - \u003ca href=\"https://www.youtube.com/watch?v=Fo1dPRqbF-Q\"\u003ehttps://www.youtube.com/watch?v=Fo1dPRqbF-Q\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMicrosoft Azure security evolution: Embrace secure multitenancy, Confidential Compute, and Rust - \u003ca href=\"https://azure.microsoft.com/en-us/blog/microsoft-azure-security-evolution-embrace-secure-multitenancy-confidential-compute-and-rust/\"\u003ehttps://azure.microsoft.com/en-us/blog/microsoft-azure-security-evolution-embrace-secure-multitenancy-confidential-compute-and-rust/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eJulia Evans: Introducing \u0026ldquo;Implement DNS in a Weekend\u0026rdquo; - \u003ca href=\"https://jvns.ca/blog/2023/05/12/introducing-implement-dns-in-a-weekend/\"\u003ehttps://jvns.ca/blog/2023/05/12/introducing-implement-dns-in-a-weekend/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eImplementing DNS in a Weeknd - \u003ca href=\"https://implement-dns.wizardzines.com/book/part_1.html\"\u003ehttps://implement-dns.wizardzines.com/book/part_1.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSitting on the bench - \u003ca href=\"https://world.hey.com/dhh/sitting-on-the-bench-ba937b84\"\u003ehttps://world.hey.com/dhh/sitting-on-the-bench-ba937b84\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSecret To Optimizing SQL Queries - Understand The SQL Execution Order - \u003ca href=\"https://www.youtube.com/watch?v=BHwzDmr6d7s\"\u003ehttps://www.youtube.com/watch?v=BHwzDmr6d7s\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMaker\u0026rsquo;s schedule, manager\u0026rsquo;s schedule - \u003ca href=\"https://www.paulgraham.com/makersschedule.html\"\u003ewww.paulgraham.com/makersschedule.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAnnouncing unsend - \u003ca href=\"https://notgull.github.io/unsend/\"\u003ehttps://notgull.github.io/unsend/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTaking advantage of state machine concepts to organize code - \u003ca href=\"https://balliegojr.github.io/state-machine/\"\u003ehttps://balliegojr.github.io/state-machine/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDatabase Sharding Explained - \u003ca href=\"https://architecturenotes.co/database-sharding-explained/\"\u003ehttps://architecturenotes.co/database-sharding-explained/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe threshold adversary - \u003ca href=\"https://decentralizedthoughts.github.io/2019-06-17-the-threshold-adversary/\"\u003ehttps://decentralizedthoughts.github.io/2019-06-17-the-threshold-adversary/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMySQL Limitations Part 4: One Thread per Connection - \u003ca href=\"https://www.percona.com/blog/mysql-limitations-part-4-one-thread-per-connection/\"\u003ehttps://www.percona.com/blog/mysql-limitations-part-4-one-thread-per-connection/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u0026ldquo;Simulation Testing\u0026rdquo; by Michael Nygard - \u003ca href=\"https://www.youtube.com/watch?v=N5HyVUPuU0E\"\u003ehttps://www.youtube.com/watch?v=N5HyVUPuU0E\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eKora: The Cloud Native Engine for Apache Kafka - \u003ca href=\"https://www.confluent.io/blog/cloud-native-data-streaming-kafka-engine/\"\u003ehttps://www.confluent.io/blog/cloud-native-data-streaming-kafka-engine/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eKafka vs Redpanda Performance - Do the claims add up? - \u003ca href=\"https://jack-vanlightly.com/blog/2023/5/15/kafka-vs-redpanda-performance-do-the-claims-add-up\"\u003ehttps://jack-vanlightly.com/blog/2023/5/15/kafka-vs-redpanda-performance-do-the-claims-add-up\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHave you replaced your DB because of the Repository Pattern? - \u003ca href=\"https://www.youtube.com/watch?v=EwKhyp2kHME\"\u003ehttps://www.youtube.com/watch?v=EwKhyp2kHME\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eFocusing Your Unconscious Mind: Learn Hard Concepts Intuitively (And Forever) - \u003ca href=\"https://www.youtube.com/watch?v=Dm68uFy6gus\"\u003ehttps://www.youtube.com/watch?v=Dm68uFy6gus\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eRetries and Saga pattern in Workflows - \u003ca href=\"https://www.youtube.com/watch?v=yqMKr37mGJw\"\u003ehttps://www.youtube.com/watch?v=yqMKr37mGJw\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eGolang Performance Hack That Reduces GC Overhead - \u003ca href=\"https://www.youtube.com/watch?v=aThn7jvYvGI\"\u003ehttps://www.youtube.com/watch?v=aThn7jvYvGI\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eGetting started with tracing and Grafana Tempo - \u003ca href=\"https://grafana.com/go/webinar/getting-started-with-tracing-and-grafana-tempo-amer/?pg=docs-tempo-latest-getting-started-example-demo-app\u0026amp;plcmt=related\"\u003ehttps://grafana.com/go/webinar/getting-started-with-tracing-and-grafana-tempo-amer/?pg=docs-tempo-latest-getting-started-example-demo-app\u0026plcmt=related\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow I became a software architect\u0026hellip; (or not) - \u003ca href=\"https://www.youtube.com/watch?v=6j-PyJ1tFn8\"\u003ehttps://www.youtube.com/watch?v=6j-PyJ1tFn8\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ePHP: a fractal of bad design - \u003ca href=\"https://eev.ee/blog/2012/04/09/php-a-fractal-of-bad-design/\"\u003ehttps://eev.ee/blog/2012/04/09/php-a-fractal-of-bad-design/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eEfficiency trades off against resiliency - \u003ca href=\"https://blog.nelhage.com/post/efficiency-vs-resiliency/\"\u003ehttps://blog.nelhage.com/post/efficiency-vs-resiliency/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eA governance system, if you can keep it - \u003ca href=\"https://without.boats/blog/if-you-can-keep-it/\"\u003ehttps://without.boats/blog/if-you-can-keep-it/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow Much Memory Do You Need to Run 1 Million Concurrent Tasks? - \u003ca href=\"https://pkolaczk.github.io/memory-consumption-of-async/\"\u003ehttps://pkolaczk.github.io/memory-consumption-of-async/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eLocal Async Executors and Why They Should be the Default - \u003ca href=\"https://maciej.codes/2022-06-09-local-async.html\"\u003ehttps://maciej.codes/2022-06-09-local-async.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eOxidizing OCaml: Locality - \u003ca href=\"https://blog.janestreet.com/oxidizing-ocaml-locality/\"\u003ehttps://blog.janestreet.com/oxidizing-ocaml-locality/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eStream Processing with Kafka - \u003ca href=\"https://hackingwithrust.substack.com/p/stream-processing-with-kafka\"\u003ehttps://hackingwithrust.substack.com/p/stream-processing-with-kafka\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe Power Of Golang\u0026rsquo;s TeeReader Solved My Problem - \u003ca href=\"https://www.youtube.com/watch?v=fGmOKJxlGxY\"\u003ehttps://www.youtube.com/watch?v=fGmOKJxlGxY\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eInternals of Maps in Golang - \u003ca href=\"https://www.youtube.com/watch?v=ACQs6mdylxo\"\u003ehttps://www.youtube.com/watch?v=ACQs6mdylxo\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eInspecting the map header in Golang - \u003ca href=\"https://www.youtube.com/watch?v=fe_omYMdnKY\"\u003ehttps://www.youtube.com/watch?v=fe_omYMdnKY\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhy Databases Write Ahead - \u003ca href=\"https://aneesh.mataroa.blog/blog/why-databases-write-ahead/\"\u003ehttps://aneesh.mataroa.blog/blog/why-databases-write-ahead/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTokio, FuturesUnordered, and the Thundering Herd Problem - \u003ca href=\"https://blog.polybdenum.com/2023/05/15/tokio-futuresunordered-and-the-thundering-herd-problem.html\"\u003ehttps://blog.polybdenum.com/2023/05/15/tokio-futuresunordered-and-the-thundering-herd-problem.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eEventually Consistent - Revisited - \u003ca href=\"https://www.allthingsdistributed.com/2008/12/eventually_consistent.html\"\u003ehttps://www.allthingsdistributed.com/2008/12/eventually_consistent.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTop 6 Most Popular API Architecture Styles - \u003ca href=\"https://www.youtube.com/watch?v=4vLxWqE94l4\"\u003ehttps://www.youtube.com/watch?v=4vLxWqE94l4\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow Dropbox Saved Millions By Migrating From On-Prem to AWS - \u003ca href=\"https://www.youtube.com/watch?v=KrkuTQjpvgs\"\u003ehttps://www.youtube.com/watch?v=KrkuTQjpvgs\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"june\"\u003eJune\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eTunnel SSH Directly To HTTP With GoLang!? - \u003ca href=\"https://www.youtube.com/watch?v=RK5xh7xH1Jw\"\u003ehttps://www.youtube.com/watch?v=RK5xh7xH1Jw\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHELP! My system is hard to change - \u003ca href=\"https://www.youtube.com/watch?v=jyX7nt1wQwg\"\u003ehttps://www.youtube.com/watch?v=jyX7nt1wQwg\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow does HTTP/2 solve the Head of Line blocking (HOL) issue - \u003ca href=\"https://community.akamai.com/customers/s/article/How-does-HTTP-2-solve-the-Head-of-Line-blocking-HOL-issue?language=en_US\"\u003ehttps://community.akamai.com/customers/s/article/How-does-HTTP-2-solve-the-Head-of-Line-blocking-HOL-issue?language=en_US\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eRubyConfTH 2022 - Keynote: A Beginner\u0026rsquo;s Guide to Puma Internals by Nate Berkopec - \u003ca href=\"https://www.youtube.com/watch?v=w4X_oBuPmTM\"\u003ehttps://www.youtube.com/watch?v=w4X_oBuPmTM\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eQCon London \u0026lsquo;23 — A New Era for Database Design with TigerBeetle - \u003ca href=\"https://www.youtube.com/watch?v=_jfOk4L7CiY\"\u003ehttps://www.youtube.com/watch?v=_jfOk4L7CiY\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhat do others do without tests? - \u003ca href=\"https://registerspill.thorstenball.com/p/what-do-others-do-without-tests\"\u003ehttps://registerspill.thorstenball.com/p/what-do-others-do-without-tests\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003egoing fast is about doing less - \u003ca href=\"https://www.youtube.com/watch?v=5rb0vvJ7NCY\"\u003ehttps://www.youtube.com/watch?v=5rb0vvJ7NCY\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow I Structured My Side Project In Go - Sendit.sh - \u003ca href=\"https://www.youtube.com/watch?v=a6Q5KseZ47s\"\u003ehttps://www.youtube.com/watch?v=a6Q5KseZ47s\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eFrom Stacks to Trees: A new aliasing model for Rust - \u003ca href=\"https://www.ralfj.de/blog/2023/06/02/tree-borrows.html\"\u003ehttps://www.ralfj.de/blog/2023/06/02/tree-borrows.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eA locking war story - \u003ca href=\"https://sentry.engineering/blog/locking-war-story\"\u003ehttps://sentry.engineering/blog/locking-war-story\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eOn Raft, briefly - \u003ca href=\"https://www.the-paper-trail.org/post/2013-10-31-on-raft-briefly/\"\u003ehttps://www.the-paper-trail.org/post/2013-10-31-on-raft-briefly/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWriting an interpreter\u0026hellip; in OCaml?!? - \u003ca href=\"https://www.youtube.com/watch?v=NjKJ9-ejR6o\"\u003ehttps://www.youtube.com/watch?v=NjKJ9-ejR6o\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ehow NASA writes space-proof code - \u003ca href=\"https://www.youtube.com/watch?v=GWYhtksrmhE\"\u003ehttps://www.youtube.com/watch?v=GWYhtksrmhE\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSAVE Your Database With REDIS!!! Write Through Cache Explained! - \u003ca href=\"https://www.youtube.com/watch?v=rNU3afjpTWc\"\u003ehttps://www.youtube.com/watch?v=rNU3afjpTWc\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWriting a SQL database, take two: Zig and RocksDB - \u003ca href=\"https://notes.eatonphil.com/zigrocks-sql.html\"\u003ehttps://notes.eatonphil.com/zigrocks-sql.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSingle Abstract Method Traits - \u003ca href=\"https://mcyoung.xyz/2023/05/11/sam-closures/\"\u003ehttps://mcyoung.xyz/2023/05/11/sam-closures/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe Rust I Wanted Had No Future - \u003ca href=\"https://graydon2.dreamwidth.org/307291.html\"\u003ehttps://graydon2.dreamwidth.org/307291.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTop 5 Most-Used Deployment Strategies - \u003ca href=\"https://www.youtube.com/watch?v=AWVTKBUnoIg\"\u003ehttps://www.youtube.com/watch?v=AWVTKBUnoIg\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eBig Data Processing Using Distributed Maps and AWS Step Functions (S3 + Lambda) - \u003ca href=\"https://www.youtube.com/watch?v=0Zs5s5F_lFc\"\u003ehttps://www.youtube.com/watch?v=0Zs5s5F_lFc\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eEffortless JSON in C++ with folly::dynamic - \u003ca href=\"https://www.youtube.com/watch?v=3XubaLCDYOM\"\u003ehttps://www.youtube.com/watch?v=3XubaLCDYOM\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSQL vs. NoSQL Explained (in 4 Minutes) - \u003ca href=\"https://www.youtube.com/watch?v=_Ss42Vb1SU4\"\u003ehttps://www.youtube.com/watch?v=_Ss42Vb1SU4\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow to seed a new Microservice with data? - \u003ca href=\"https://www.youtube.com/watch?v=RcVf-R7RZcY\"\u003ehttps://www.youtube.com/watch?v=RcVf-R7RZcY\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMark Zuckerberg: Future of AI at Meta, Facebook, Instagram, and WhatsApp | Lex Fridman Podcast - \u003ca href=\"https://www.youtube.com/watch?v=Ff4fRgnuFgQ\"\u003ehttps://www.youtube.com/watch?v=Ff4fRgnuFgQ\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe Extravagant Business of Cruises - \u003ca href=\"https://www.youtube.com/watch?v=QqQtV7wHSV0\"\u003ehttps://www.youtube.com/watch?v=QqQtV7wHSV0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ehow Google writes future-proof C++ - \u003ca href=\"https://www.youtube.com/watch?v=6lU11IHfJgo\"\u003ehttps://www.youtube.com/watch?v=6lU11IHfJgo\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTop 5 Cost Optimization Tips Every AWS User Should Know - \u003ca href=\"https://www.youtube.com/watch?v=T-viaT391aQ\"\u003ehttps://www.youtube.com/watch?v=T-viaT391aQ\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow to Reverse Engineer Go Binaries - GoLang Malware Analysis - \u003ca href=\"https://www.youtube.com/watch?v=cBdY5Y16OR4\"\u003ehttps://www.youtube.com/watch?v=cBdY5Y16OR4\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u0026ldquo;Clean Architecture\u0026rdquo; and indirection. No thanks. - \u003ca href=\"https://www.youtube.com/watch?v=_rgH0Kb9Bis\"\u003ehttps://www.youtube.com/watch?v=_rgH0Kb9Bis\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAmazon GuardDuty Deep Dive - \u003ca href=\"https://www.youtube.com/watch?v=M4aOKikd7-s\"\u003ehttps://www.youtube.com/watch?v=M4aOKikd7-s\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eUse Arc Instead of Vec - \u003ca href=\"https://www.youtube.com/watch?v=A4cKi7PTJSs\"\u003ehttps://www.youtube.com/watch?v=A4cKi7PTJSs\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eGopherCon 2019: Chris Hines - Death by 3,000 Timers: Streaming Video-on-Demand for Cable TV - \u003ca href=\"https://www.youtube.com/watch?v=h0s8CWpIKdg\"\u003ehttps://www.youtube.com/watch?v=h0s8CWpIKdg\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eeveryone can learn assembly QUICKLY (arm64 breakdown) - \u003ca href=\"https://www.youtube.com/watch?v=vhyettT7sdA\"\u003ehttps://www.youtube.com/watch?v=vhyettT7sdA\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eBig O myths busted! (Time complexity is complicated) - \u003ca href=\"https://www.youtube.com/watch?v=7VHG6Y2QmtM\"\u003ehttps://www.youtube.com/watch?v=7VHG6Y2QmtM\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eFrom Linear Types to Rust - \u003ca href=\"https://www.youtube.com/watch?v=BWuozpQ_Of8\"\u003ehttps://www.youtube.com/watch?v=BWuozpQ_Of8\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhy Databases Write Ahead - \u003ca href=\"https://aneesh.mataroa.blog/blog/why-databases-write-ahead/\"\u003ehttps://aneesh.mataroa.blog/blog/why-databases-write-ahead/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eEverything You Always Wanted To Know About fsync() - \u003ca href=\"https://blog.httrack.com/blog/2013/11/15/everything-you-always-wanted-to-know-about-fsync/\"\u003ehttps://blog.httrack.com/blog/2013/11/15/everything-you-always-wanted-to-know-about-fsync/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u0026ldquo;Transactions: myths, surprises and opportunities\u0026rdquo; by Martin Kleppmann - \u003ca href=\"https://www.youtube.com/watch?v=5ZjhNTM8XU8\"\u003ehttps://www.youtube.com/watch?v=5ZjhNTM8XU8\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eLambda + SQS Users Should Know About This - \u003ca href=\"https://www.youtube.com/watch?v=0707Py8Jyf0\"\u003ehttps://www.youtube.com/watch?v=0707Py8Jyf0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSimple Functional Effects with Tag Unions • Richard Feldman • YOW! 2022 - \u003ca href=\"https://www.youtube.com/watch?v=7SidSvJcPd0\"\u003ehttps://www.youtube.com/watch?v=7SidSvJcPd0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eRabbitMQ Is Boring, and I Love It - \u003ca href=\"https://thenewstack.io/rabbitmq-is-boring-and-i-love-it/\"\u003ehttps://thenewstack.io/rabbitmq-is-boring-and-i-love-it/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eFault Handling with retry and circuit breaker design patterns by Devlin Duldulao - \u003ca href=\"https://www.youtube.com/watch?v=Uxncuk-vocI\"\u003ehttps://www.youtube.com/watch?v=Uxncuk-vocI\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e🛠️ Windows Virtual Memory Explained 📚 Windows Internals 💻 - \u003ca href=\"https://www.youtube.com/watch?v=CdQ2EYKfB8g\"\u003ehttps://www.youtube.com/watch?v=CdQ2EYKfB8g\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDistributed isn\u0026rsquo;t Microservices, In-Process isn\u0026rsquo;t a Monolith - \u003ca href=\"https://www.youtube.com/watch?v=qndSXhknxRc\"\u003ehttps://www.youtube.com/watch?v=qndSXhknxRc\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAnti-corruption Layer for mapping between Boundaries - \u003ca href=\"https://www.youtube.com/watch?v=Dok2Ikcjaro\"\u003ehttps://www.youtube.com/watch?v=Dok2Ikcjaro\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDifferences between Apache Kafka and Redpanda - Avoid garbage collection - \u003ca href=\"https://www.youtube.com/watch?v=UQ8yrbcTBsY\"\u003ehttps://www.youtube.com/watch?v=UQ8yrbcTBsY\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eeveryone can become BIG BRAIN assembly programmers in only 10 minutes. (yes, YOU!) - \u003ca href=\"https://www.youtube.com/watch?v=6S5KRJv-7RU\"\u003ehttps://www.youtube.com/watch?v=6S5KRJv-7RU\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eLMAX - How to Do 100K TPS at Less than 1ms Latency - \u003ca href=\"https://www.infoq.com/presentations/LMAX/\"\u003ehttps://www.infoq.com/presentations/LMAX/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eApache Kafka in 6 minutes - \u003ca href=\"https://www.youtube.com/watch?v=-SxtMWxBW1Q\"\u003ehttps://www.youtube.com/watch?v=-SxtMWxBW1Q\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eIs the COST of JavaScript’s GC REALLY that high? - \u003ca href=\"https://www.youtube.com/watch?v=easvMCCBFkQ\"\u003ehttps://www.youtube.com/watch?v=easvMCCBFkQ\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMetaprogramming in Zig and parsing CSS - \u003ca href=\"https://notes.eatonphil.com/2023-06-19-metaprogramming-in-zig-and-parsing-css.html\"\u003ehttps://notes.eatonphil.com/2023-06-19-metaprogramming-in-zig-and-parsing-css.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ePeta-Byte Scale Web Crawler - \u003ca href=\"https://ocaml.org/success-stories/peta-byte-scale-web-crawler\"\u003ehttps://ocaml.org/success-stories/peta-byte-scale-web-crawler\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e10 Tips for Building Resilient Payment Systems - \u003ca href=\"https://shopify.engineering/building-resilient-payment-systems\"\u003ehttps://shopify.engineering/building-resilient-payment-systems\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eUnderstanding Mergesort: Sorting Made Simple | Recursion Series - \u003ca href=\"https://www.youtube.com/watch?v=-3u1C1URNZY\"\u003ehttps://www.youtube.com/watch?v=-3u1C1URNZY\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eBrowserless app runtime in Rust - Demo app in Zig - Wasm/WebGPU - \u003ca href=\"https://www.youtube.com/watch?v=VhCgep06-I8\"\u003ehttps://www.youtube.com/watch?v=VhCgep06-I8\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ePostgreSQL reconsiders its process-based model - \u003ca href=\"https://lwn.net/SubscriberLink/934940/3abb2d4086680b78/\"\u003ehttps://lwn.net/SubscriberLink/934940/3abb2d4086680b78/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow This One Question Breaks Computers - \u003ca href=\"https://www.youtube.com/watch?v=sG0obNcgNJM\"\u003ehttps://www.youtube.com/watch?v=sG0obNcgNJM\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eCode Review \u0026amp; Refactoring to a better design - \u003ca href=\"https://www.youtube.com/watch?v=ka0Ag98_o_g\"\u003ehttps://www.youtube.com/watch?v=ka0Ag98_o_g\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eFibers, Oh My! # - \u003ca href=\"https://graphitemaster.github.io/fibers/\"\u003ehttps://graphitemaster.github.io/fibers/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWAL: Everything you want to know - \u003ca href=\"https://www.youtube.com/watch?v=feTihjJJs3g\"\u003ehttps://www.youtube.com/watch?v=feTihjJJs3g\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow to connect a private data source - \u003ca href=\"https://www.youtube.com/watch?v=9pnf2U3KhG4\"\u003ehttps://www.youtube.com/watch?v=9pnf2U3KhG4\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhat is Redpanda BYOC? - \u003ca href=\"https://www.youtube.com/watch?v=gVlzsJAYT64\"\u003ehttps://www.youtube.com/watch?v=gVlzsJAYT64\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow To Speak Rust - \u003ca href=\"https://www.youtube.com/watch?v=bu_gulee89Q\"\u003ehttps://www.youtube.com/watch?v=bu_gulee89Q\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u0026ldquo;Functional distributed systems beyond request/response\u0026rdquo; by Melinda Lu - \u003ca href=\"https://www.youtube.com/watch?v=VWrpnT8rwVY\"\u003ehttps://www.youtube.com/watch?v=VWrpnT8rwVY\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMaking variables atomic in C - \u003ca href=\"https://www.youtube.com/watch?v=_xX25ThomIo\"\u003ehttps://www.youtube.com/watch?v=_xX25ThomIo\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eNixOS in 60 seconds - \u003ca href=\"https://www.youtube.com/watch?v=Ukglm5KJFa8\"\u003ehttps://www.youtube.com/watch?v=Ukglm5KJFa8\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow to Map Files into Memory in C (mmap, memory mapped file io) - \u003ca href=\"https://www.youtube.com/watch?v=m7E9piHcfr4\"\u003ehttps://www.youtube.com/watch?v=m7E9piHcfr4\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe Call Stack and Stack Overflows (example in C) - \u003ca href=\"https://www.youtube.com/watch?v=jVzSBkbfdiw\"\u003ehttps://www.youtube.com/watch?v=jVzSBkbfdiw\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDatabase Auto increment vs UUID - Which is Right for You? - \u003ca href=\"https://www.youtube.com/watch?v=5Xog8d_2um4\"\u003ehttps://www.youtube.com/watch?v=5Xog8d_2um4\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eUniversal Compaction in RocksDB and me - smalldatum.blogspot.com/2023/06/universal-compaction-in-rocksdb-and-me.html\u003c/li\u003e\n\u003cli\u003eBuilding an MQTT Broker from Scratch with Rust and Lunatic: Part 1 - \u003ca href=\"https://medium.com/@yuriy.voshch/building-an-mqtt-broker-from-scratch-with-rust-and-lunatic-part-1-bff5a2a58f61\"\u003ehttps://medium.com/@yuriy.voshch/building-an-mqtt-broker-from-scratch-with-rust-and-lunatic-part-1-bff5a2a58f61\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eBuilding an MQTT Broker from Scratch with Rust and Lunatic: Part 2 - \u003ca href=\"https://medium.com/@yuriy.voshch/building-an-mqtt-broker-from-scratch-with-rust-and-lunatic-part-2-8403f8cace09\"\u003ehttps://medium.com/@yuriy.voshch/building-an-mqtt-broker-from-scratch-with-rust-and-lunatic-part-2-8403f8cace09\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMy Tips On Hyper-Productivity As A Software Engineer - \u003ca href=\"https://www.youtube.com/watch?v=cY1irhk57w4\"\u003ehttps://www.youtube.com/watch?v=cY1irhk57w4\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTopics, Partitions and Offsets: Apache Kafka - \u003ca href=\"https://www.youtube.com/watch?v=UHjSP7nxk7g\"\u003ehttps://www.youtube.com/watch?v=UHjSP7nxk7g\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eStruct packing: No, you\u0026rsquo;re not going crazy. - \u003ca href=\"https://www.youtube.com/watch?v=grk4QUDveFw\"\u003ehttps://www.youtube.com/watch?v=grk4QUDveFw\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhy \u003ccode\u003efsync()\u003c/code\u003e: Losing unsynced data on a single node leads to global data loss - \u003ca href=\"https://redpanda.com/blog/why-fsync-is-needed-for-data-safety-in-kafka-or-non-byzantine-protocols?utm_source=twitter\u0026amp;utm_medium=social\u0026amp;utm_campaign=may16_social\u0026amp;utm_assettype=blog\u0026amp;utm_assetname=fsync\"\u003ehttps://redpanda.com/blog/why-fsync-is-needed-for-data-safety-in-kafka-or-non-byzantine-protocols?utm_source=twitter\u0026utm_medium=social\u0026utm_campaign=may16_social\u0026utm_assettype=blog\u0026utm_assetname=fsync\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWasm + Kubernetes: Beyond Containers - Sean Isom, Adobe \u0026amp; Colin Murphy, Adobe - \u003ca href=\"https://www.youtube.com/watch?v=1_iCimJrLzM\"\u003ehttps://www.youtube.com/watch?v=1_iCimJrLzM\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eUnderstanding Raft - \u003ca href=\"https://arorashu.github.io/posts/raft.html\"\u003ehttps://arorashu.github.io/posts/raft.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eRust fact vs. fiction: 5 Insights from Google\u0026rsquo;s Rust journey in 2022 - \u003ca href=\"https://opensource.googleblog.com/2023/06/rust-fact-vs-fiction-5-insights-from-googles-rust-journey-2022.html\"\u003ehttps://opensource.googleblog.com/2023/06/rust-fact-vs-fiction-5-insights-from-googles-rust-journey-2022.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eYour Variables are Not Real. - \u003ca href=\"https://www.youtube.com/watch?v=YO6K5K1TUj4\"\u003ehttps://www.youtube.com/watch?v=YO6K5K1TUj4\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u0026ldquo;How to Have your Causality and Wall Clocks, Too\u0026rdquo; by Jon Moore - \u003ca href=\"https://www.youtube.com/watch?v=YqNGbvFHoKM\"\u003ehttps://www.youtube.com/watch?v=YqNGbvFHoKM\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eKeep Your Network Traffic in AWS with VPC Endpoints | Overview and Tutorial - \u003ca href=\"https://www.youtube.com/watch?v=jo3X_aay4Vs\"\u003ehttps://www.youtube.com/watch?v=jo3X_aay4Vs\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWork distribution with Jump Consistent Hashing - \u003ca href=\"https://zacksiri.dev/posts/work-distribution-with-jump-consistent-hashing\"\u003ehttps://zacksiri.dev/posts/work-distribution-with-jump-consistent-hashing\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow Rust transforms into Machine Code. - \u003ca href=\"https://www.reddit.com/r/rust/comments/13zdmvc/how_rust_transforms_into_machine_code/\"\u003ehttps://www.reddit.com/r/rust/comments/13zdmvc/how_rust_transforms_into_machine_code/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003evDSO - \u003ca href=\"https://en.wikipedia.org/wiki/VDSO\"\u003ehttps://en.wikipedia.org/wiki/VDSO\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eOn the Costs of Syscalls - \u003ca href=\"https://gms.tf/on-the-costs-of-syscalls.html\"\u003ehttps://gms.tf/on-the-costs-of-syscalls.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eIntroducing MIR - \u003ca href=\"https://blog.rust-lang.org/2016/04/19/MIR.html\"\u003ehttps://blog.rust-lang.org/2016/04/19/MIR.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSingle() or First()? Understand the abstractions you use! - \u003ca href=\"https://www.youtube.com/watch?v=bxZ8-Qt3eKk\"\u003ehttps://www.youtube.com/watch?v=bxZ8-Qt3eKk\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eLearn How To Write YARA Rules for Malware Detection - \u003ca href=\"https://www.youtube.com/watch?v=zzpz3VYKzUw\"\u003ehttps://www.youtube.com/watch?v=zzpz3VYKzUw\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eA new era for cluster coordination in Elasticsearch - \u003ca href=\"https://www.elastic.co/blog/a-new-era-for-cluster-coordination-in-elasticsearch\"\u003ehttps://www.elastic.co/blog/a-new-era-for-cluster-coordination-in-elasticsearch\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSequence IDs: Coming Soon to an Elasticsearch Cluster Near You - \u003ca href=\"https://www.elastic.co/blog/elasticsearch-sequence-ids-6-0\"\u003ehttps://www.elastic.co/blog/elasticsearch-sequence-ids-6-0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eRepeatable Read vs Snapshot Isolation - \u003ca href=\"https://jaymcor.github.io/notes/isolation_rr_si.html\"\u003ehttps://jaymcor.github.io/notes/isolation_rr_si.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWebTransport is a Game Changer Protocol - \u003ca href=\"https://www.youtube.com/watch?v=SEF8VBYlLik\"\u003ehttps://www.youtube.com/watch?v=SEF8VBYlLik\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhat if my command was rejected? - \u003ca href=\"https://milestone.topics.it/2023/06/27/reject-commands.html\"\u003ehttps://milestone.topics.it/2023/06/27/reject-commands.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eKubernetes NodePort vs LoadBalancer vs Ingress - \u003ca href=\"https://www.youtube.com/watch?v=RQbc_Yjb9ls\"\u003ehttps://www.youtube.com/watch?v=RQbc_Yjb9ls\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eOAuth 2 Explained In Simple Terms - \u003ca href=\"https://www.youtube.com/watch?v=ZV5yTm4pT8g\"\u003ehttps://www.youtube.com/watch?v=ZV5yTm4pT8g\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eGolang Fiber Auth Middleware Setup For My New Side Hustle - \u003ca href=\"https://www.youtube.com/watch?v=b3t8848Tqvg\"\u003ehttps://www.youtube.com/watch?v=b3t8848Tqvg\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eChoose the Right Option - \u003ca href=\"https://www.youtube.com/watch?v=6c7pZYP_iIE\"\u003ehttps://www.youtube.com/watch?v=6c7pZYP_iIE\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eI caught an exception. Now what? - \u003ca href=\"https://particular.net/blog/but-all-my-errors-are-severe\"\u003ehttps://particular.net/blog/but-all-my-errors-are-severe\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTales of a reservation - \u003ca href=\"https://milestone.topics.it/2021/05/05/tales-of-a-reservation.html\"\u003ehttps://milestone.topics.it/2021/05/05/tales-of-a-reservation.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhat is the deal with security and distributed systems? - \u003ca href=\"https://milestone.topics.it/2022/11/01/security-and-soa.html\"\u003ehttps://milestone.topics.it/2022/11/01/security-and-soa.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDemystifying the role of a founding engineer - \u003ca href=\"https://basecase.vc/blog/founding-engineer\"\u003ehttps://basecase.vc/blog/founding-engineer\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e9 fintech engineering mistakes - \u003ca href=\"https://startupwin.kelsus.com/p/9-fintech-engineering-mistakes\"\u003ehttps://startupwin.kelsus.com/p/9-fintech-engineering-mistakes\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAn Elegant DB Schema for Double-Entry Accounting - \u003ca href=\"https://blog.journalize.io/posts/an-elegant-db-schema-for-double-entry-accounting/\"\u003ehttps://blog.journalize.io/posts/an-elegant-db-schema-for-double-entry-accounting/\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"july\"\u003eJuly\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eThe right way to define a C function with no arguments - \u003ca href=\"https://www.youtube.com/watch?v=VsRs0H4hXEE\"\u003ehttps://www.youtube.com/watch?v=VsRs0H4hXEE\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTREE-STRUCTURED CONCURRENCY — 2023-07-01 - \u003ca href=\"https://blog.yoshuawuyts.com/tree-structured-concurrency/\"\u003ehttps://blog.yoshuawuyts.com/tree-structured-concurrency/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMyths Programmers Believe about CPU Caches - \u003ca href=\"https://software.rajivprab.com/2018/04/29/myths-programmers-believe-about-cpu-caches/\"\u003ehttps://software.rajivprab.com/2018/04/29/myths-programmers-believe-about-cpu-caches/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eEventual vs Strong Consistency in Distributed Databases - \u003ca href=\"https://hackernoon.com/eventual-vs-strong-consistency-in-distributed-databases-282fdad37cf7\"\u003ehttps://hackernoon.com/eventual-vs-strong-consistency-in-distributed-databases-282fdad37cf7\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAccounting For Developers, Part I - \u003ca href=\"https://www.moderntreasury.com/journal/accounting-for-developers-part-i\"\u003ehttps://www.moderntreasury.com/journal/accounting-for-developers-part-i\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAccounting For Developers, Part II - \u003ca href=\"https://www.moderntreasury.com/journal/accounting-for-developers-part-ii\"\u003ehttps://www.moderntreasury.com/journal/accounting-for-developers-part-ii\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAccounting for Developers Part III: Building a Lending Marketplace - \u003ca href=\"https://www.moderntreasury.com/journal/accounting-for-developers-part-iii\"\u003ehttps://www.moderntreasury.com/journal/accounting-for-developers-part-iii\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhat is a Wire Transfer? - \u003ca href=\"https://www.moderntreasury.com/learn/what-is-a-wire-transfer\"\u003ehttps://www.moderntreasury.com/learn/what-is-a-wire-transfer\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhat is RTP? - \u003ca href=\"https://www.moderntreasury.com/learn/what-is-rtp\"\u003ehttps://www.moderntreasury.com/learn/what-is-rtp\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003evTables for Game Hacking \u0026amp; VMT Hooking - \u003ca href=\"https://www.youtube.com/watch?v=HfrBdf-hM28\"\u003ehttps://www.youtube.com/watch?v=HfrBdf-hM28\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAPI vs. Messaging — How to Choose Which One to Use? - \u003ca href=\"https://betterprogramming.pub/api-vs-messaging-how-to-choose-which-one-to-use-d6634599d2bd\"\u003ehttps://betterprogramming.pub/api-vs-messaging-how-to-choose-which-one-to-use-d6634599d2bd\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eKubernetes Basics: Pods, Nodes, Containers, Deployments \u0026amp; Clusters - \u003ca href=\"https://www.youtube.com/watch?v=6IPu3WU_M0o\"\u003ehttps://www.youtube.com/watch?v=6IPu3WU_M0o\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAre You Sure You Want to Use MMAP in Your Database Management System? - \u003ca href=\"https://db.cs.cmu.edu/papers/2022/cidr2022-p13-crotty.pdf\"\u003ehttps://db.cs.cmu.edu/papers/2022/cidr2022-p13-crotty.pdf\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eContent-based filtering \u0026amp; collaborative filtering (Building recommendation systems with TensorFlow) - \u003ca href=\"https://www.youtube.com/watch?v=v90un9ALRzw\"\u003ehttps://www.youtube.com/watch?v=v90un9ALRzw\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhat are Business Rules? It\u0026rsquo;s not this. - \u003ca href=\"https://www.youtube.com/watch?v=FbYcIqVmGRk\"\u003ehttps://www.youtube.com/watch?v=FbYcIqVmGRk\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDemystifying the Unusual Evolution of the Netflix API Architecture - \u003ca href=\"https://www.youtube.com/watch?v=Uu32ggF-DWg\"\u003ehttps://www.youtube.com/watch?v=Uu32ggF-DWg\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eA Gentle Introduction to Linear Algebra - \u003ca href=\"https://machinelearningmastery.com/gentle-introduction-linear-algebra/\"\u003ehttps://machinelearningmastery.com/gentle-introduction-linear-algebra/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eIntroduction to Amazon Personalize - \u003ca href=\"https://www.youtube.com/watch?v=3gJmhoLaLIo\"\u003ehttps://www.youtube.com/watch?v=3gJmhoLaLIo\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eUnderstanding your Data with Amazon Personalize - \u003ca href=\"https://www.youtube.com/watch?v=TEioktJD1GE\"\u003ehttps://www.youtube.com/watch?v=TEioktJD1GE\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSolving Real World Use Cases with Amazon Personalize - \u003ca href=\"https://www.youtube.com/watch?v=9N7s_dVVWBE\"\u003ehttps://www.youtube.com/watch?v=9N7s_dVVWBE\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ehow do computers create code? - \u003ca href=\"https://www.youtube.com/watch?v=2y1IgW2T8bo\"\u003ehttps://www.youtube.com/watch?v=2y1IgW2T8bo\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhat if writing tests was a joyful experience - \u003ca href=\"https://blog.janestreet.com/the-joy-of-expect-tests/\"\u003ehttps://blog.janestreet.com/the-joy-of-expect-tests/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eQuickcheck for Core - \u003ca href=\"https://blog.janestreet.com/quickcheck-for-core/\"\u003ehttps://blog.janestreet.com/quickcheck-for-core/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eBasics of Mathematical Notation for Machine Learning - \u003ca href=\"https://machinelearningmastery.com/basics-mathematical-notation-machine-learning/\"\u003ehttps://machinelearningmastery.com/basics-mathematical-notation-machine-learning/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eA Real Use Case of Goroutines With Package Context In Golang - \u003ca href=\"https://www.youtube.com/watch?v=5QyxqhLnKmM\"\u003ehttps://www.youtube.com/watch?v=5QyxqhLnKmM\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eEngineering Intensity - \u003ca href=\"https://ruiper.es/posts/engineering_intensity/\"\u003ehttps://ruiper.es/posts/engineering_intensity/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eImplementing a Transactional Outbox Pattern with DynamoDB Streams to Avoid 2-phase Commits - \u003ca href=\"https://medium.com/ssense-tech/implementing-a-transactional-outbox-pattern-with-dynamodb-streams-to-avoid-2-phase-commits-ed0f91e69e9\"\u003ehttps://medium.com/ssense-tech/implementing-a-transactional-outbox-pattern-with-dynamodb-streams-to-avoid-2-phase-commits-ed0f91e69e9\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eStatQuest: K-nearest neighbors, Clearly Explained - \u003ca href=\"https://www.youtube.com/watch?v=HVXime0nQeI\"\u003ehttps://www.youtube.com/watch?v=HVXime0nQeI\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eBRIDGING FUZZING AND PROPERTY TESTING — 2023-07-10 - \u003ca href=\"https://blog.yoshuawuyts.com/bridging-fuzzing-and-property-testing/\"\u003ehttps://blog.yoshuawuyts.com/bridging-fuzzing-and-property-testing/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e289 - CONFIABILIDADE \u0026amp; ESCALABILIDADE em aplicações com uso intensivo de DADOS | theWiseDev NFR - \u003ca href=\"https://www.youtube.com/watch?v=EXwJwwOJ1UY\"\u003ehttps://www.youtube.com/watch?v=EXwJwwOJ1UY\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhy ScyllaDB is Moving to a New Replication Algorithm: Tablets - \u003ca href=\"https://www.scylladb.com/2023/07/10/why-scylladb-is-moving-to-a-new-replication-algorithm-tablets/\"\u003ehttps://www.scylladb.com/2023/07/10/why-scylladb-is-moving-to-a-new-replication-algorithm-tablets/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eA problem so hard even Google relies on Random Chance - \u003ca href=\"https://www.youtube.com/watch?v=lJYufx0bfpw\"\u003ehttps://www.youtube.com/watch?v=lJYufx0bfpw\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAre You Sure You Want to Use MMAP in Your Database Management System? - \u003ca href=\"https://www.youtube.com/watch?v=1BRGU_AS25c\"\u003ehttps://www.youtube.com/watch?v=1BRGU_AS25c\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDigital Wallet - \u003ca href=\"https://www.moderntreasury.com/learn/digital-wallet\"\u003ehttps://www.moderntreasury.com/learn/digital-wallet\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhat is ACH? - \u003ca href=\"https://www.moderntreasury.com/learn/what-is-ach\"\u003ehttps://www.moderntreasury.com/learn/what-is-ach\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow simple can a programming language be? - \u003ca href=\"https://www.youtube.com/watch?v=Fg5En6pbsDA\"\u003ehttps://www.youtube.com/watch?v=Fg5En6pbsDA\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eKubernetes Deployment vs. StatefulSet vs. DaemonSet - \u003ca href=\"https://www.youtube.com/watch?v=30KAInyvY_o\"\u003ehttps://www.youtube.com/watch?v=30KAInyvY_o\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow to Optimize Caching for Transactions - \u003ca href=\"https://audreyccheng.com/blog/transaction-caching/\"\u003ehttps://audreyccheng.com/blog/transaction-caching/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow to use mongoDB change streams as a powerful event-driven engine - \u003ca href=\"https://dev.to/woovi/how-to-use-mongodb-change-streams-as-a-powerful-event-driven-engine-4d9c\"\u003ehttps://dev.to/woovi/how-to-use-mongodb-change-streams-as-a-powerful-event-driven-engine-4d9c\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMaking WebAssembly even faster: Firefox’s new streaming and tiering compiler - \u003ca href=\"https://hacks.mozilla.org/2018/01/making-webassembly-even-faster-firefoxs-new-streaming-and-tiering-compiler/\"\u003ehttps://hacks.mozilla.org/2018/01/making-webassembly-even-faster-firefoxs-new-streaming-and-tiering-compiler/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eLife of a Packet [I] - Michael Rubin, Google - \u003ca href=\"https://www.youtube.com/watch?v=0Omvgd7Hg1I\"\u003ehttps://www.youtube.com/watch?v=0Omvgd7Hg1I\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eData Lakehouse Architecture \u0026amp; Use-Cases - \u003ca href=\"https://www.youtube.com/watch?v=hB6olelYhr0\"\u003ehttps://www.youtube.com/watch?v=hB6olelYhr0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMaking FinTech systems safe, reliable, and scalable with Redpanda - \u003ca href=\"https://redpanda.com/blog/data-streaming-for-financial-services\"\u003ehttps://redpanda.com/blog/data-streaming-for-financial-services\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAnnouncing Rust 1.71.0 - \u003ca href=\"https://blog.rust-lang.org/2023/07/13/Rust-1.71.0.html\"\u003ehttps://blog.rust-lang.org/2023/07/13/Rust-1.71.0.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eFocusing on \u0026ldquo;Entities\u0026rdquo; leads nowhere good. - \u003ca href=\"https://www.youtube.com/watch?v=v5Fss4fCl8c\"\u003ehttps://www.youtube.com/watch?v=v5Fss4fCl8c\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow Functions Function - \u003ca href=\"https://www.youtube.com/watch?v=SqT5YglW3qU\"\u003ehttps://www.youtube.com/watch?v=SqT5YglW3qU\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSingle vs. Double Entry Accounting - \u003ca href=\"https://www.moderntreasury.com/learn/single-vs-double-entry-accounting\"\u003ehttps://www.moderntreasury.com/learn/single-vs-double-entry-accounting\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eBank Reconciliation - \u003ca href=\"https://www.moderntreasury.com/learn/bank-reconciliation\"\u003ehttps://www.moderntreasury.com/learn/bank-reconciliation\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhat is a Ledger? - \u003ca href=\"https://www.moderntreasury.com/learn/what-is-a-ledger\"\u003ehttps://www.moderntreasury.com/learn/what-is-a-ledger\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow Big Is A Character? - \u003ca href=\"https://www.youtube.com/watch?v=BAGcSyrWiPs\"\u003ehttps://www.youtube.com/watch?v=BAGcSyrWiPs\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eScylla Summit 2022: The Future of Consensus in ScyllaDB 5.0 and Beyond - \u003ca href=\"https://www.youtube.com/watch?v=LoriHUqrzso\"\u003ehttps://www.youtube.com/watch?v=LoriHUqrzso\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eI Cheated, and Gave Myself Infinite Hearts in Aladdin for SNES (snes rom hacks) - \u003ca href=\"https://www.youtube.com/watch?v=2ZnAS5_0Z3I\"\u003ehttps://www.youtube.com/watch?v=2ZnAS5_0Z3I\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAccounting for Computer Scientists - \u003ca href=\"https://martin.kleppmann.com/2011/03/07/accounting-for-computer-scientists.html\"\u003ehttps://martin.kleppmann.com/2011/03/07/accounting-for-computer-scientists.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAndrew Kelley - Practical DOD - \u003ca href=\"https://vimeo.com/649009599\"\u003ehttps://vimeo.com/649009599\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAnicet Nougaret - Insights from making a DNN \u0026amp; CNN library from scratch in Rust - \u003ca href=\"https://www.youtube.com/watch?v=GjUM8ejy6kE\"\u003ehttps://www.youtube.com/watch?v=GjUM8ejy6kE\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhat is Database Sharding? - \u003ca href=\"https://www.youtube.com/watch?v=XP98YCr-iXQ\"\u003ehttps://www.youtube.com/watch?v=XP98YCr-iXQ\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHandles are the better pointers - \u003ca href=\"https://floooh.github.io/2018/06/17/handles-vs-pointers.html\"\u003ehttps://floooh.github.io/2018/06/17/handles-vs-pointers.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eGetting Hands on with io_uring using Go - \u003ca href=\"https://developers.mattermost.com/blog/hands-on-iouring-go/\"\u003ehttps://developers.mattermost.com/blog/hands-on-iouring-go/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eImplementing Raft: Part 0 - Introduction - \u003ca href=\"https://eli.thegreenplace.net/2020/implementing-raft-part-0-introduction/\"\u003ehttps://eli.thegreenplace.net/2020/implementing-raft-part-0-introduction/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eImplementing Raft: Part 1 - Elections - \u003ca href=\"https://eli.thegreenplace.net/2020/implementing-raft-part-1-elections/\"\u003ehttps://eli.thegreenplace.net/2020/implementing-raft-part-1-elections/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eImplementing Raft: Part 2 - Commands and Log Replication - \u003ca href=\"https://eli.thegreenplace.net/2020/implementing-raft-part-2-commands-and-log-replication/\"\u003ehttps://eli.thegreenplace.net/2020/implementing-raft-part-2-commands-and-log-replication/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eImplementing Raft: Part 3 - Persistence and Optimizations - \u003ca href=\"https://eli.thegreenplace.net/2020/implementing-raft-part-3-persistence-and-optimizations/\"\u003ehttps://eli.thegreenplace.net/2020/implementing-raft-part-3-persistence-and-optimizations/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow do games like Prince of Persia manipulate time? | Bitwise - \u003ca href=\"https://www.youtube.com/watch?v=GYLBCTTyHsI\"\u003ehttps://www.youtube.com/watch?v=GYLBCTTyHsI\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhat’s new with io_uring - \u003ca href=\"https://kernel.dk/io_uring-whatsnew.pdf\"\u003ehttps://kernel.dk/io_uring-whatsnew.pdf\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHash chain - \u003ca href=\"https://en.wikipedia.org/wiki/Hash_chain\"\u003ehttps://en.wikipedia.org/wiki/Hash_chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThings I Wish I Knew Before Building a Ledger - \u003ca href=\"https://www.andriosrobert.com/p/things-i-wish-i-knew-before-building\"\u003ehttps://www.andriosrobert.com/p/things-i-wish-i-knew-before-building\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eBack to Basics: commands, events, and messages - \u003ca href=\"https://milestone.topics.it/2023/05/25/back-to-basics-messages.html\"\u003ehttps://milestone.topics.it/2023/05/25/back-to-basics-messages.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe looming demise of the 10x developer: Why an era of enthusiast programmers is coming to an end - \u003ca href=\"https://blog.testdouble.com/posts/2023-07-12-the-looming-demise-of-the-10x-developer/\"\u003ehttps://blog.testdouble.com/posts/2023-07-12-the-looming-demise-of-the-10x-developer/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eNumPy vs SciPy - \u003ca href=\"https://www.youtube.com/watch?v=l3s-_8uTBVA\"\u003ehttps://www.youtube.com/watch?v=l3s-_8uTBVA\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe basics of the InnoDB undo logging and history system - \u003ca href=\"https://blog.jcole.us/innodb/\"\u003ehttps://blog.jcole.us/innodb/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eVisualizing the impact of ordered vs. random index insertion in InnoDB - \u003ca href=\"https://blog.jcole.us/2014/10/02/visualizing-the-impact-of-ordered-vs-random-index-insertion-in-innodb/\"\u003ehttps://blog.jcole.us/2014/10/02/visualizing-the-impact-of-ordered-vs-random-index-insertion-in-innodb/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eCoroutines for Go - \u003ca href=\"https://research.swtch.com/coro\"\u003ehttps://research.swtch.com/coro\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e290 - SQL ou NoSQL: EIS A QUESTÃO! 🤔 | theWiseDev SQL - \u003ca href=\"https://www.youtube.com/watch?v=mP11yY6uKmg\"\u003ehttps://www.youtube.com/watch?v=mP11yY6uKmg\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eStep Function Callbacks with AWS Lambda | Console Tutorial - \u003ca href=\"https://www.youtube.com/watch?v=Uacjxu_AJTI\"\u003ehttps://www.youtube.com/watch?v=Uacjxu_AJTI\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMulti-tenant data isolation with PostgreSQL Row Level Security - \u003ca href=\"https://aws.amazon.com/blogs/database/multi-tenant-data-isolation-with-postgresql-row-level-security/\"\u003ehttps://aws.amazon.com/blogs/database/multi-tenant-data-isolation-with-postgresql-row-level-security/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMySQL Row-Level Security - \u003ca href=\"https://satoricyber.com/mysql-security/mysql-row-level-security/\"\u003ehttps://satoricyber.com/mysql-security/mysql-row-level-security/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSimulation Testing For Liveness - \u003ca href=\"https://tigerbeetle.com/blog/2023-07-06-simulation-testing-for-liveness/\"\u003ehttps://tigerbeetle.com/blog/2023-07-06-simulation-testing-for-liveness/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eBasics of Linear Algebra for Machine Learning - \u003ca href=\"https://machinelearningmastery.com/linear_algebra_for_machine_learning/\"\u003ehttps://machinelearningmastery.com/linear_algebra_for_machine_learning/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eBinary Comparisons for Patch Diffing - BinDiff Tutorial - \u003ca href=\"https://www.youtube.com/watch?v=n06QSoICU6c\"\u003ehttps://www.youtube.com/watch?v=n06QSoICU6c\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow real user monitoring works in Grafana Cloud Frontend Observability - \u003ca href=\"https://www.youtube.com/watch?v=5MfpcwTEQ6g\"\u003ehttps://www.youtube.com/watch?v=5MfpcwTEQ6g\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eObserve your Rust application with Quickwit, Jaeger and Grafana - \u003ca href=\"https://quickwit.io/blog/observing-rust-app-with-quickwit-jaeger-grafana\"\u003ehttps://quickwit.io/blog/observing-rust-app-with-quickwit-jaeger-grafana\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDevOps vs SRE vs Platform Engineering | Clear Big Misconceptions - \u003ca href=\"https://www.youtube.com/watch?v=an8SrFtJBdM\"\u003ehttps://www.youtube.com/watch?v=an8SrFtJBdM\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDDD is just giving a $h!t about your Domain - \u003ca href=\"https://www.youtube.com/watch?v=i0aGAdgbG7A\"\u003ehttps://www.youtube.com/watch?v=i0aGAdgbG7A\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eBernard Kolobara – Lunatic - Erlang-inspired runtime for WebAssembly - Rust Vienna May 2023 - \u003ca href=\"https://www.youtube.com/watch?v=VhDUGLdj5hY\"\u003ehttps://www.youtube.com/watch?v=VhDUGLdj5hY\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDifferences between Apache Kafka and Redpanda: Bypass page cache \u0026amp; optimize for direct memory access - \u003ca href=\"https://www.youtube.com/watch?v=ugZkzonAaqs\"\u003ehttps://www.youtube.com/watch?v=ugZkzonAaqs\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eVertical Slice Architecture, not Layers! - \u003ca href=\"https://www.youtube.com/watch?v=L2Wnq0ChAIA\"\u003ehttps://www.youtube.com/watch?v=L2Wnq0ChAIA\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSending generated traces to Grafana Tempo - \u003ca href=\"https://www.youtube.com/watch?v=V5GtJRZtZ90\"\u003ehttps://www.youtube.com/watch?v=V5GtJRZtZ90\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eA Good Rust Stack - \u003ca href=\"https://www.youtube.com/watch?v=pocWrUj68tU\"\u003ehttps://www.youtube.com/watch?v=pocWrUj68tU\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMake invalid states unrepresentable - \u003ca href=\"https://geeklaunch.io/blog/make-invalid-states-unrepresentable/\"\u003ehttps://geeklaunch.io/blog/make-invalid-states-unrepresentable/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eBook Review: Nine Lies About Work - \u003ca href=\"https://www.daviddaly.me/2023/07/book-review-nine-lies-about-work.html\"\u003ehttps://www.daviddaly.me/2023/07/book-review-nine-lies-about-work.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eBuilding for Failure - \u003ca href=\"https://encore.dev/blog/building-for-failure\"\u003ehttps://encore.dev/blog/building-for-failure\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhy \u003ccode\u003efsync()\u003c/code\u003e: Losing unsynced data on a single node leads to global data loss - \u003ca href=\"https://redpanda.com/blog/why-fsync-is-needed-for-data-safety-in-kafka-or-non-byzantine-protocols?utm_source=twitter\u0026amp;utm_medium=social\u0026amp;utm_campaign=may16_social\u0026amp;utm_assettype=blog\u0026amp;utm_assetname=fsync\"\u003ehttps://redpanda.com/blog/why-fsync-is-needed-for-data-safety-in-kafka-or-non-byzantine-protocols?utm_source=twitter\u0026utm_medium=social\u0026utm_campaign=may16_social\u0026utm_assettype=blog\u0026utm_assetname=fsync\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe big picture: How Google Photos scaled rapidly on Spanner - \u003ca href=\"https://cloud.google.com/blog/products/databases/google-photos-builds-user-experience-on-spanner/\"\u003ehttps://cloud.google.com/blog/products/databases/google-photos-builds-user-experience-on-spanner/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eFull Circle - \u003ca href=\"https://taliaringer.wordpress.com/2023/07/22/full-circle/\"\u003ehttps://taliaringer.wordpress.com/2023/07/22/full-circle/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e6 SQL Joins you MUST know! (Animated + Practice) - \u003ca href=\"https://www.youtube.com/watch?v=Yh4CrPHVBdE\"\u003ehttps://www.youtube.com/watch?v=Yh4CrPHVBdE\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow This Expression Caused a Global Internet Outage - youtube.com/watch?v=DDe-S3uef2w\u003c/li\u003e\n\u003cli\u003eSquare vs. Stripe - \u003ca href=\"https://www.investopedia.com/articles/personal-finance/021715/square-vs-stripe.asp\"\u003ehttps://www.investopedia.com/articles/personal-finance/021715/square-vs-stripe.asp\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eQual a diferença entre Instituição de Pagamentos e Instituição Financeira?​ - \u003ca href=\"https://www.iugu.com/blog/instituicao-de-pagamentos\"\u003ehttps://www.iugu.com/blog/instituicao-de-pagamentos\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eO que são arranjos de pagamentos e para que eles servem? - \u003ca href=\"https://www.iugu.com/blog/o-que-sao-arranjos-de-pagamentos\"\u003ehttps://www.iugu.com/blog/o-que-sao-arranjos-de-pagamentos\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eEntenda o que é CIP e veja as mudanças para marketplaces - \u003ca href=\"https://www.iugu.com/blog/cip-camara-interbancaria-pagamentos-o-que-e\"\u003ehttps://www.iugu.com/blog/cip-camara-interbancaria-pagamentos-o-que-e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eBuilding an an Early Stage Startup: Lessons from Akita Software - \u003ca href=\"https://blog.pragmaticengineer.com/building-an-an-early-stage-startup/\"\u003ehttps://blog.pragmaticengineer.com/building-an-an-early-stage-startup/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eO que é uma instituição de pagamento regulamentada pelo BACEN? - \u003ca href=\"https://www.iugu.com/blog/instituicao-de-pagamento-regulamentada-bacen\"\u003ehttps://www.iugu.com/blog/instituicao-de-pagamento-regulamentada-bacen\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eComo funciona o mercado de Marketplace no Brasil? - \u003ca href=\"https://www.iugu.com/blog/mercado-de-marketplace-no-brasil\"\u003ehttps://www.iugu.com/blog/mercado-de-marketplace-no-brasil\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eToken triplo: o que é e como protege os pagamentos digitais? - \u003ca href=\"https://www.iugu.com/blog/token-triplo\"\u003ehttps://www.iugu.com/blog/token-triplo\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eInstituições de pagamento - \u003ca href=\"https://www.bcb.gov.br/estabilidadefinanceira/instituicaopagamento\"\u003ehttps://www.bcb.gov.br/estabilidadefinanceira/instituicaopagamento\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eArranjo de Pagamentos: O que sua Startup precisa saber sobre esse sistema - \u003ca href=\"https://ndmadvogados.com.br/artigos/arranjo-de-pagamentos-o-que-sua-startup-precisa-saber-sobre-esse-sistema\"\u003ehttps://ndmadvogados.com.br/artigos/arranjo-de-pagamentos-o-que-sua-startup-precisa-saber-sobre-esse-sistema\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eComo criar uma Fintech de Pagamentos para Apostas Esportivas? - \u003ca href=\"https://ndmadvogados.com.br/artigos/como-criar-uma-fintech-de-pagamentos-para-apostas-esportivas\"\u003ehttps://ndmadvogados.com.br/artigos/como-criar-uma-fintech-de-pagamentos-para-apostas-esportivas\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e23 Sistema de Pagamentos Brasileiro – SPB - \u003ca href=\"https://www.youtube.com/watch?v=1BT2l_REaBI\"\u003ehttps://www.youtube.com/watch?v=1BT2l_REaBI\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eInstituição de Pagamento: como obter autorização do Banco Central | NDM na Prática - \u003ca href=\"https://www.youtube.com/watch?v=F8Vt675A78w\"\u003ehttps://www.youtube.com/watch?v=F8Vt675A78w\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eImplementing a Regular Expression Engine - \u003ca href=\"https://deniskyashif.com/2019/02/17/implementing-a-regular-expression-engine/\"\u003ehttps://deniskyashif.com/2019/02/17/implementing-a-regular-expression-engine/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAmazon EC2 P5 Instances | Amazon Web Services - \u003ca href=\"https://www.youtube.com/watch?v=S8JR50sVong\"\u003ehttps://www.youtube.com/watch?v=S8JR50sVong\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eScaling your API with rate limiters - \u003ca href=\"https://stripe.com/blog/rate-limiters\"\u003ehttps://stripe.com/blog/rate-limiters\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eScaling your API with rate limiters - \u003ca href=\"https://gist.github.com/ptarjan/e38f45f2dfe601419ca3af937fff574d\"\u003ehttps://gist.github.com/ptarjan/e38f45f2dfe601419ca3af937fff574d\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eUsing load shedding to survive a success disaster—CRE life lessons - \u003ca href=\"https://cloud.google.com/blog/products/gcp/using-load-shedding-to-survive-a-success-disaster-cre-life-lessons\"\u003ehttps://cloud.google.com/blog/products/gcp/using-load-shedding-to-survive-a-success-disaster-cre-life-lessons\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTop 7 Ways to 10x Your API Performance - \u003ca href=\"https://www.youtube.com/watch?v=zvWKqUiovAM\"\u003ehttps://www.youtube.com/watch?v=zvWKqUiovAM\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMonitor behind a firewall w/ Private Data source Connect on Grafana Cloud (Grafana Office Hours #04) - \u003ca href=\"https://www.youtube.com/watch?v=9oPe1IICE80\"\u003ehttps://www.youtube.com/watch?v=9oPe1IICE80\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ePath to Event-Driven Architecture. Start capturing INTENT! - \u003ca href=\"https://www.youtube.com/watch?v=sPjj8tVKy6M\"\u003ehttps://www.youtube.com/watch?v=sPjj8tVKy6M\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eA Simpler Way to See Results - \u003ca href=\"https://www.youtube.com/watch?v=s5S2Ed5T-dc\"\u003ehttps://www.youtube.com/watch?v=s5S2Ed5T-dc\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e10 Postgres tips for beginners - \u003ca href=\"https://postgres.ai/blog/20230722-10-postgres-tips-for-beginners\"\u003ehttps://postgres.ai/blog/20230722-10-postgres-tips-for-beginners\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e10 Postgres tips for beginners - \u003ca href=\"https://postgres.ai/blog/20230722-10-postgres-tips-for-beginners\"\u003ehttps://postgres.ai/blog/20230722-10-postgres-tips-for-beginners\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow Large language Models Work - \u003ca href=\"https://www.youtube.com/watch?v=5sLYAQS9sWQ\"\u003ehttps://www.youtube.com/watch?v=5sLYAQS9sWQ\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eKubernetes Node Selector vs Node Affinity vs Pod Affinity vs Tains \u0026amp; Tolerations - \u003ca href=\"https://www.youtube.com/watch?v=rX4v_L0k4Hc\"\u003ehttps://www.youtube.com/watch?v=rX4v_L0k4Hc\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ewhy does polymorphism suck? - \u003ca href=\"https://www.youtube.com/watch?v=aq365yzrTVE\"\u003ehttps://www.youtube.com/watch?v=aq365yzrTVE\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow to read inference rules - \u003ca href=\"https://cohost.org/prophet/post/2248211-how-to-read-inferenc\"\u003ehttps://cohost.org/prophet/post/2248211-how-to-read-inferenc\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eLearning about distributed systems: where to start? - muratbuffalo.blogspot.com/2020/06/learning-about-distributed-systems.html\u003c/li\u003e\n\u003cli\u003eThe Enemy Within: Running Untrusted Code with gVisor - Ian Lewis, Google - \u003ca href=\"https://www.youtube.com/watch?v=1Ib-rfSzDuM\"\u003ehttps://www.youtube.com/watch?v=1Ib-rfSzDuM\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eI often hear people ask why Kubernetes and Firecracker (FC) can’t just be used together. It seems like an intuitive combination, Kubernetes is popular for orchestration, and Firecracker provides strong isolation boundaries. So why aren’t they compatible yet? Read on 🧵 - \u003ca href=\"https://threadreaderapp.com/thread/1238496944684597248.html\"\u003ehttps://threadreaderapp.com/thread/1238496944684597248.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eKata containers limitations - \u003ca href=\"https://github.com/kata-containers/kata-containers/blob/main/docs/Limitations.md\"\u003ehttps://github.com/kata-containers/kata-containers/blob/main/docs/Limitations.md\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eKata Containers, gVisor offer more secure container strategies - \u003ca href=\"https://www.techtarget.com/searchitoperations/tip/Kata-Containers-gVisor-offer-more-secure-container-strategies\"\u003ehttps://www.techtarget.com/searchitoperations/tip/Kata-Containers-gVisor-offer-more-secure-container-strategies\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow to deploy Kubernetes with Firecracker? - \u003ca href=\"https://www.padok.fr/en/blog/deploy-kubernetes-firecracker\"\u003ehttps://www.padok.fr/en/blog/deploy-kubernetes-firecracker\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSecure Compute Part 2: gVisor Runtime on EKS - \u003ca href=\"https://www.verygoodsecurity.com/blog/posts/secure-compute-part-2\"\u003ehttps://www.verygoodsecurity.com/blog/posts/secure-compute-part-2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eFirecracker Executor for Apache Mesos - \u003ca href=\"https://www.aventer.biz/en/products/mesos-firecracker/\"\u003ehttps://www.aventer.biz/en/products/mesos-firecracker/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDynamoDB Users Need To Know About This Update - \u003ca href=\"https://www.youtube.com/watch?v=vizbUmohKKg\"\u003ehttps://www.youtube.com/watch?v=vizbUmohKKg\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ex64 Virtual Address Translation - \u003ca href=\"https://www.youtube.com/watch?v=W3o5jYHMh8s\"\u003ehttps://www.youtube.com/watch?v=W3o5jYHMh8s\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ePodman vs. Docker - \u003ca href=\"https://www.youtube.com/watch?v=Xx588nbshlM\"\u003ehttps://www.youtube.com/watch?v=Xx588nbshlM\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSo, you want to deploy on the edge? - \u003ca href=\"https://zknill.io/posts/edge-database/\"\u003ehttps://zknill.io/posts/edge-database/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTurbo docs: Concepts - \u003ca href=\"https://docs.turso.tech/concepts\"\u003ehttps://docs.turso.tech/concepts\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhat is a warrant canary? - \u003ca href=\"https://www.cloudflare.com/learning/privacy/what-is-warrant-canary/\"\u003ehttps://www.cloudflare.com/learning/privacy/what-is-warrant-canary/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhat is select skip locked for in postgresql 9.5 - \u003ca href=\"https://www.2ndquadrant.com/en/blog/what-is-select-skip-locked-for-in-postgresql-9-5/\"\u003ehttps://www.2ndquadrant.com/en/blog/what-is-select-skip-locked-for-in-postgresql-9-5/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSANDBOXING CONTAINERS RUN UNTRUSTED CODE IN A CONTAINER - \u003ca href=\"https://www.scip.ch/en/?labs.20211118\"\u003ehttps://www.scip.ch/en/?labs.20211118\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHigh-throughput stream processing in Rust - \u003ca href=\"https://noz.ai/hash-pipeline/\"\u003ehttps://noz.ai/hash-pipeline/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eBLAKE3 Is an Extremely Fast, Parallel Cryptographic Hash - \u003ca href=\"https://www.infoq.com/news/2020/01/blake3-fast-crypto-hash/\"\u003ehttps://www.infoq.com/news/2020/01/blake3-fast-crypto-hash/\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"august\"\u003eAugust\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eAplicação do Open Closed Principle: Exemplo prático com metaprogramação mais polimorfismo - \u003ca href=\"https://www.youtube.com/watch?v=-gOR0WXZmYg\"\u003ehttps://www.youtube.com/watch?v=-gOR0WXZmYg\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eFirecracker: Lightweight Virtualization for Serverless Applications - \u003ca href=\"https://www.usenix.org/system/files/nsdi20-paper-agache.pdf\"\u003ehttps://www.usenix.org/system/files/nsdi20-paper-agache.pdf\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSEC02-BP02 Use temporary credentials - \u003ca href=\"https://docs.aws.amazon.com/wellarchitected/latest/framework/sec_identities_unique.html\"\u003ehttps://docs.aws.amazon.com/wellarchitected/latest/framework/sec_identities_unique.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e5 Tips for Building Resilient Architecture - \u003ca href=\"https://www.youtube.com/watch?v=gm6Y4vPlOLg\"\u003ehttps://www.youtube.com/watch?v=gm6Y4vPlOLg\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eContainers at the edge: it’s not what you think, or maybe it is - \u003ca href=\"https://blog.cloudflare.com/containers-on-the-edge/\"\u003ehttps://blog.cloudflare.com/containers-on-the-edge/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhat is a Point of Presence (PoP) in networking? - \u003ca href=\"https://rahi.io/articles/what-is-a-point-of-presence-pop-in-networking/\"\u003ehttps://rahi.io/articles/what-is-a-point-of-presence-pop-in-networking/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eA Programmer-Friendly I/O Abstraction Over io_uring and kqueue - \u003ca href=\"https://tigerbeetle.com/blog/a-friendly-abstraction-over-iouring-and-kqueue/\"\u003ehttps://tigerbeetle.com/blog/a-friendly-abstraction-over-iouring-and-kqueue/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eIntrusive linked lists - \u003ca href=\"https://www.data-structures-in-practice.com/intrusive-linked-lists/\"\u003ehttps://www.data-structures-in-practice.com/intrusive-linked-lists/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eCase Study: TigerBeetle Simulator (VOPR) - \u003ca href=\"https://github.com/LAC-Tech/laterbase/blob/master/deterministic_simulation_testing.md\"\u003ehttps://github.com/LAC-Tech/laterbase/blob/master/deterministic_simulation_testing.md\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDependency Injection, The Best Pattern - \u003ca href=\"https://www.youtube.com/watch?v=J1f5b4vcxCQ\"\u003ehttps://www.youtube.com/watch?v=J1f5b4vcxCQ\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow to Add AI to Your Apps Faster with Embedded AI - \u003ca href=\"https://www.youtube.com/watch?v=OThahaOga20\"\u003ehttps://www.youtube.com/watch?v=OThahaOga20\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhy Google and Meta Put Billion Lines of Code In 1 Repository? - \u003ca href=\"https://www.youtube.com/watch?v=x3cANGNPyx0\"\u003ehttps://www.youtube.com/watch?v=x3cANGNPyx0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eCybersecurity Architecture: Response - \u003ca href=\"https://www.youtube.com/watch?v=Jk79QJCxPkM\"\u003ehttps://www.youtube.com/watch?v=Jk79QJCxPkM\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhat happens before the Backend gets the Request - \u003ca href=\"https://www.youtube.com/watch?v=gSQoA4SYhJY\"\u003ehttps://www.youtube.com/watch?v=gSQoA4SYhJY\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTorturing Postgres: extreme autonomous testing for distributed architectures - \u003ca href=\"https://medium.com/@thinkx_/torturing-postgres-extreme-autonomous-testing-for-distributed-architectures-e1c4139ed72e\"\u003ehttps://medium.com/@thinkx_/torturing-postgres-extreme-autonomous-testing-for-distributed-architectures-e1c4139ed72e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eFoundationDB or: How I Learned to Stop Worrying and Trust the Database (Markus Pilman, Snowflake) - \u003ca href=\"https://www.youtube.com/watch?v=OJb8A6h9jQQ\"\u003ehttps://www.youtube.com/watch?v=OJb8A6h9jQQ\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAutonomous Testing and the Future of Software Development - Will Wilson - \u003ca href=\"https://www.youtube.com/watch?v=fFSPwJFXVlw\"\u003ehttps://www.youtube.com/watch?v=fFSPwJFXVlw\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow does the Kernel manage backend Connections? - \u003ca href=\"https://www.youtube.com/watch?v=Mc7hAjgFBvY\"\u003ehttps://www.youtube.com/watch?v=Mc7hAjgFBvY\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eLet’s implement a basic leader election algorithm using Go with RPC - \u003ca href=\"https://itnext.io/lets-implement-a-basic-leader-election-algorithm-using-go-with-rpc-6cd012515358\"\u003ehttps://itnext.io/lets-implement-a-basic-leader-election-algorithm-using-go-with-rpc-6cd012515358\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ePattern: 3rd Party Registration - \u003ca href=\"https://microservices.io/patterns/3rd-party-registration.html\"\u003ehttps://microservices.io/patterns/3rd-party-registration.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eLet\u0026rsquo;s implement basic service discovery using Go - \u003ca href=\"https://itnext.io/lets-implement-basic-service-discovery-using-go-d91c513883f6\"\u003ehttps://itnext.io/lets-implement-basic-service-discovery-using-go-d91c513883f6\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMost Common Kubernetes Deployment Strategies (Examples \u0026amp; Code) - \u003ca href=\"https://www.youtube.com/watch?v=lxc4EXZOOvE\"\u003ehttps://www.youtube.com/watch?v=lxc4EXZOOvE\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAs HashiCorp adopts the BSL, an era of open-source software might be ending - \u003ca href=\"https://www.runtime.news/as-hashicorp-adopts-the-bsl-an-era-of-open-source-software-might-be-ending/\"\u003ehttps://www.runtime.news/as-hashicorp-adopts-the-bsl-an-era-of-open-source-software-might-be-ending/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eConfigure Grafana private data source connect - \u003ca href=\"https://grafana.com/docs/grafana-cloud/connect-externally-hosted/configure-private-datasource-connect/\"\u003ehttps://grafana.com/docs/grafana-cloud/connect-externally-hosted/configure-private-datasource-connect/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eCircuit-level gateway - \u003ca href=\"https://en.wikipedia.org/wiki/Circuit-level_gateway\"\u003ehttps://en.wikipedia.org/wiki/Circuit-level_gateway\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDynamic Reverse Tunnels in SSH - \u003ca href=\"https://blog.benpri.me/blog/2019/05/25/dynamic-reverse-tunnels-in-ssh/\"\u003ehttps://blog.benpri.me/blog/2019/05/25/dynamic-reverse-tunnels-in-ssh/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSOCKS5 Proxies Explained - \u003ca href=\"https://www.youtube.com/watch?v=EfOjTkFR1iw\"\u003ehttps://www.youtube.com/watch?v=EfOjTkFR1iw\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eGit MERGE vs REBASE: Everything You Need to Know - \u003ca href=\"https://www.youtube.com/watch?v=0chZFIZLR_0\"\u003ehttps://www.youtube.com/watch?v=0chZFIZLR_0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDatabase Replication Explained (in 5 Minutes) - \u003ca href=\"https://www.youtube.com/watch?v=bI8Ry6GhMSE\"\u003ehttps://www.youtube.com/watch?v=bI8Ry6GhMSE\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDatabase Replication Explained - \u003ca href=\"https://towardsdatascience.com/database-replication-explained-5c76a200d8f3\"\u003ehttps://towardsdatascience.com/database-replication-explained-5c76a200d8f3\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eFundamentals of Neural Networks - \u003ca href=\"https://wandb.ai/site/articles/fundamentals-of-neural-networks\"\u003ehttps://wandb.ai/site/articles/fundamentals-of-neural-networks\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eGradient Descent: All You Need to Know - \u003ca href=\"https://hackernoon.com/gradient-descent-aynk-7cbe95a778da\"\u003ehttps://hackernoon.com/gradient-descent-aynk-7cbe95a778da\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eApriori — Association Rule Mining In-depth Explanation and Python Implementation - \u003ca href=\"https://towardsdatascience.com/apriori-association-rule-mining-explanation-and-python-implementation-290b42afdfc6\"\u003ehttps://towardsdatascience.com/apriori-association-rule-mining-explanation-and-python-implementation-290b42afdfc6\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eis it wrong to use numbers in your code? (low level code review) - \u003ca href=\"https://www.youtube.com/watch?v=cjarxeW9_Wo\"\u003ehttps://www.youtube.com/watch?v=cjarxeW9_Wo\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eStoring money in MySQL (the right way) - \u003ca href=\"https://www.youtube.com/watch?v=fhwEFZ34c7g\"\u003ehttps://www.youtube.com/watch?v=fhwEFZ34c7g\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSOCKS - \u003ca href=\"https://en.wikipedia.org/wiki/SOCKS\"\u003ehttps://en.wikipedia.org/wiki/SOCKS\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSOCKS 5 — A Proxy Protocol - \u003ca href=\"https://medium.com/@nimit95/socks-5-a-proxy-protocol-b741d3bec66c\"\u003ehttps://medium.com/@nimit95/socks-5-a-proxy-protocol-b741d3bec66c\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eBackward Compatibility, Go 1.21, and Go 2 - \u003ca href=\"https://go.dev/blog/compat\"\u003ehttps://go.dev/blog/compat\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eContainers at the Edge - \u003ca href=\"https://www.youtube.com/watch?v=LBx56Q10G3Q\"\u003ehttps://www.youtube.com/watch?v=LBx56Q10G3Q\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow a startup loses its spark - \u003ca href=\"https://blog.johnqian.com/startup-spark\"\u003ehttps://blog.johnqian.com/startup-spark\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe Bitter Lesson - \u003ca href=\"https://www.incompleteideas.net/IncIdeas/BitterLesson.html\"\u003ewww.incompleteideas.net/IncIdeas/BitterLesson.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eKubernetes and Platform Engineering Part 1: k8s Operators - \u003ca href=\"https://www.youtube.com/watch?v=1i9C-QWQUE8\"\u003ehttps://www.youtube.com/watch?v=1i9C-QWQUE8\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e294 - Concorrência na CLEAN ARCHITECTURE | theWiseDev NFR - \u003ca href=\"https://www.youtube.com/watch?v=QEJUAInPKjw\"\u003ehttps://www.youtube.com/watch?v=QEJUAInPKjw\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eYour CPU May be FASTER than You Think - \u003ca href=\"https://www.youtube.com/watch?v=WgTr79htuM4\"\u003ehttps://www.youtube.com/watch?v=WgTr79htuM4\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eA Real World Project Use Case Of Golang\u0026rsquo;s Sync.WaitGroup - \u003ca href=\"https://www.youtube.com/watch?v=96scGqEV0pc\"\u003ehttps://www.youtube.com/watch?v=96scGqEV0pc\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhy we use the Linux kernel\u0026rsquo;s TCP stack - \u003ca href=\"https://blog.cloudflare.com/why-we-use-the-linux-kernels-tcp-stack/\"\u003ehttps://blog.cloudflare.com/why-we-use-the-linux-kernels-tcp-stack/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eCloud Computing without Containers - \u003ca href=\"https://blog.cloudflare.com/cloud-computing-without-containers/\"\u003ehttps://blog.cloudflare.com/cloud-computing-without-containers/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eCareer advice for young system programmers - \u003ca href=\"https://glaubercosta-11125.medium.com/career-advice-for-young-system-programmers-c7443f2d3edf\"\u003ehttps://glaubercosta-11125.medium.com/career-advice-for-young-system-programmers-c7443f2d3edf\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDistributed Transactions at Scale in Amazon DynamoDB - \u003ca href=\"https://muratbuffalo.blogspot.com/2023/08/distributed-transactions-at-scale-in.html\"\u003ehttps://muratbuffalo.blogspot.com/2023/08/distributed-transactions-at-scale-in.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDynamoDB\u0026rsquo;s Best Feature: Predictability - \u003ca href=\"https://brooker.co.za/blog/2022/01/19/predictability.html\"\u003ehttps://brooker.co.za/blog/2022/01/19/predictability.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhy do we use the Linux kernel\u0026rsquo;s TCP stack? - jvns.ca/blog/2016/06/30/why-do-we-use-the-linux-kernels-tcp-stack/\u003c/li\u003e\n\u003cli\u003eTop 6 Load Balancing Algorithms Every Developer Should Know - \u003ca href=\"https://www.youtube.com/watch?v=dBmxNsS3BGE\"\u003ehttps://www.youtube.com/watch?v=dBmxNsS3BGE\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eUnderstanding Transaction Isolation in DynamoDB: From Concepts to Conflicts - \u003ca href=\"https://blog.calvinsd.in/understanding-transaction-isolation-in-dynamodb\"\u003ehttps://blog.calvinsd.in/understanding-transaction-isolation-in-dynamodb\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTimestamp-based Algorithms for Concurrency Control in Distributed Database Systems - \u003ca href=\"https://muratbuffalo.blogspot.com/2022/11/timestamp-based-algorithms-for.html\"\u003ehttps://muratbuffalo.blogspot.com/2022/11/timestamp-based-algorithms-for.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eFantastic Learning Resources - \u003ca href=\"https://matklad.github.io/2023/08/06/fantastic-learning-resources.html\"\u003ehttps://matklad.github.io/2023/08/06/fantastic-learning-resources.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eCONSENSUS: BRIDGING THEORY AND PRACTICE - \u003ca href=\"https://web.stanford.edu/~ouster/cgi-bin/papers/OngaroPhD.pdf\"\u003ehttps://web.stanford.edu/~ouster/cgi-bin/papers/OngaroPhD.pdf\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eViewstamped Replication Made Famous - Joran Greef - \u003ca href=\"https://www.youtube.com/watch?v=qeWyc8G-lq4\"\u003ehttps://www.youtube.com/watch?v=qeWyc8G-lq4\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eRevisiting Viewstamped Replication with Brian Oki and James Cowling - \u003ca href=\"https://www.youtube.com/watch?v=ps106zjmjhw\"\u003ehttps://www.youtube.com/watch?v=ps106zjmjhw\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow To Identify File Types - File Format Analysis Tools - \u003ca href=\"https://www.youtube.com/watch?v=xwpNYpFRLf0\"\u003ehttps://www.youtube.com/watch?v=xwpNYpFRLf0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eKubernetes Canary Deployment (Manual vs Automated) - \u003ca href=\"https://www.youtube.com/watch?v=fWe6k4MmeSg\"\u003ehttps://www.youtube.com/watch?v=fWe6k4MmeSg\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhat is gained and lost with 63-bit integers? - \u003ca href=\"https://blog.janestreet.com/what-is-gained-and-lost-with-63-bit-integers/\"\u003ehttps://blog.janestreet.com/what-is-gained-and-lost-with-63-bit-integers/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhat Rust Discovered - \u003ca href=\"https://www.youtube.com/watch?v=v6RxJsk8otY\"\u003ehttps://www.youtube.com/watch?v=v6RxJsk8otY\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eStarting my own hobby language (again) - \u003ca href=\"https://www.youtube.com/watch?v=2bvltIjqrRg\"\u003ehttps://www.youtube.com/watch?v=2bvltIjqrRg\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe Dark Side of .reserve() - \u003ca href=\"https://www.youtube.com/watch?v=algDLvbl1YY\"\u003ehttps://www.youtube.com/watch?v=algDLvbl1YY\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eStop using COUNT(id) to count rows - \u003ca href=\"https://www.youtube.com/watch?v=H6juZ8c_Nu8\"\u003ehttps://www.youtube.com/watch?v=H6juZ8c_Nu8\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTooling for Tooling - \u003ca href=\"https://uptointerpretation.com/posts/tooling-for-tooling/\"\u003ehttps://uptointerpretation.com/posts/tooling-for-tooling/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSolutions Architect Interview - How Do CDNs Work? (with Salesforce SA) - \u003ca href=\"https://www.youtube.com/watch?v=j9KT9geE5SU\"\u003ehttps://www.youtube.com/watch?v=j9KT9geE5SU\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eYour CPU May be FASTER than You Think - \u003ca href=\"https://www.youtube.com/watch?v=WgTr79htuM4\"\u003ehttps://www.youtube.com/watch?v=WgTr79htuM4\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eKubernetes and Platform Engineering Part 2: Cluster API - \u003ca href=\"https://www.youtube.com/watch?v=K1fGoWCoeSs\"\u003ehttps://www.youtube.com/watch?v=K1fGoWCoeSs\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eData Consistency Between Microservices - \u003ca href=\"https://www.youtube.com/watch?v=uKURpE12Mgo\"\u003ehttps://www.youtube.com/watch?v=uKURpE12Mgo\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eViewstamped Replication explained - \u003ca href=\"https://blog.brunobonacci.com/2018/07/15/viewstamped-replication-explained/\"\u003ehttps://blog.brunobonacci.com/2018/07/15/viewstamped-replication-explained/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eA Proxy Protocol - \u003ca href=\"https://medium.com/@nimit95/socks-5-a-proxy-protocol-b741d3bec66c\"\u003ehttps://medium.com/@nimit95/socks-5-a-proxy-protocol-b741d3bec66c\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSo Long, Twitter and Reddit - \u003ca href=\"https://andrewkelley.me/post/goodbye-twitter-reddit.html\"\u003ehttps://andrewkelley.me/post/goodbye-twitter-reddit.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eGetting into formal specification, and getting my team into it too - \u003ca href=\"https://brooker.co.za/blog/2022/07/29/getting-into-tla.html\"\u003ehttps://brooker.co.za/blog/2022/07/29/getting-into-tla.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSimple Simulations for System Builders - \u003ca href=\"https://brooker.co.za/blog/2022/04/11/simulation.html\"\u003ehttps://brooker.co.za/blog/2022/04/11/simulation.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eStateful Property Testing in Rust - \u003ca href=\"https://blog.readyset.io/stateful-property-testing-in-rust\"\u003ehttps://blog.readyset.io/stateful-property-testing-in-rust\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eExactly-Once Semantics Are Possible: Here’s How Kafka Does It - \u003ca href=\"https://www.confluent.io/blog/exactly-once-semantics-are-possible-heres-how-apache-kafka-does-it/\"\u003ehttps://www.confluent.io/blog/exactly-once-semantics-are-possible-heres-how-apache-kafka-does-it/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eViewstamped Replication: The Less-Famous Consensus Protocol - \u003ca href=\"https://brooker.co.za/blog/2014/05/19/vr.html\"\u003ehttps://brooker.co.za/blog/2014/05/19/vr.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eEverything You Always Wanted To Know About fsync() - \u003ca href=\"https://blog.httrack.com/blog/2013/11/15/everything-you-always-wanted-to-know-about-fsync/\"\u003ehttps://blog.httrack.com/blog/2013/11/15/everything-you-always-wanted-to-know-about-fsync/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhy we built Restate - \u003ca href=\"https://www.restate.dev/blog/why-we-built-restate/\"\u003ehttps://www.restate.dev/blog/why-we-built-restate/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eEC2 Enhanced Networking Tutorial - \u003ca href=\"https://www.youtube.com/watch?v=DsNEtIS_q_E\"\u003ehttps://www.youtube.com/watch?v=DsNEtIS_q_E\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTop 5 Most Used Architecture Patterns - \u003ca href=\"https://www.youtube.com/watch?v=f6zXyq4VPP8\"\u003ehttps://www.youtube.com/watch?v=f6zXyq4VPP8\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWant to build a good API? Here\u0026rsquo;s 5 Tips for API Design. - \u003ca href=\"https://www.youtube.com/watch?v=HBH6qnj0trU\"\u003ehttps://www.youtube.com/watch?v=HBH6qnj0trU\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e5 Strong Opinions On Everyday Rust - \u003ca href=\"https://www.youtube.com/watch?v=8j_FbjiowvE\"\u003ehttps://www.youtube.com/watch?v=8j_FbjiowvE\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDurable Objects: Easy, Fast, Correct — Choose three - \u003ca href=\"https://blog.cloudflare.com/durable-objects-easy-fast-correct-choose-three/\"\u003ehttps://blog.cloudflare.com/durable-objects-easy-fast-correct-choose-three/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eServerless Workflows with Durable Functions and Netherite - \u003ca href=\"https://arxiv.org/pdf/2103.00033.pdf\"\u003ehttps://arxiv.org/pdf/2103.00033.pdf\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u0026ldquo;Formal Modeling and Analysis of Distributed Systems\u0026rdquo; by Ankush Desai (Strange Loop 2022) - \u003ca href=\"https://www.youtube.com/watch?v=5YjsSDDWFDY\"\u003ehttps://www.youtube.com/watch?v=5YjsSDDWFDY\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe Time Traveler\u0026rsquo;s Guide to Distributed Applications - \u003ca href=\"https://qianli.dev/blog/timetravel\"\u003ehttps://qianli.dev/blog/timetravel\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eKubernetes and Platform Engineering Part 3: Crossplane - \u003ca href=\"https://www.youtube.com/watch?v=CPjAiYSoBRE\"\u003ehttps://www.youtube.com/watch?v=CPjAiYSoBRE\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eEmulation Fundamentals - Writing A Basic x86 Emulator - \u003ca href=\"https://www.youtube.com/watch?v=HPrqOIdNlrQ\"\u003ehttps://www.youtube.com/watch?v=HPrqOIdNlrQ\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"september\"\u003eSeptember\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eFarewell EC2-Classic, it’s been swell - \u003ca href=\"https://www.allthingsdistributed.com/2023/09/farewell-ec2-classic.html\"\u003ehttps://www.allthingsdistributed.com/2023/09/farewell-ec2-classic.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eBuilding a Firecracker-Powered Course Platform To Learn Docker and Kubernetes - \u003ca href=\"https://iximiuz.com/en/posts/iximiuz-labs-story/\"\u003ehttps://iximiuz.com/en/posts/iximiuz-labs-story/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe Power Of Struct Embedding And Interfaces In Golang - \u003ca href=\"https://www.youtube.com/watch?v=fXZJu_JuH0A\"\u003ehttps://www.youtube.com/watch?v=fXZJu_JuH0A\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eBeginners Should Think Differently When Writing Golang - \u003ca href=\"https://www.youtube.com/watch?v=PyDMqgOkiR8\"\u003ehttps://www.youtube.com/watch?v=PyDMqgOkiR8\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow to Get Transactions Between (Almost) Any Data Stores - \u003ca href=\"https://petereliaskraft.net/blog/epoxy\"\u003ehttps://petereliaskraft.net/blog/epoxy\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow to do Distributed Transactions the RIGHT way? Microservices - \u003ca href=\"https://www.youtube.com/watch?v=vGOEO6mO674\"\u003ehttps://www.youtube.com/watch?v=vGOEO6mO674\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u0026ldquo;Workflows, a new abstraction for distributed systems\u0026rdquo; by Dominik Tornow (Strange Loop 2022) - \u003ca href=\"https://www.youtube.com/watch?v=V_5WeVmyhzg\"\u003ehttps://www.youtube.com/watch?v=V_5WeVmyhzg\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDomain Modeling Gone Wrong - Part 2 - \u003ca href=\"https://www.youtube.com/watch?v=2Tvb1fA3PLQ\"\u003ehttps://www.youtube.com/watch?v=2Tvb1fA3PLQ\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003edbdb: etcd - \u003ca href=\"https://dbdb.io/db/etcd\"\u003ehttps://dbdb.io/db/etcd\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eShuffle Sharding: Massive and Magical Fault Isolation - \u003ca href=\"https://aws.amazon.com/blogs/architecture/shuffle-sharding-massive-and-magical-fault-isolation/\"\u003ehttps://aws.amazon.com/blogs/architecture/shuffle-sharding-massive-and-magical-fault-isolation/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSystem Design: Apache Kafka In 3 Minutes - \u003ca href=\"https://www.youtube.com/watch?v=HZklgPkboro\"\u003ehttps://www.youtube.com/watch?v=HZklgPkboro\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSerializability - \u003ca href=\"https://jepsen.io/consistency/models/serializable\"\u003ehttps://jepsen.io/consistency/models/serializable\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eStrict Serializability - \u003ca href=\"https://jepsen.io/consistency/models/strict-serializable\"\u003ehttps://jepsen.io/consistency/models/strict-serializable\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eLinearizability - \u003ca href=\"https://jepsen.io/consistency/models/linearizable\"\u003ehttps://jepsen.io/consistency/models/linearizable\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhat is Linearizability in Distributed System? - \u003ca href=\"https://hongilkwon.medium.com/what-is-linearizability-in-distributed-system-db8bca3d432d\"\u003ehttps://hongilkwon.medium.com/what-is-linearizability-in-distributed-system-db8bca3d432d\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTowards Inserting One Billion Rows in SQLite Under A Minute - \u003ca href=\"https://avi.im/blag/2021/fast-sqlite-inserts/\"\u003ehttps://avi.im/blag/2021/fast-sqlite-inserts/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eYou Cannot Have Exactly-Once Delivery - \u003ca href=\"https://bravenewgeek.com/you-cannot-have-exactly-once-delivery/\"\u003ehttps://bravenewgeek.com/you-cannot-have-exactly-once-delivery/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ePagination in MySQL - \u003ca href=\"https://www.youtube.com/watch?v=zwDIN04lIpc\"\u003ehttps://www.youtube.com/watch?v=zwDIN04lIpc\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eFree your API. Misconceptions are holding you back! - \u003ca href=\"https://www.youtube.com/watch?v=nS8XHgMvqNo\"\u003ehttps://www.youtube.com/watch?v=nS8XHgMvqNo\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eUnderstanding Consensus - \u003ca href=\"https://bravenewgeek.com/understanding-consensus/\"\u003ehttps://bravenewgeek.com/understanding-consensus/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAlgorithms You Should Know Before System Design Interviews - \u003ca href=\"https://www.youtube.com/watch?v=xbgzl2maQUU\"\u003ehttps://www.youtube.com/watch?v=xbgzl2maQUU\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDistributed consensus - \u003ca href=\"https://shachaf.net/w/consensus\"\u003ehttps://shachaf.net/w/consensus\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eare \u0026ldquo;smart pointers\u0026rdquo; actually smart? - \u003ca href=\"https://www.youtube.com/watch?v=tSIBKys2eBQ\"\u003ehttps://www.youtube.com/watch?v=tSIBKys2eBQ\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThere is plenty of room at the bottom - \u003ca href=\"https://muratbuffalo.blogspot.com/2021/08/there-is-plenty-of-room-at-bottom.html\"\u003ehttps://muratbuffalo.blogspot.com/2021/08/there-is-plenty-of-room-at-bottom.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eRaft does not Guarantee Liveness in the face of Network Faults - \u003ca href=\"https://decentralizedthoughts.github.io/2020-12-12-raft-liveness-full-omission/\"\u003ehttps://decentralizedthoughts.github.io/2020-12-12-raft-liveness-full-omission/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhat is Zig\u0026rsquo;s “Colorblind” Async/Await? - \u003ca href=\"https://kristoff.it/blog/zig-colorblind-async-await/\"\u003ehttps://kristoff.it/blog/zig-colorblind-async-await/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eA Gentle Introduction to LLVM IR - \u003ca href=\"https://mcyoung.xyz/2023/08/01/llvm-ir/\"\u003ehttps://mcyoung.xyz/2023/08/01/llvm-ir/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSingle-Decree Paxos - \u003ca href=\"https://mwhittaker.github.io/blog/single_decree_paxos/\"\u003ehttps://mwhittaker.github.io/blog/single_decree_paxos/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eI Wrote A String Type - \u003ca href=\"https://mcyoung.xyz/2023/08/09/yarns/\"\u003ehttps://mcyoung.xyz/2023/08/09/yarns/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eLittle Computer 3 - \u003ca href=\"https://en.wikipedia.org/wiki/Little_Computer_3\"\u003ehttps://en.wikipedia.org/wiki/Little_Computer_3\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eLC3 Instruction Set Architecture - \u003ca href=\"https://winniewjeng.github.io/organization%20\u0026amp;%20programming/2020/06/09/Instruction-Set-Architecture/\"\u003ehttps://winniewjeng.github.io/organization%20\u0026%20programming/2020/06/09/Instruction-Set-Architecture/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eLC3 Machine Instruction - \u003ca href=\"https://winniewjeng.github.io/organization%20\u0026amp;%20programming/2020/06/08/LC3-Machine-Instruction/\"\u003ehttps://winniewjeng.github.io/organization%20\u0026%20programming/2020/06/08/LC3-Machine-Instruction/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhat is a spinlock? //Source Dive// 002 - \u003ca href=\"https://www.youtube.com/watch?v=ZE9OODanrDA\"\u003ehttps://www.youtube.com/watch?v=ZE9OODanrDA\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSign extension - \u003ca href=\"https://en.wikipedia.org/wiki/Sign_extension\"\u003ehttps://en.wikipedia.org/wiki/Sign_extension\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eUse your database to power state machines - \u003ca href=\"https://blog.lawrencejones.dev/state-machines/\"\u003ehttps://blog.lawrencejones.dev/state-machines/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eZooKeeper: Zab vs. Paxos - \u003ca href=\"https://cwiki.apache.org/confluence/display/ZOOKEEPER/Zab\u0026#43;vs.\u0026#43;Paxos\"\u003ehttps://cwiki.apache.org/confluence/display/ZOOKEEPER/Zab+vs.+Paxos\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eUniversity of Washington: Replicated State Machines Primary-Backup - \u003ca href=\"https://courses.cs.washington.edu/courses/cse552/19au/notes/lect3.pdf\"\u003ehttps://courses.cs.washington.edu/courses/cse552/19au/notes/lect3.pdf\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ePrinceton: Replication State Machines via Primary-Backup Replication - \u003ca href=\"https://www.cs.princeton.edu/courses/archive/spring22/cos418/docs/L11-rsm-pb.pdf\"\u003ehttps://www.cs.princeton.edu/courses/archive/spring22/cos418/docs/L11-rsm-pb.pdf\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMIT 6.824: Lecture 4: Primary-Backup Replication - \u003ca href=\"https://www.youtube.com/watch?v=M_teob23ZzY\"\u003ehttps://www.youtube.com/watch?v=M_teob23ZzY\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eLarge Language Models from scratch - \u003ca href=\"https://www.youtube.com/watch?v=lnA9DMvHtfI\"\u003ehttps://www.youtube.com/watch?v=lnA9DMvHtfI\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eLarge Language Models: Part 2 - \u003ca href=\"https://www.youtube.com/watch?v=YDiSFS-yHwk\"\u003ehttps://www.youtube.com/watch?v=YDiSFS-yHwk\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSearching by location in MySQL - \u003ca href=\"https://www.youtube.com/watch?v=QgnCB8X_sN4\"\u003ehttps://www.youtube.com/watch?v=QgnCB8X_sN4\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ewhy do header files even exist? - \u003ca href=\"https://www.youtube.com/watch?v=tOQZlD-0Scc\"\u003ehttps://www.youtube.com/watch?v=tOQZlD-0Scc\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAlternative to the Outbox Pattern? Not so fast. - \u003ca href=\"https://www.youtube.com/watch?v=cuQ9zuNF1cI\"\u003ehttps://www.youtube.com/watch?v=cuQ9zuNF1cI\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eContainer Loading in AWS Lambda - \u003ca href=\"https://brooker.co.za/blog/2023/05/23/snapshot-loading.html\"\u003ehttps://brooker.co.za/blog/2023/05/23/snapshot-loading.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eJDK 21 LTS - All Features Explained! - \u003ca href=\"https://www.youtube.com/watch?v=bgxuSIhkQZg\"\u003ehttps://www.youtube.com/watch?v=bgxuSIhkQZg\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e4x shorter WebGPU access from Wasm, featuring Nelua, Zig, \u0026amp; Rust - \u003ca href=\"https://www.youtube.com/watch?v=I-tN3dS2zwA\"\u003ehttps://www.youtube.com/watch?v=I-tN3dS2zwA\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eFixing For Loops in Go 1.22 - \u003ca href=\"https://go.dev/blog/loopvar-preview\"\u003ehttps://go.dev/blog/loopvar-preview\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAnother way to check pointers at runtime in C - \u003ca href=\"https://www.youtube.com/watch?v=xCxI2GIFdZo\"\u003ehttps://www.youtube.com/watch?v=xCxI2GIFdZo\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eRabbitMQ vs. Kafka – An Architect’s Dilemma (Part 1) - \u003ca href=\"https://eranstiller.com/rabbitmq-vs-kafka-an-architects-dilemma-part-1\"\u003ehttps://eranstiller.com/rabbitmq-vs-kafka-an-architects-dilemma-part-1\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eRabbitMQ vs. Kafka – An Architect’s Dilemma (Part 2) - \u003ca href=\"https://eranstiller.com/rabbitmq-vs-kafka-an-architects-dilemma-part-2\"\u003ehttps://eranstiller.com/rabbitmq-vs-kafka-an-architects-dilemma-part-2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e295 - LOCK otimista no CASO DE USO | theWiseDev CleanArch - \u003ca href=\"https://www.youtube.com/watch?v=e6cxVjv5rN0\"\u003ehttps://www.youtube.com/watch?v=e6cxVjv5rN0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTransactions: Write skew \u0026amp; why we need serialization? - \u003ca href=\"https://distributed-computing-musings.com/2022/02/transactions-write-skew-why-we-need-serialization/\"\u003ehttps://distributed-computing-musings.com/2022/02/transactions-write-skew-why-we-need-serialization/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTransactions: Introduction to serializability techniques - \u003ca href=\"https://distributed-computing-musings.com/2022/02/transactions-introduction-to-serializability-techniques/\"\u003ehttps://distributed-computing-musings.com/2022/02/transactions-introduction-to-serializability-techniques/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTransactions: Two-phase Locking - \u003ca href=\"https://distributed-computing-musings.com/2022/02/transactions-two-phase-locking/\"\u003ehttps://distributed-computing-musings.com/2022/02/transactions-two-phase-locking/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTransactions: Serializable Snapshot Isolation - \u003ca href=\"https://distributed-computing-musings.com/2022/02/transactions-serializable-snapshot-isolation/\"\u003ehttps://distributed-computing-musings.com/2022/02/transactions-serializable-snapshot-isolation/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eBest Developer Interview Question - \u003ca href=\"https://www.youtube.com/watch?v=h1w4X3CmRH4\"\u003ehttps://www.youtube.com/watch?v=h1w4X3CmRH4\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow to create an alert rule in Grafana 10.1 - \u003ca href=\"https://www.youtube.com/watch?v=nPdzomH6bno\"\u003ehttps://www.youtube.com/watch?v=nPdzomH6bno\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eNew flame graph features for continuous profiling data in Grafana 10.1 - \u003ca href=\"https://www.youtube.com/watch?v=bezFLhbzDOM\"\u003ehttps://www.youtube.com/watch?v=bezFLhbzDOM\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow to to filter trace spans in Grafana 10.1 - \u003ca href=\"https://www.youtube.com/watch?v=VP2XV3IIc80\"\u003ehttps://www.youtube.com/watch?v=VP2XV3IIc80\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eGrafana 10.1: TraceQL query results streaming - \u003ca href=\"https://www.youtube.com/watch?v=7BRapaDM_2c\"\u003ehttps://www.youtube.com/watch?v=7BRapaDM_2c\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eUnderstand Paxos with Rust, Automerge, and TLA+ — Part 1: The Synod. - \u003ca href=\"https://medium.com/@polyglot_factotum/understand-paxos-with-rust-automerge-and-tla-part-1-the-synod-371df5f16f45\"\u003ehttps://medium.com/@polyglot_factotum/understand-paxos-with-rust-automerge-and-tla-part-1-the-synod-371df5f16f45\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eLoki Log Context Query Editor in Grafana 10 - \u003ca href=\"https://www.youtube.com/watch?v=t6SG-w_bVss\"\u003ehttps://www.youtube.com/watch?v=t6SG-w_bVss\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhat is Podman? How is it Different Than Docker? - \u003ca href=\"https://www.youtube.com/watch?v=5WML8gX2F1c\"\u003ehttps://www.youtube.com/watch?v=5WML8gX2F1c\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eRelational Databases vs Time Series Databases - \u003ca href=\"https://www.influxdata.com/blog/relational-databases-vs-time-series-databases/\"\u003ehttps://www.influxdata.com/blog/relational-databases-vs-time-series-databases/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eLinux network ring buffers - \u003ca href=\"https://medium.com/coccoc-engineering-blog/linux-network-ring-buffers-cea7ead0b8e8\"\u003ehttps://medium.com/coccoc-engineering-blog/linux-network-ring-buffers-cea7ead0b8e8\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow do databases execute expressions? - \u003ca href=\"https://notes.eatonphil.com/2023-09-21-how-do-databases-execute-expressions.html\"\u003ehttps://notes.eatonphil.com/2023-09-21-how-do-databases-execute-expressions.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eRustonomicon: Poisoning - \u003ca href=\"https://doc.rust-lang.org/nomicon/poisoning.html\"\u003ehttps://doc.rust-lang.org/nomicon/poisoning.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMake Kubernetes and Platform Engineering Easier Part 2 Monitoring and Observability - \u003ca href=\"https://www.youtube.com/watch?v=RjtT1Q7DpmQ\"\u003ehttps://www.youtube.com/watch?v=RjtT1Q7DpmQ\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMake Kubernetes and Platform Engineering Easier Part 4: Application Workflows - \u003ca href=\"https://www.youtube.com/watch?v=YPuAAS3lba8\"\u003ehttps://www.youtube.com/watch?v=YPuAAS3lba8\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eORMs can lead to FAT domain models. Slim them down! - \u003ca href=\"https://www.youtube.com/watch?v=4UZXUc9jmHc\"\u003ehttps://www.youtube.com/watch?v=4UZXUc9jmHc\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAdding Nested Loops Makes this Algorithm 120x FASTER? - \u003ca href=\"https://www.youtube.com/watch?v=QGYvbsHDPxo\"\u003ehttps://www.youtube.com/watch?v=QGYvbsHDPxo\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMark Zuckerberg: First Interview in the Metaverse | Lex Fridman Podcast #398 - \u003ca href=\"https://www.youtube.com/watch?v=MVYrJJNdrEg\"\u003ehttps://www.youtube.com/watch?v=MVYrJJNdrEg\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eFaster database indexes (straight from the docs) - \u003ca href=\"https://www.youtube.com/watch?v=5aezDBaNfcc\"\u003ehttps://www.youtube.com/watch?v=5aezDBaNfcc\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eContainerization Strategy - \u003ca href=\"https://www.youtube.com/watch?v=iLyBEEkm5e0\"\u003ehttps://www.youtube.com/watch?v=iLyBEEkm5e0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ewhy do void pointers even exist? - \u003ca href=\"https://www.youtube.com/watch?v=t7CUti_7d7c\"\u003ehttps://www.youtube.com/watch?v=t7CUti_7d7c\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe Pros and Cons of Encrypted Client Hello - \u003ca href=\"https://www.youtube.com/watch?v=1ezrBsJCVqw\"\u003ehttps://www.youtube.com/watch?v=1ezrBsJCVqw\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhy Do You Only Get Motivated After Midnight? | Night Owls - \u003ca href=\"https://www.youtube.com/watch?v=jiIhOgpOWcA\"\u003ehttps://www.youtube.com/watch?v=jiIhOgpOWcA\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhy You Should Be Ashamed Of Yourself - \u003ca href=\"https://www.youtube.com/watch?v=COHThDr1uvg\"\u003ehttps://www.youtube.com/watch?v=COHThDr1uvg\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eServer Name Indication (SNI) TLS Extension Explained - \u003ca href=\"https://www.youtube.com/watch?v=manTiXESYG0\"\u003ehttps://www.youtube.com/watch?v=manTiXESYG0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e50 years later, is Two-Phase Locking the best we can do? - concurrencyfreaks.blogspot.com/2023/09/50-years-later-is-two-phase-locking.html\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"october\"\u003eOctober\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eLULA vs CAMPOS NETO; SELIC CAI MAIS?; TRUMP FAVORITO nas ELEIÇÕES; CHINA DESPEJANDO TREASURIES - \u003ca href=\"https://www.youtube.com/watch?v=ToU30U0vHz8\"\u003ehttps://www.youtube.com/watch?v=ToU30U0vHz8\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eUse your database to power state machines - \u003ca href=\"https://blog.lawrencejones.dev/state-machines/\"\u003ehttps://blog.lawrencejones.dev/state-machines/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhat to know before debating type systems - \u003ca href=\"https://blogs.perl.org/users/ovid/2010/08/what-to-know-before-debating-type-systems.html\"\u003ehttps://blogs.perl.org/users/ovid/2010/08/what-to-know-before-debating-type-systems.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHyperdrive: making databases feel like they’re globa - \u003ca href=\"https://blog.cloudflare.com/hyperdrive-making-regional-databases-feel-distributed/\"\u003ehttps://blog.cloudflare.com/hyperdrive-making-regional-databases-feel-distributed/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ePitch Practice with Paul Buchheit and Sam Altman at Startup School SV 2016 - \u003ca href=\"https://www.youtube.com/watch?v=fcyf9z4gSeI\"\u003ehttps://www.youtube.com/watch?v=fcyf9z4gSeI\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eKevin Hale - How to Pitch Your Startup - \u003ca href=\"https://www.youtube.com/watch?v=17XZGUX_9iM\"\u003ehttps://www.youtube.com/watch?v=17XZGUX_9iM\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAvoid These Tempting Startup Ideas - \u003ca href=\"https://www.youtube.com/watch?v=GMIawSAygO4\"\u003ehttps://www.youtube.com/watch?v=GMIawSAygO4\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow Future Billionaires Get Sh*t Done - \u003ca href=\"https://www.youtube.com/watch?v=ephzgxgOjR0\"\u003ehttps://www.youtube.com/watch?v=ephzgxgOjR0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTips For Technical Startup Founders | Startup School - \u003ca href=\"https://www.youtube.com/watch?v=rP7bpYsfa6Q\"\u003ehttps://www.youtube.com/watch?v=rP7bpYsfa6Q\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow to Get Your First Customers | Startup School - \u003ca href=\"https://www.youtube.com/watch?v=hyYCn_kAngI\"\u003ehttps://www.youtube.com/watch?v=hyYCn_kAngI\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eStartup Business Models and Pricing | Startup School - \u003ca href=\"https://www.youtube.com/watch?v=oWZbWzAyHAE\"\u003ehttps://www.youtube.com/watch?v=oWZbWzAyHAE\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eShould You Start A Startup? | Startup School - \u003ca href=\"https://www.youtube.com/watch?v=BUE-icVYRFU\"\u003ehttps://www.youtube.com/watch?v=BUE-icVYRFU\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow to Build An MVP | Startup School - \u003ca href=\"https://www.youtube.com/watch?v=QRZ_l7cVzzU\"\u003ehttps://www.youtube.com/watch?v=QRZ_l7cVzzU\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe Best Way To Launch Your Startup | Startup School - \u003ca href=\"https://www.youtube.com/watch?v=u36A-YTxiOw\"\u003ehttps://www.youtube.com/watch?v=u36A-YTxiOw\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eUsing Conditional Put to Solve MongoDB Concurrency Issues - \u003ca href=\"https://dev.to/woovi/using-conditional-put-to-solve-mongodb-concurrency-issues-405a\"\u003ehttps://dev.to/woovi/using-conditional-put-to-solve-mongodb-concurrency-issues-405a\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMost Important Lifestyle Habits Of Successful Founders - \u003ca href=\"https://www.youtube.com/watch?v=0IShllkCHtY\"\u003ehttps://www.youtube.com/watch?v=0IShllkCHtY\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow to Get and Evaluate Startup Ideas | Startup School - \u003ca href=\"https://www.youtube.com/watch?v=Th8JoIan4dg\"\u003ehttps://www.youtube.com/watch?v=Th8JoIan4dg\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDesign Tinder - System Design Interview (with TikTok Senior Engineer) - \u003ca href=\"https://www.youtube.com/watch?v=iyLqwyFL0Zc\"\u003ehttps://www.youtube.com/watch?v=iyLqwyFL0Zc\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow to do distributed locking - \u003ca href=\"https://martin.kleppmann.com/2016/02/08/how-to-do-distributed-locking.html\"\u003ehttps://martin.kleppmann.com/2016/02/08/how-to-do-distributed-locking.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe Two Mindsets That Can KILL Your Startup - \u003ca href=\"https://www.youtube.com/watch?v=lJausFj_Dto\"\u003ehttps://www.youtube.com/watch?v=lJausFj_Dto\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhich Sales Strategy Is Best For Your Startup? - \u003ca href=\"https://www.youtube.com/watch?v=o1HFZ8P4rA8\"\u003ehttps://www.youtube.com/watch?v=o1HFZ8P4rA8\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow To Talk To Users | Startup School - \u003ca href=\"https://www.youtube.com/watch?v=z1iF1c8w5Lg\"\u003ehttps://www.youtube.com/watch?v=z1iF1c8w5Lg\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe rule of three/five/zero - \u003ca href=\"https://en.cppreference.com/w/cpp/language/rule_of_three\"\u003ehttps://en.cppreference.com/w/cpp/language/rule_of_three\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTurning Your Users Into Paying Customers - \u003ca href=\"https://www.youtube.com/watch?v=9pQJXR0Tcos\"\u003ehttps://www.youtube.com/watch?v=9pQJXR0Tcos\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow Startup Fundraising Works | Startup School - \u003ca href=\"https://www.youtube.com/watch?v=zBUhQPPS9AY\"\u003ehttps://www.youtube.com/watch?v=zBUhQPPS9AY\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAdvantages Of A First-Time Founder - \u003ca href=\"https://www.youtube.com/watch?v=bp_kMA-eTsE\"\u003ehttps://www.youtube.com/watch?v=bp_kMA-eTsE\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhy Are There So Many Foundation Models? - \u003ca href=\"https://www.youtube.com/watch?v=QPQy7jUpmyA\"\u003ehttps://www.youtube.com/watch?v=QPQy7jUpmyA\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eINT(11) is a lie - \u003ca href=\"https://www.youtube.com/watch?v=xYl67AvQci8\"\u003ehttps://www.youtube.com/watch?v=xYl67AvQci8\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eCo-Founder Mistakes That Kill Companies \u0026amp; How To Avoid Them - \u003ca href=\"https://www.youtube.com/watch?v=dlfjs_eEEzs\"\u003ehttps://www.youtube.com/watch?v=dlfjs_eEEzs\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eOpen Sourcing Ferrocene - \u003ca href=\"https://ferrous-systems.com/blog/ferrocene-open-source/\"\u003ehttps://ferrous-systems.com/blog/ferrocene-open-source/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eRaft is so fetch: The Raft Consensus Algorithm explained through \u0026ldquo;Mean Girls\u0026rdquo; - \u003ca href=\"https://www.cockroachlabs.com/blog/raft-is-so-fetch/\"\u003ehttps://www.cockroachlabs.com/blog/raft-is-so-fetch/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe Secrets To Setting Smarter Goals - \u003ca href=\"https://www.youtube.com/watch?v=rE2XaBGHN2I\"\u003ehttps://www.youtube.com/watch?v=rE2XaBGHN2I\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTop Ways Startups Waste Money - \u003ca href=\"https://www.youtube.com/watch?v=BtzUo6vL3Iw\"\u003ehttps://www.youtube.com/watch?v=BtzUo6vL3Iw\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhat Basic Game Theory Teaches Us About Startups - \u003ca href=\"https://www.youtube.com/watch?v=gUuQsMERjUc\"\u003ehttps://www.youtube.com/watch?v=gUuQsMERjUc\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSetting KPIs and Goals | Startup School - \u003ca href=\"https://www.youtube.com/watch?v=6DTK9yDP6p0\"\u003ehttps://www.youtube.com/watch?v=6DTK9yDP6p0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSave Your Startup During an Economic Downturn - \u003ca href=\"https://www.youtube.com/watch?v=0OVSTWozvfY\"\u003ehttps://www.youtube.com/watch?v=0OVSTWozvfY\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eApp Configuration, where does it go? Config files, env vars, external service? - \u003ca href=\"https://www.youtube.com/watch?v=mukJVR-GRcQ\"\u003ehttps://www.youtube.com/watch?v=mukJVR-GRcQ\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhere Do Great Startup Ideas Come From? – Dalton Caldwell and Michael Seibel - \u003ca href=\"https://www.youtube.com/watch?v=Jcuqq48CNj8\"\u003ehttps://www.youtube.com/watch?v=Jcuqq48CNj8\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAnnouncing Rust 1.73.0 - \u003ca href=\"https://blog.rust-lang.org/2023/10/05/Rust-1.73.0.html\"\u003ehttps://blog.rust-lang.org/2023/10/05/Rust-1.73.0.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAWS PrivateLink for Grafana Cloud - \u003ca href=\"https://www.youtube.com/watch?v=0lreDtiLtwk\"\u003ehttps://www.youtube.com/watch?v=0lreDtiLtwk\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe Advantages Of Queues On Logs - \u003ca href=\"https://jack-vanlightly.com/blog/2023/10/2/the-advantages-of-queues-on-logs\"\u003ehttps://jack-vanlightly.com/blog/2023/10/2/the-advantages-of-queues-on-logs\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDeep dive on how static files are served with HTTP (kernel, sockets, file system, memory, zero copy) - \u003ca href=\"https://www.youtube.com/watch?v=rIcahiIklSk\"\u003ehttps://www.youtube.com/watch?v=rIcahiIklSk\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWebSocket vs. Server-sent Events: A Performance Comparison - \u003ca href=\"https://www.timeplus.com/post/websocket-vs-sse\"\u003ehttps://www.timeplus.com/post/websocket-vs-sse\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDesignGuru Review - Is Grokking Advanced System Design Interview Course Worth it? - \u003ca href=\"https://javarevisited.blogspot.com/2022/07/educative-review-is-grokking-advanced-system-design-interview.html#axzz8Efgvehe5\"\u003ehttps://javarevisited.blogspot.com/2022/07/educative-review-is-grokking-advanced-system-design-interview.html#axzz8Efgvehe5\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe Design and Implementation of Userland Exec - \u003ca href=\"https://grugq.github.io/docs/ul_exec.txt\"\u003ehttps://grugq.github.io/docs/ul_exec.txt\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDemystifying Consistent Hashing: A Key to Scalable and Efficient Data Distribution - \u003ca href=\"https://theefficientdev.blog/2023/09/09/demystifying-consistent-hashing-a-key-to-scalable-and-efficient-data-distribution/\"\u003ehttps://theefficientdev.blog/2023/09/09/demystifying-consistent-hashing-a-key-to-scalable-and-efficient-data-distribution/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eStartup Experts Reveal Their Top Productivity Advice - \u003ca href=\"https://www.youtube.com/watch?v=nF_YWdz6S0Y\"\u003ehttps://www.youtube.com/watch?v=nF_YWdz6S0Y\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eCS168: The Modern Algorithmic Toolbox Lecture #1: Introduction and Consistent Hashing - \u003ca href=\"https://web.stanford.edu/class/cs168/l/l1.pdf\"\u003ehttps://web.stanford.edu/class/cs168/l/l1.pdf\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAmazon DynamoDB: A Scalable, Predictably Performant, and Fully Managed NoSQL Database Service(2022) - \u003ca href=\"https://www.usenix.org/system/files/atc22-elhemali.pdf\"\u003ehttps://www.usenix.org/system/files/atc22-elhemali.pdf\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWeb caching with consistent hashing - \u003ca href=\"https://cs.brown.edu/courses/csci2950-u/f10/papers/chash99www.pdf\"\u003ehttps://cs.brown.edu/courses/csci2950-u/f10/papers/chash99www.pdf\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThread-per-core - \u003ca href=\"https://without.boats/blog/thread-per-core/\"\u003ehttps://without.boats/blog/thread-per-core/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThread-per-core - \u003ca href=\"https://without.boats/blog/thread-per-core/\"\u003ehttps://without.boats/blog/thread-per-core/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ewhy are switch statements so HECKIN fast? - \u003ca href=\"https://www.youtube.com/watch?v=fjUG_y5ZaL4\"\u003ehttps://www.youtube.com/watch?v=fjUG_y5ZaL4\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eA shallow survey of OLAP and HTAP query engines - \u003ca href=\"https://www.scattered-thoughts.net/writing/a-shallow-survey-of-olap-and-htap-query-engines/\"\u003ehttps://www.scattered-thoughts.net/writing/a-shallow-survey-of-olap-and-htap-query-engines/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow to Get Startup Ideas - \u003ca href=\"https://www.youtube.com/watch?v=uvw-u99yj8w\"\u003ehttps://www.youtube.com/watch?v=uvw-u99yj8w\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhat Does It REALLY Mean To Do Things That Don\u0026rsquo;t Scale? – Dalton Caldwell and Michael Seibel - \u003ca href=\"https://www.youtube.com/watch?v=4RMjQal_c4U\"\u003ehttps://www.youtube.com/watch?v=4RMjQal_c4U\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe Ugly Truth About Social Network Startups - \u003ca href=\"https://www.youtube.com/watch?v=vAu-oqF5IdQ\"\u003ehttps://www.youtube.com/watch?v=vAu-oqF5IdQ\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eScyllaDB Ring Architecture - Overview - \u003ca href=\"https://opensource.docs.scylladb.com/stable/architecture/ringarchitecture/\"\u003ehttps://opensource.docs.scylladb.com/stable/architecture/ringarchitecture/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eShould You Follow Your Passion? – Dalton Caldwell and Michael Seibel - \u003ca href=\"https://www.youtube.com/watch?v=KWNNmPCF-Xs\"\u003ehttps://www.youtube.com/watch?v=KWNNmPCF-Xs\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow To Build Product As A Small Startup - Michael Seibel - \u003ca href=\"https://www.youtube.com/watch?v=kzVvjKLdAbk\"\u003ehttps://www.youtube.com/watch?v=kzVvjKLdAbk\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow to make memory read-only in your C programs. - \u003ca href=\"https://www.youtube.com/watch?v=AYSISa95oJE\"\u003ehttps://www.youtube.com/watch?v=AYSISa95oJE\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eCSE138 (Distributed Systems) L15: introduction to sharding; consistent hashing - \u003ca href=\"https://www.youtube.com/watch?v=uNQGP0yupn0\u0026amp;list=PLNPUF5QyWU8PydLG2cIJrCvnn5I_exhYx\u0026amp;index=20\"\u003ehttps://www.youtube.com/watch?v=uNQGP0yupn0\u0026list=PLNPUF5QyWU8PydLG2cIJrCvnn5I_exhYx\u0026index=20\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe Cult of Conformity in Silicon Valley - \u003ca href=\"https://www.youtube.com/watch?v=ia7IKW0yuG0\"\u003ehttps://www.youtube.com/watch?v=ia7IKW0yuG0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eStartup Experts Share Their Investor Horror Stories - \u003ca href=\"https://www.youtube.com/watch?v=ljVan7CGBiE\"\u003ehttps://www.youtube.com/watch?v=ljVan7CGBiE\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eGrafana documentary series | Preview 1 - \u003ca href=\"https://www.youtube.com/watch?v=qORB9GAqgbU\"\u003ehttps://www.youtube.com/watch?v=qORB9GAqgbU\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eStartup Experts Reveal Their Favorite Pivot Stories - \u003ca href=\"https://www.youtube.com/watch?v=DmehFuCMtvc\"\u003ehttps://www.youtube.com/watch?v=DmehFuCMtvc\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eShould You Quit Your Job At A Unicorn? - \u003ca href=\"https://www.youtube.com/watch?v=chAoH_AeGAg\"\u003ehttps://www.youtube.com/watch?v=chAoH_AeGAg\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u0026ldquo;Integration Events\u0026rdquo; is a terrible name. Call them\u0026hellip; - \u003ca href=\"https://www.youtube.com/watch?v=qf-BSAhbrWw\"\u003ehttps://www.youtube.com/watch?v=qf-BSAhbrWw\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eUsing Retrieval Augmented Generation with a Large Language Model Chatbot - \u003ca href=\"https://www.youtube.com/watch?v=XctooiH0moI\"\u003ehttps://www.youtube.com/watch?v=XctooiH0moI\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow to Get Good at Small Talk, and Even Enjoy It - \u003ca href=\"https://www.youtube.com/watch?v=IRG-YubP1rw\"\u003ehttps://www.youtube.com/watch?v=IRG-YubP1rw\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe WORST Domain Modeling Mistakes! - \u003ca href=\"https://www.youtube.com/watch?v=uIfGIlD3lnw\"\u003ehttps://www.youtube.com/watch?v=uIfGIlD3lnw\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"november\"\u003eNovember\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHow To NOT Get Screwed As A Software Engineer - \u003ca href=\"https://www.youtube.com/watch?v=fcfVjd_oV1I\"\u003ehttps://www.youtube.com/watch?v=fcfVjd_oV1I\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eFailing Startups : Maybe I should get a job - \u003ca href=\"https://www.indiehackers.com/post/failing-startups-maybe-i-should-get-a-job-653e1efd52\"\u003ehttps://www.indiehackers.com/post/failing-startups-maybe-i-should-get-a-job-653e1efd52\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eCross shard transactions at 10 million requests per second - \u003ca href=\"https://dropbox.tech/infrastructure/cross-shard-transactions-at-10-million-requests-per-second\"\u003ehttps://dropbox.tech/infrastructure/cross-shard-transactions-at-10-million-requests-per-second\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eLet\u0026rsquo;s implement a basic hotel reservation system with 2PC using pessimistic and optimistic locks in Go - \u003ca href=\"https://blog.stackademic.com/lets-implement-a-basic-hotel-reservation-system-with-2pc-using-pessimistic-and-optimistic-locks-in-581256d142e8\"\u003ehttps://blog.stackademic.com/lets-implement-a-basic-hotel-reservation-system-with-2pc-using-pessimistic-and-optimistic-locks-in-581256d142e8\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ePostgres: PREPARE TRANSACTION - \u003ca href=\"https://www.postgresql.org/docs/current/sql-prepare-transaction.html\"\u003ehttps://www.postgresql.org/docs/current/sql-prepare-transaction.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eBuilding a Streaming Platform in Go for Postgres - \u003ca href=\"https://blog.peerdb.io/building-a-streaming-platform-in-go-for-postgres\"\u003ehttps://blog.peerdb.io/building-a-streaming-platform-in-go-for-postgres\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eUsing MySQL to stop freeloaders (in only 8 minutes) - \u003ca href=\"https://www.youtube.com/watch?v=goC5BdyCvms\"\u003ehttps://www.youtube.com/watch?v=goC5BdyCvms\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eYou don\u0026rsquo;t need NoSQL (use MySQL) - \u003ca href=\"https://www.youtube.com/watch?v=QZBxgX2OWbI\"\u003ehttps://www.youtube.com/watch?v=QZBxgX2OWbI\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTowards Modern Development of Cloud Applications - \u003ca href=\"https://dl.acm.org/doi/pdf/10.1145/3593856.3595909\"\u003ehttps://dl.acm.org/doi/pdf/10.1145/3593856.3595909\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDiamond Architecture - How to build HUMONGOUS Apps FAST! - Part 5 - Less Boilerplate Please - \u003ca href=\"https://www.youtube.com/watch?v=SQengjF8gXs\"\u003ehttps://www.youtube.com/watch?v=SQengjF8gXs\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eEssence of Domain-Driven Design (DDD) - \u003ca href=\"https://www.youtube.com/watch?v=Y0txTmT3k7M\"\u003ehttps://www.youtube.com/watch?v=Y0txTmT3k7M\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eEvent-Driven Architecture lost its way - \u003ca href=\"https://www.youtube.com/watch?v=YusVrd9rHJU\"\u003ehttps://www.youtube.com/watch?v=YusVrd9rHJU\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ePaper Notes: Bitcask – A Log-Structured Hash Table for Fast Key/Value Data - \u003ca href=\"https://distributed-computing-musings.com/2023/01/paper-notes-bitcask-a-log-structured-hash-table-for-fast-key-value-data/\"\u003ehttps://distributed-computing-musings.com/2023/01/paper-notes-bitcask-a-log-structured-hash-table-for-fast-key-value-data/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWikipedia: readahead - \u003ca href=\"https://en.wikipedia.org/wiki/Readahead\"\u003ehttps://en.wikipedia.org/wiki/Readahead\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eManpage: readahead - \u003ca href=\"https://man7.org/linux/man-pages/man2/readahead.2.html\"\u003ehttps://man7.org/linux/man-pages/man2/readahead.2.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eP99 CONF 2023 | A Deterministic Walk Down TigerBeetle’s main() Street by Aleksei Kladov - \u003ca href=\"https://www.youtube.com/watch?v=AGxAnkrhDGY\"\u003ehttps://www.youtube.com/watch?v=AGxAnkrhDGY\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ewhy yelling at your code makes it better (software fuzzing explained) - \u003ca href=\"https://www.youtube.com/watch?v=diUiwAEPjcQ\"\u003ehttps://www.youtube.com/watch?v=diUiwAEPjcQ\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eComplex database indexing strategies - \u003ca href=\"https://www.youtube.com/watch?v=IcIkjfXoHV4\"\u003ehttps://www.youtube.com/watch?v=IcIkjfXoHV4\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDomain Modeling Gone Wrong - Part 1 - \u003ca href=\"https://www.youtube.com/watch?v=0EQCcALt9Cc\"\u003ehttps://www.youtube.com/watch?v=0EQCcALt9Cc\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDomain Modeling Gone Wrong - Part 2 - \u003ca href=\"https://www.youtube.com/watch?v=2Tvb1fA3PLQ\"\u003ehttps://www.youtube.com/watch?v=2Tvb1fA3PLQ\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eIf your service doesn\u0026rsquo;t own data, it\u0026rsquo;s NOT a service. - \u003ca href=\"https://www.youtube.com/watch?v=S46f1-0ciHA\"\u003ehttps://www.youtube.com/watch?v=S46f1-0ciHA\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTransactions Are Not Locks - \u003ca href=\"https://www.benburwell.com/posts/transactions-are-not-locks/\"\u003ehttps://www.benburwell.com/posts/transactions-are-not-locks/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eRust: Polonius update - \u003ca href=\"https://blog.rust-lang.org/inside-rust/2023/10/06/polonius-update.html\"\u003ehttps://blog.rust-lang.org/inside-rust/2023/10/06/polonius-update.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow to Detect Threads \u0026amp; Bypass Anti-Cheat Detection - \u003ca href=\"https://www.youtube.com/watch?v=KzD_nc5B_8w\"\u003ehttps://www.youtube.com/watch?v=KzD_nc5B_8w\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eStoring feature flags as JSON (with indexing) - \u003ca href=\"https://www.youtube.com/watch?v=cDzrY-QW4Ck\"\u003ehttps://www.youtube.com/watch?v=cDzrY-QW4Ck\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMessage Queue From Scratch In Golang With Only STD LIB - \u003ca href=\"https://www.youtube.com/watch?v=99OEUGbk3vc\"\u003ehttps://www.youtube.com/watch?v=99OEUGbk3vc\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eStore 8 feature flags in 1 integer (Bitwise operations in MySQL) - \u003ca href=\"https://www.youtube.com/watch?v=Kf8SWqljM18\"\u003ehttps://www.youtube.com/watch?v=Kf8SWqljM18\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eCriptografia na Prática - Certificados, BitTorrent, Git, Bitcoin - \u003ca href=\"https://www.youtube.com/watch?v=iAA8NrfQtHo\"\u003ehttps://www.youtube.com/watch?v=iAA8NrfQtHo\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhat Makes The Top 10% Of Founders Different? - Michael Seibel - \u003ca href=\"https://www.youtube.com/watch?v=ZtfTOuSHGg8\"\u003ehttps://www.youtube.com/watch?v=ZtfTOuSHGg8\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eLet\u0026rsquo;s Build A Distributed CAS Storage In Golang - \u003ca href=\"https://www.youtube.com/watch?v=d_pVmR_0p0E\"\u003ehttps://www.youtube.com/watch?v=d_pVmR_0p0E\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhy Checked Exceptions Failed - \u003ca href=\"https://borretti.me/article/why-checked-exceptions-failed\"\u003ehttps://borretti.me/article/why-checked-exceptions-failed\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eP2P Protocol In Golang For My Distributed CAS - \u003ca href=\"https://www.youtube.com/watch?v=TFkOzuUz6Wo\"\u003ehttps://www.youtube.com/watch?v=TFkOzuUz6Wo\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAnnouncing Rust 1.74.0 - \u003ca href=\"https://blog.rust-lang.org/2023/11/16/Rust-1.74.0.html\"\u003ehttps://blog.rust-lang.org/2023/11/16/Rust-1.74.0.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSaving a SaaS on the weekend - \u003ca href=\"https://www.youtube.com/watch?v=kkjAxSViOAA\"\u003ehttps://www.youtube.com/watch?v=kkjAxSViOAA\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eBuild a Monolith and Deploy like Microservices? Maybe with Service Weaver - \u003ca href=\"https://www.youtube.com/watch?v=Srt_8a5Nam0\"\u003ehttps://www.youtube.com/watch?v=Srt_8a5Nam0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eBuilding and operating a pretty big storage system called S3 - \u003ca href=\"https://www.allthingsdistributed.com/2023/07/building-and-operating-a-pretty-big-storage-system.html\"\u003ehttps://www.allthingsdistributed.com/2023/07/building-and-operating-a-pretty-big-storage-system.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDistributed CAS Storage In Golang - RPC Networking - \u003ca href=\"https://www.youtube.com/watch?v=_5RrYWKbyVg\"\u003ehttps://www.youtube.com/watch?v=_5RrYWKbyVg\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eUncensored Models - \u003ca href=\"https://erichartford.com/uncensored-models\"\u003ehttps://erichartford.com/uncensored-models\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eCoding TCP Transport For My P2P Distributed Storage In GO - \u003ca href=\"https://www.youtube.com/watch?v=-Ung58PHgus\"\u003ehttps://www.youtube.com/watch?v=-Ung58PHgus\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eStreaming Large Files In Golang But Distributed - \u003ca href=\"https://www.youtube.com/watch?v=3mO5MUbCzKQ\"\u003ehttps://www.youtube.com/watch?v=3mO5MUbCzKQ\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eYour database will break in 2038 (or sooner) - \u003ca href=\"https://www.youtube.com/watch?v=d6HaTHkXqcQ\"\u003ehttps://www.youtube.com/watch?v=d6HaTHkXqcQ\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eNeural Networks From Scratch in Rust - \u003ca href=\"https://www.youtube.com/watch?v=DKbz9pNXVdE\"\u003ehttps://www.youtube.com/watch?v=DKbz9pNXVdE\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eEpisode 001: Intro and (Absence of) Message Parsing - \u003ca href=\"https://www.youtube.com/watch?v=hPUL8Xo6MJw\"\u003ehttps://www.youtube.com/watch?v=hPUL8Xo6MJw\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTwo Ways To Do Dynamic Dispatch - \u003ca href=\"https://www.youtube.com/watch?v=wU8hQvU8aKM\"\u003ehttps://www.youtube.com/watch?v=wU8hQvU8aKM\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow Do You Convince Someone to Join Your Startup? - Dalton Caldwell - \u003ca href=\"https://www.youtube.com/watch?v=N8deM6B4eE4\"\u003ehttps://www.youtube.com/watch?v=N8deM6B4eE4\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe magic of content-addressable storage - \u003ca href=\"https://hal.science/hal-02559031v1/file/content-addressable-storage-preprint.pdf\"\u003ehttps://hal.science/hal-02559031v1/file/content-addressable-storage-preprint.pdf\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThere is No Now: Problems with simultaneity in distributed systems - \u003ca href=\"https://queue.acm.org/detail.cfm?id=2745385\"\u003ehttps://queue.acm.org/detail.cfm?id=2745385\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDatabase enums are weird - \u003ca href=\"https://www.youtube.com/watch?v=ej8jzMloE_4\"\u003ehttps://www.youtube.com/watch?v=ej8jzMloE_4\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ePizza Wars: The Exorcism of Papa John’s - \u003ca href=\"https://www.youtube.com/watch?v=6eAcykBJsUM\"\u003ehttps://www.youtube.com/watch?v=6eAcykBJsUM\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eKubernetes Autoscaling: HPA vs. VPA vs. Keda vs. CA vs. Karpenter vs. Fargate - \u003ca href=\"https://www.youtube.com/watch?v=hsJ2qtwoWZw\"\u003ehttps://www.youtube.com/watch?v=hsJ2qtwoWZw\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003einterrupts is threads - \u003ca href=\"https://onevariable.com/blog/interrupts-is-threads/\"\u003ehttps://onevariable.com/blog/interrupts-is-threads/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMIT 6.824: Distributed systems - Lecture 4: Primary-Backup Replication - \u003ca href=\"https://www.youtube.com/watch?app=desktop\u0026amp;v=M_teob23ZzY\u0026amp;amp%3Bfeature=youtu.be\"\u003ehttps://www.youtube.com/watch?app=desktop\u0026v=M_teob23ZzY\u0026amp%3Bfeature=youtu.be\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eZooKeper wiki: Zab vs. Paxos - \u003ca href=\"https://cwiki.apache.org/confluence/display/ZOOKEEPER/Zab\u0026#43;vs.\u0026#43;Paxos\"\u003ehttps://cwiki.apache.org/confluence/display/ZOOKEEPER/Zab+vs.+Paxos\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe Postgres replication dilemma - \u003ca href=\"https://medium.com/@hnasr/the-postgres-replication-dilemma-72bef6cc4599\"\u003ehttps://medium.com/@hnasr/the-postgres-replication-dilemma-72bef6cc4599\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eInside logical replication in PostgreSQL: How it works - \u003ca href=\"https://www.postgresql.fastware.com/blog/inside-logical-replication-in-postgresql\"\u003ehttps://www.postgresql.fastware.com/blog/inside-logical-replication-in-postgresql\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe cost and benefit of synchronous replication in PostgreSQL and YugabyteDB - \u003ca href=\"https://dev.to/yugabyte/the-cost-and-benefit-of-synchronous-replication-in-postgresql-and-yugabytedb-2ej0\"\u003ehttps://dev.to/yugabyte/the-cost-and-benefit-of-synchronous-replication-in-postgresql-and-yugabytedb-2ej0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow I became a machine learning practitioner - \u003ca href=\"https://blog.gregbrockman.com/how-i-became-a-machine-learning-practitioner\"\u003ehttps://blog.gregbrockman.com/how-i-became-a-machine-learning-practitioner\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eIt’s time to become an ML engineer - \u003ca href=\"https://blog.gregbrockman.com/its-time-to-become-an-ml-engineer\"\u003ehttps://blog.gregbrockman.com/its-time-to-become-an-ml-engineer\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMy path to OpenAI - \u003ca href=\"https://blog.gregbrockman.com/my-path-to-openai\"\u003ehttps://blog.gregbrockman.com/my-path-to-openai\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhat Is Platform Engineering - \u003ca href=\"https://www.youtube.com/watch?v=JP8-9WXBcgg\"\u003ehttps://www.youtube.com/watch?v=JP8-9WXBcgg\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTop 8 Most Popular Network Protocols Explained - \u003ca href=\"https://www.youtube.com/watch?v=P6SZLcGE4us\"\u003ehttps://www.youtube.com/watch?v=P6SZLcGE4us\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eYou don\u0026rsquo;t* need JOINs - \u003ca href=\"https://www.youtube.com/watch?v=5hsl47I3svw\"\u003ehttps://www.youtube.com/watch?v=5hsl47I3svw\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWriting Tests For My Distributed File Storage In Golang - \u003ca href=\"https://www.youtube.com/watch?v=MKwYkV9JWLw\"\u003ehttps://www.youtube.com/watch?v=MKwYkV9JWLw\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eEverything You Know About MongoDB is Wrong! - \u003ca href=\"https://www.mongodb.com/developer/products/mongodb/everything-you-know-is-wrong/\"\u003ehttps://www.mongodb.com/developer/products/mongodb/everything-you-know-is-wrong/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhy async Rust? - \u003ca href=\"https://without.boats/blog/why-async-rust/\"\u003ehttps://without.boats/blog/why-async-rust/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhat is a MESSAGE QUEUE and Where is it used? - \u003ca href=\"https://www.youtube.com/watch?v=oUJbuFMyBDk\"\u003ehttps://www.youtube.com/watch?v=oUJbuFMyBDk\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eBasic Amazon SQS architecture - \u003ca href=\"https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-basic-architecture.html\"\u003ehttps://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-basic-architecture.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe Big Little Guide to Message Queues - \u003ca href=\"https://sudhir.io/the-big-little-guide-to-message-queues\"\u003ehttps://sudhir.io/the-big-little-guide-to-message-queues\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eUsing the expand and contract pattern for schema changes - \u003ca href=\"https://www.prisma.io/dataguide/types/relational/expand-and-contract-pattern\"\u003ehttps://www.prisma.io/dataguide/types/relational/expand-and-contract-pattern\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAndrej Karpathy: [1hr Talk] Intro to Large Language Models - ctwe\u003c/li\u003e\n\u003cli\u003eTim Brady - How Much Equity Should I Give My First Employees? - \u003ca href=\"https://www.youtube.com/watch?v=B2QdN0-fAbw\"\u003ehttps://www.youtube.com/watch?v=B2QdN0-fAbw\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eImplement Raft in Rust - \u003ca href=\"https://www.pingcap.com/blog/implement-raft-in-rust/\"\u003ehttps://www.pingcap.com/blog/implement-raft-in-rust/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhat is a Multiraft? - \u003ca href=\"https://sergeiturukin.com/2017/06/09/multiraft.html\"\u003ehttps://sergeiturukin.com/2017/06/09/multiraft.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eScaling Raft - \u003ca href=\"https://www.cockroachlabs.com/blog/scaling-raft/\"\u003ehttps://www.cockroachlabs.com/blog/scaling-raft/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eElasticell: Multi-Raft - \u003ca href=\"https://elasticell.readthedocs.io/en/latest/architecture/multi-raft/\"\u003ehttps://elasticell.readthedocs.io/en/latest/architecture/multi-raft/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTiKV: Multi-raft - \u003ca href=\"https://tikv.org/deep-dive/scalability/multi-raft/\"\u003ehttps://tikv.org/deep-dive/scalability/multi-raft/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eRaft or not? The Best Solution to Data Consistency in Cloud-native Databases - \u003ca href=\"https://milvus.io/blog/raft-or-not.md\"\u003ehttps://milvus.io/blog/raft-or-not.md\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDan Lüdtke: Implementing Distributed Consensus - \u003ca href=\"https://www.usenix.org/sites/default/files/conference/protected-files/srecon19apac_slides_ludtke.pdf\"\u003ehttps://www.usenix.org/sites/default/files/conference/protected-files/srecon19apac_slides_ludtke.pdf\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDistributed consensus made simple (for real this time!) - \u003ca href=\"https://decentralizedthoughts.github.io/2021-09-30-distributed-consensus-made-simple-for-real-this-time/\"\u003ehttps://decentralizedthoughts.github.io/2021-09-30-distributed-consensus-made-simple-for-real-this-time/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMachine Learning Interview - Design Spotify Recommendations - \u003ca href=\"https://www.youtube.com/watch?v=vyZMYlGBSBM\"\u003ehttps://www.youtube.com/watch?v=vyZMYlGBSBM\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eVertical Slice Architecture Myths You Need To Know! - \u003ca href=\"https://www.youtube.com/watch?v=TfMArQnepco\"\u003ehttps://www.youtube.com/watch?v=TfMArQnepco\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDatabase Replication Explained - \u003ca href=\"https://towardsdatascience.com/database-replication-explained-5c76a200d8f3\"\u003ehttps://towardsdatascience.com/database-replication-explained-5c76a200d8f3\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ePaxos, Raft, EPaxos: How Has Distributed Consensus Technology Evolved? - \u003ca href=\"https://www.alibabacloud.com/blog/paxos-raft-epaxos-how-has-distributed-consensus-technology-evolved_597127\"\u003ehttps://www.alibabacloud.com/blog/paxos-raft-epaxos-how-has-distributed-consensus-technology-evolved_597127\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eIt’s About Time! - \u003ca href=\"https://brooker.co.za/blog/2023/11/27/about-time.html\"\u003ehttps://brooker.co.za/blog/2023/11/27/about-time.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow Git Works: Explained in 4 Minutes - \u003ca href=\"https://www.youtube.com/watch?v=e9lnsKot_SQ\"\u003ehttps://www.youtube.com/watch?v=e9lnsKot_SQ\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMany to many relationships in MySQL - \u003ca href=\"https://www.youtube.com/watch?v=csLHXmVLGbs\"\u003ehttps://www.youtube.com/watch?v=csLHXmVLGbs\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAnnouncing the new Amazon S3 Express One Zone high performance storage class - \u003ca href=\"https://aws.amazon.com/blogs/aws/new-amazon-s3-express-one-zone-high-performance-storage-class/\"\u003ehttps://aws.amazon.com/blogs/aws/new-amazon-s3-express-one-zone-high-performance-storage-class/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eS3 Express is All You Need - \u003ca href=\"https://www.warpstream.com/blog/s3-express-is-all-you-need\"\u003ehttps://www.warpstream.com/blog/s3-express-is-all-you-need\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe Golang Function Nobody Talks About - \u003ca href=\"https://www.youtube.com/watch?v=INcV8kNlDPM\"\u003ehttps://www.youtube.com/watch?v=INcV8kNlDPM\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow To Build A Tech Startup With No Technical Skills - \u003ca href=\"https://www.youtube.com/watch?v=ZpKu2wvquWg\"\u003ehttps://www.youtube.com/watch?v=ZpKu2wvquWg\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWrite throughput differences in B-tree vs LSM-tree based databases? - \u003ca href=\"https://www.reddit.com/r/databasedevelopment/comments/187cp1g/write_throughput_differences_in_btree_vs_lsmtree/\"\u003ehttps://www.reddit.com/r/databasedevelopment/comments/187cp1g/write_throughput_differences_in_btree_vs_lsmtree/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eLSM Tree: Data structure powering write heavy storage engines - \u003ca href=\"https://distributed-computing-musings.com/2022/07/lsm-tree-data-structure-powering-write-heavy-storage-engines/\"\u003ehttps://distributed-computing-musings.com/2022/07/lsm-tree-data-structure-powering-write-heavy-storage-engines/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWiredTiger: Btree vs LSM - \u003ca href=\"https://github.com/wiredtiger/wiredtiger/wiki/Btree-vs-LSM\"\u003ehttps://github.com/wiredtiger/wiredtiger/wiki/Btree-vs-LSM\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow OmniPaxos handles partial connectivity - and why other protocols can’t - \u003ca href=\"https://omnipaxos.com/blog/how-omnipaxos-handles-partial-connectivity-and-why-other-protocols-cant/\"\u003ehttps://omnipaxos.com/blog/how-omnipaxos-handles-partial-connectivity-and-why-other-protocols-cant/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eRaft does not Guarantee Liveness in the face of Network Faults - \u003ca href=\"https://decentralizedthoughts.github.io/2020-12-12-raft-liveness-full-omission/\"\u003ehttps://decentralizedthoughts.github.io/2020-12-12-raft-liveness-full-omission/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDesign an Amazon S3 or Object Storage - \u003ca href=\"https://www.youtube.com/watch?v=vTPR6fIgC-I\"\u003ehttps://www.youtube.com/watch?v=vTPR6fIgC-I\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAll Web Services API What are the benefits and drawbacks of using token bucket or leaky bucket for API rate limiting? - \u003ca href=\"https://www.linkedin.com/advice/0/what-benefits-drawbacks-using-token-bucket-leaky\"\u003ehttps://www.linkedin.com/advice/0/what-benefits-drawbacks-using-token-bucket-leaky\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"december\"\u003eDecember\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eDesign a Metrics Aggregation System | Time Series Database Design | Prometheus - \u003ca href=\"https://www.youtube.com/watch?v=SCmN2Sr7fqE\u0026amp;list=PL4kInuyvT-Aw_Bz7l33AwTHXDgD3s0nkv\u0026amp;index=3\"\u003ehttps://www.youtube.com/watch?v=SCmN2Sr7fqE\u0026list=PL4kInuyvT-Aw_Bz7l33AwTHXDgD3s0nkv\u0026index=3\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow I add millions of rows to MySQL (for performance testing) - \u003ca href=\"https://www.youtube.com/watch?v=ywp9Z0xZPzo\"\u003ehttps://www.youtube.com/watch?v=ywp9Z0xZPzo\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe Story of Grafana | Episode 1: Democratize Metrics | Grafana Documentary - \u003ca href=\"https://www.youtube.com/watch?v=k3RQVyeYdO8\"\u003ehttps://www.youtube.com/watch?v=k3RQVyeYdO8\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow to (and how not to) design REST APIs - \u003ca href=\"https://www.youtube.com/watch?v=60F8rzP5nQo\"\u003ehttps://www.youtube.com/watch?v=60F8rzP5nQo\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow I read a research paper - \u003ca href=\"https://muratbuffalo.blogspot.com/2013/07/how-i-read-research-paper.html\"\u003ehttps://muratbuffalo.blogspot.com/2013/07/how-i-read-research-paper.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhy is Jepsen Written in Clojure? - \u003ca href=\"https://aphyr.com/posts/367-why-is-jepsen-written-in-clojure\"\u003ehttps://aphyr.com/posts/367-why-is-jepsen-written-in-clojure\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eBenchmarking the fastest possible MySQL query - \u003ca href=\"https://www.youtube.com/watch?v=KZoS1fEPx5Q\"\u003ehttps://www.youtube.com/watch?v=KZoS1fEPx5Q\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eiMessage, explained - \u003ca href=\"https://jjtech.dev/reverse-engineering/imessage-explained/\"\u003ehttps://jjtech.dev/reverse-engineering/imessage-explained/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow Price’s Law Applies to Everything - \u003ca href=\"https://nielsbohrmann.com/prices-law/\"\u003ehttps://nielsbohrmann.com/prices-law/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTraces to metrics: Ad hoc RED metrics in Grafana Tempo - \u003ca href=\"https://www.youtube.com/watch?v=xOolCpm2F8c\"\u003ehttps://www.youtube.com/watch?v=xOolCpm2F8c\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eIntroduction to opam Switches - \u003ca href=\"https://ocaml.org/docs/opam-switch-introduction#introduction-to-opam-switches\"\u003ehttps://ocaml.org/docs/opam-switch-introduction#introduction-to-opam-switches\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eIntroduction to the OCaml Toplevel - \u003ca href=\"https://ocaml.org/docs/toplevel-introduction\"\u003ehttps://ocaml.org/docs/toplevel-introduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAnnouncing Rust 1.74.1 - \u003ca href=\"https://blog.rust-lang.org/2023/12/07/Rust-1.74.1.html\"\u003ehttps://blog.rust-lang.org/2023/12/07/Rust-1.74.1.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAdvice from the CEO of Shopify, Tobias Lütke - \u003ca href=\"https://www.youtube.com/watch?v=prHmUW4JIms\"\u003ehttps://www.youtube.com/watch?v=prHmUW4JIms\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eRedeveloping TCP from the ground up - \u003ca href=\"https://hannes.robur.coop/Posts/TCP-ns\"\u003ehttps://hannes.robur.coop/Posts/TCP-ns\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDesign HashSet - Leetcode 705 - \u003ca href=\"https://www.youtube.com/watch?v=6eAKScpknHQ\"\u003ehttps://www.youtube.com/watch?v=6eAKScpknHQ\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTiDB Internal (II) – Computing - \u003ca href=\"https://www.pingcap.com/blog/tidb-internal-computing/\"\u003ehttps://www.pingcap.com/blog/tidb-internal-computing/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eOcaml docs: Modules - \u003ca href=\"https://ocaml.org/docs/modules#abstract-types\"\u003ehttps://ocaml.org/docs/modules#abstract-types\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe unfair way I got good at Leetcode - \u003ca href=\"https://www.youtube.com/watch?v=GPIuPRqDGG8\"\u003ehttps://www.youtube.com/watch?v=GPIuPRqDGG8\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eReducing tail latencies with automatic cooperative task yielding - \u003ca href=\"https://tokio.rs/blog/2020-04-preemption\"\u003ehttps://tokio.rs/blog/2020-04-preemption\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow Akka Works: \u0026lsquo;Exactly Once\u0026rsquo; Message Delivery - \u003ca href=\"https://www.lightbend.com/blog/how-akka-works-exactly-once-message-delivery\"\u003ehttps://www.lightbend.com/blog/how-akka-works-exactly-once-message-delivery\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhich 🐘PostgreSQL problems are solved with 🚀YugabyteDB - \u003ca href=\"https://dev.to/yugabyte/which-postgresql-problems-are-solved-with-yugabytedb-2gm\"\u003ehttps://dev.to/yugabyte/which-postgresql-problems-are-solved-with-yugabytedb-2gm\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eLife of a HTTP request, as seen by my toy web server - \u003ca href=\"https://tia.mat.br/posts/2014/10/06/life_of_a_http_request.html\"\u003ehttps://tia.mat.br/posts/2014/10/06/life_of_a_http_request.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eOn some subtleties of Paxos - \u003ca href=\"https://www.the-paper-trail.org/post/2012-11-03-on-some-subtleties-of-paxos/\"\u003ehttps://www.the-paper-trail.org/post/2012-11-03-on-some-subtleties-of-paxos/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eConsensus Protocols: A Paxos Implementation - \u003ca href=\"https://www.the-paper-trail.org/post/2009-02-09-consensus-protocols-a-paxos-implementation/\"\u003ehttps://www.the-paper-trail.org/post/2009-02-09-consensus-protocols-a-paxos-implementation/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eConsensus, Two Phase and Three Phase Commits - \u003ca href=\"https://medium.com/@balrajasubbiah/consensus-two-phase-and-three-phase-commits-4e35c1a435ac\"\u003ehttps://medium.com/@balrajasubbiah/consensus-two-phase-and-three-phase-commits-4e35c1a435ac\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eIs Scalable OLTP in the Cloud a Solved Problem? (CIDR 2023) - \u003ca href=\"https://muratbuffalo.blogspot.com/2023/01/is-scalable-oltp-in-cloud-solved.html\"\u003ehttps://muratbuffalo.blogspot.com/2023/01/is-scalable-oltp-in-cloud-solved.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eJeff Dean: Designs, Lessons and Advice from Building Large Distributed Systems - \u003ca href=\"https://www.cs.cornell.edu/projects/ladis2009/talks/dean-keynote-ladis2009.pdf\"\u003ehttps://www.cs.cornell.edu/projects/ladis2009/talks/dean-keynote-ladis2009.pdf\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eModern hinted handoff - \u003ca href=\"https://www.datastax.com/blog/modern-hinted-handoff\"\u003ehttps://www.datastax.com/blog/modern-hinted-handoff\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAmazon Aurora Under the Hood: Quorum Reads and Mutating State - \u003ca href=\"https://aws.amazon.com/blogs/database/amazon-aurora-under-the-hood-quorum-reads-and-mutating-state/\"\u003ehttps://aws.amazon.com/blogs/database/amazon-aurora-under-the-hood-quorum-reads-and-mutating-state/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHAT, not CAP: Introducing Highly Available Transactions - \u003ca href=\"https://www.bailis.org/blog/hat-not-cap-introducing-highly-available-transactions/\"\u003ewww.bailis.org/blog/hat-not-cap-introducing-highly-available-transactions/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eBack to Basics: service boundaries, autonomous components, and coupling - \u003ca href=\"https://milestone.topics.it/2023/05/17/back-to-basics-boundaries.html\"\u003ehttps://milestone.topics.it/2023/05/17/back-to-basics-boundaries.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e😱 Status quo stories: Alan thinks he needs async locks - \u003ca href=\"https://rust-lang.github.io/wg-async/vision/submitted_stories/status_quo/alan_thinks_he_needs_async_locks.html\"\u003ehttps://rust-lang.github.io/wg-async/vision/submitted_stories/status_quo/alan_thinks_he_needs_async_locks.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eLet\u0026rsquo;s #TalkConcurrency Panel Discussion with Sir Tony Hoare, Joe Armstrong, and Carl Hewitt - \u003ca href=\"https://www.youtube.com/watch?v=37wFVVVZlVU\"\u003ehttps://www.youtube.com/watch?v=37wFVVVZlVU\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eStudents\u0026rsquo; Guide to Raft - \u003ca href=\"https://thesquareplanet.com/blog/students-guide-to-raft/\"\u003ehttps://thesquareplanet.com/blog/students-guide-to-raft/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eInstructors\u0026rsquo; Guide to Raft - \u003ca href=\"https://thesquareplanet.com/blog/instructors-guide-to-raft/\"\u003ehttps://thesquareplanet.com/blog/instructors-guide-to-raft/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow Much Equity to Give Your Cofounder - Michael Seibel - \u003ca href=\"https://www.youtube.com/watch?v=9NhEBVPlJs4\"\u003ehttps://www.youtube.com/watch?v=9NhEBVPlJs4\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAbandoning Async - rgrinberg.com/posts/abandoning-async/\u003c/li\u003e\n\u003cli\u003eGetting Started with Lwt threads - \u003ca href=\"https://mirage.io/docs/tutorial-lwt\"\u003ehttps://mirage.io/docs/tutorial-lwt\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eLwt manual - \u003ca href=\"https://ocsigen.org/lwt/latest/manual/manual\"\u003ehttps://ocsigen.org/lwt/latest/manual/manual\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTCP Server and Client in OCaml - \u003ca href=\"https://medium.com/@aryangodara_19887/tcp-server-and-client-in-ocaml-13ebefd54f60\"\u003ehttps://medium.com/@aryangodara_19887/tcp-server-and-client-in-ocaml-13ebefd54f60\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eNon-Send Futures When? - \u003ca href=\"https://matklad.github.io/2023/12/10/nsfw.html\"\u003ehttps://matklad.github.io/2023/12/10/nsfw.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe Big Problem With \u0026ldquo;Serverless\u0026rdquo; - \u003ca href=\"https://www.youtube.com/watch?v=10kVndpDKvA\"\u003ehttps://www.youtube.com/watch?v=10kVndpDKvA\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe effect of Random UUID on database performance - \u003ca href=\"https://www.youtube.com/watch?v=OAOQ7U0XAi0\"\u003ehttps://www.youtube.com/watch?v=OAOQ7U0XAi0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow does fork work with open files? - \u003ca href=\"https://www.youtube.com/watch?v=SThwp5ijh6o\"\u003ehttps://www.youtube.com/watch?v=SThwp5ijh6o\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhy Riak - \u003ca href=\"https://web.archive.org/web/20181021220147/http://docs.basho.com/riak/1.4.8/theory/why-riak/\"\u003ehttps://web.archive.org/web/20181021220147/http://docs.basho.com/riak/1.4.8/theory/why-riak/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eIntroduction - \u003ca href=\"https://pgrandinetti.github.io/compilers/page/introduction/\"\u003ehttps://pgrandinetti.github.io/compilers/page/introduction/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eCan I Get a Job After I Study Compilers? - \u003ca href=\"https://pgrandinetti.github.io/compilers/page/can-i-get-a-job-in-compilers/\"\u003ehttps://pgrandinetti.github.io/compilers/page/can-i-get-a-job-in-compilers/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhy There Are So Many Programming Languages? - \u003ca href=\"https://pgrandinetti.github.io/compilers/page/why-so-many-programming-languages/\"\u003ehttps://pgrandinetti.github.io/compilers/page/why-so-many-programming-languages/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe Story of Grafana | Episode 2: Community | Grafana Documentary - \u003ca href=\"https://www.youtube.com/watch?v=lbBQk_QPnEs\"\u003ehttps://www.youtube.com/watch?v=lbBQk_QPnEs\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eRAND is too slow (in MySQL) - \u003ca href=\"https://www.youtube.com/watch?v=wTcpZWPHl6w\"\u003ehttps://www.youtube.com/watch?v=wTcpZWPHl6w\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDesign de API\u0026rsquo;s Resilientes: Explorando Técnicas de Idempotência - \u003ca href=\"https://www.youtube.com/watch?v=bnRZTi3C_JM\"\u003ehttps://www.youtube.com/watch?v=bnRZTi3C_JM\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe Real Hidden Cost of a Request - \u003ca href=\"https://www.youtube.com/watch?v=MN2jIUonuQQ\"\u003ehttps://www.youtube.com/watch?v=MN2jIUonuQQ\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eIT in Three: What is RAID? - \u003ca href=\"https://www.youtube.com/watch?v=Aa0RTgxJJy8\"\u003ehttps://www.youtube.com/watch?v=Aa0RTgxJJy8\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow databases store data on disk? - \u003ca href=\"https://www.youtube.com/watch?v=haz2h7_xFDk\"\u003ehttps://www.youtube.com/watch?v=haz2h7_xFDk\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDivide and Conquer: The Art of Breaking Down Problems | Recursion Series - \u003ca href=\"https://www.youtube.com/watch?v=ib4BHvr5-Ao\"\u003ehttps://www.youtube.com/watch?v=ib4BHvr5-Ao\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhy create Index blocks writes - \u003ca href=\"https://www.youtube.com/watch?v=ykVumkmkbik\"\u003ehttps://www.youtube.com/watch?v=ykVumkmkbik\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow Databases Store and Retrieve Data - \u003ca href=\"https://siemens.blog/posts/how-databases-store-and-retrieve-data/\"\u003ehttps://siemens.blog/posts/how-databases-store-and-retrieve-data/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe unreasonable generality of feed-forward neural networks (a tribute) - \u003ca href=\"https://www.youtube.com/watch?v=EXbgUXt8fFU\"\u003ehttps://www.youtube.com/watch?v=EXbgUXt8fFU\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSimple introduction to monads in OCaml - \u003ca href=\"https://www.cryptologie.net/article/578/simple-introduction-to-monads-in-ocaml/\"\u003ehttps://www.cryptologie.net/article/578/simple-introduction-to-monads-in-ocaml/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eOCaml has some new shiny syntax - \u003ca href=\"https://jobjo.github.io/2019/04/24/ocaml-has-some-new-shiny-syntax.html\"\u003ehttps://jobjo.github.io/2019/04/24/ocaml-has-some-new-shiny-syntax.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eA Tutorial to OCaml -ppx Language Extensions - \u003ca href=\"https://victor.darvariu.me/jekyll/update/2018/06/19/ppx-tutorial.html\"\u003ehttps://victor.darvariu.me/jekyll/update/2018/06/19/ppx-tutorial.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eLet syntax, and why you should use it - \u003ca href=\"https://blog.janestreet.com/let-syntax-and-why-you-should-use-it/\"\u003ehttps://blog.janestreet.com/let-syntax-and-why-you-should-use-it/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMitchell reflects as he departs HashiCorp - \u003ca href=\"https://www.hashicorp.com/blog/mitchell-reflects-as-he-departs-hashicorp\"\u003ehttps://www.hashicorp.com/blog/mitchell-reflects-as-he-departs-hashicorp\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhat Are the Differences Between Programming Languages - \u003ca href=\"https://pgrandinetti.github.io/compilers/page/what-are-the-differences-in-programming-languages/\"\u003ehttps://pgrandinetti.github.io/compilers/page/what-are-the-differences-in-programming-languages/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eJeff Bezos: Amazon and Blue Origin | Lex Fridman Podcast #405 - \u003ca href=\"https://www.youtube.com/watch?v=DcWqzZ3I2cY\"\u003ehttps://www.youtube.com/watch?v=DcWqzZ3I2cY\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eLeaving Sourcegraph - \u003ca href=\"https://registerspill.thorstenball.com/p/leaving-sourcegraph\"\u003ehttps://registerspill.thorstenball.com/p/leaving-sourcegraph\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eLet\u0026rsquo;s build a distributed Postgres proof of concept - \u003ca href=\"https://notes.eatonphil.com/distributed-postgres.html\"\u003ehttps://notes.eatonphil.com/distributed-postgres.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eFoundationDB: CAP Theorem - \u003ca href=\"https://apple.github.io/foundationdb/cap-theorem.html\"\u003ehttps://apple.github.io/foundationdb/cap-theorem.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eFoundationDB: Fault Tolerance - \u003ca href=\"https://apple.github.io/foundationdb/fault-tolerance.html\"\u003ehttps://apple.github.io/foundationdb/fault-tolerance.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eKey Startup Metrics | Startup School - \u003ca href=\"https://www.youtube.com/watch?v=_mKeVGSqQac\"\u003ehttps://www.youtube.com/watch?v=_mKeVGSqQac\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDesign a Blob Storage | Facebook F4 | Warm Storage - \u003ca href=\"https://www.youtube.com/watch?v=zx9pz1IklUE\u0026amp;list=PL4kInuyvT-Aw_Bz7l33AwTHXDgD3s0nkv\u0026amp;index=13\"\u003ehttps://www.youtube.com/watch?v=zx9pz1IklUE\u0026list=PL4kInuyvT-Aw_Bz7l33AwTHXDgD3s0nkv\u0026index=13\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTwo new MySQL expressions - \u003ca href=\"https://www.youtube.com/watch?v=NZqFiBDQG1s\"\u003ehttps://www.youtube.com/watch?v=NZqFiBDQG1s\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ePartial Return Address Overwrite - Exploit Dev 10 - \u003ca href=\"https://www.youtube.com/watch?v=fqsSAqbNFfo\"\u003ehttps://www.youtube.com/watch?v=fqsSAqbNFfo\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDesign Metrics Aggregation System | LSM Tree Storage | Scaling - \u003ca href=\"https://www.youtube.com/watch?v=7qfVRn4lFXY\"\u003ehttps://www.youtube.com/watch?v=7qfVRn4lFXY\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMemory layout and mechanics of arrays and slices | Golang | intermediate level - \u003ca href=\"https://www.youtube.com/watch?v=RVTfPy_NELc\"\u003ehttps://www.youtube.com/watch?v=RVTfPy_NELc\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eA Close Look at a Spinlock - \u003ca href=\"https://blog.regehr.org/archives/2173\"\u003ehttps://blog.regehr.org/archives/2173\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDatabase Fundamentals - \u003ca href=\"https://tontinton.com/posts/database-fundementals/\"\u003ehttps://tontinton.com/posts/database-fundementals/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eLearn In Public - \u003ca href=\"https://www.swyx.io/learn-in-public\"\u003ehttps://www.swyx.io/learn-in-public\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u0026ldquo;Simple Made Easy\u0026rdquo; (12-minute redux) by Rich Hickey (2011) - \u003ca href=\"https://www.youtube.com/watch?v=F87PtAoJNtg\"\u003ehttps://www.youtube.com/watch?v=F87PtAoJNtg\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ethe hidden structure you\u0026rsquo;ve been using all along - \u003ca href=\"https://www.youtube.com/watch?v=CRTR5ljBjPM\"\u003ehttps://www.youtube.com/watch?v=CRTR5ljBjPM\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDiving into Kafka Internals with David Jacot - \u003ca href=\"https://www.youtube.com/watch?v=d89W_GzWnRw\"\u003ehttps://www.youtube.com/watch?v=d89W_GzWnRw\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eOcaml docs: Mutability, loops, and imperative programming - \u003ca href=\"https://ocaml.org/docs/mutability-loops-and-imperative\"\u003ehttps://ocaml.org/docs/mutability-loops-and-imperative\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eIntroducing Solid Queue - \u003ca href=\"https://dev.37signals.com/introducing-solid-queue/\"\u003ehttps://dev.37signals.com/introducing-solid-queue/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eEio \u0026ndash; Effects-Based Parallel IO for OCaml - \u003ca href=\"https://github.com/ocaml-multicore/eio\"\u003ehttps://github.com/ocaml-multicore/eio\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eReplication: Introducing leaderless replication - \u003ca href=\"https://distributed-computing-musings.com/2022/01/replication-introducing-leaderless-replication/\"\u003ehttps://distributed-computing-musings.com/2022/01/replication-introducing-leaderless-replication/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow to Hook Steam Overlay Tutorial - 64-bit IMGUI Hook - \u003ca href=\"https://www.youtube.com/watch?v=z7zUMieOO98\"\u003ehttps://www.youtube.com/watch?v=z7zUMieOO98\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWHAT IS HOOKING? - \u003ca href=\"https://www.youtube.com/watch?v=KY2Y7Zn3HW0\"\u003ehttps://www.youtube.com/watch?v=KY2Y7Zn3HW0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow to Be Great? Just Be Good, Repeatably - \u003ca href=\"https://blog.stephsmith.io/how-to-be-great/\"\u003ehttps://blog.stephsmith.io/how-to-be-great/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eLocking In On Concurrency Control - \u003ca href=\"https://www.youtube.com/watch?v=PyxadX8yrsI\"\u003ehttps://www.youtube.com/watch?v=PyxadX8yrsI\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow are memories stored in neural networks? | The Hopfield Network #SoME2 - \u003ca href=\"https://www.youtube.com/watch?v=piF6D6CQxUw\"\u003ehttps://www.youtube.com/watch?v=piF6D6CQxUw\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe Log: What every software engineer should know about real-time data\u0026rsquo;s unifying abstraction - \u003ca href=\"https://engineering.linkedin.com/distributed-systems/log-what-every-software-engineer-should-know-about-real-time-datas-unifying\"\u003ehttps://engineering.linkedin.com/distributed-systems/log-what-every-software-engineer-should-know-about-real-time-datas-unifying\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003emalloc sucks so i wrote my own heap in C - \u003ca href=\"https://www.youtube.com/watch?v=CulF4YQt6zA\"\u003ehttps://www.youtube.com/watch?v=CulF4YQt6zA\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eRich Hickey: Deconstructing the Database - \u003ca href=\"https://www.youtube.com/watch?v=Cym4TZwTCNU\"\u003ehttps://www.youtube.com/watch?v=Cym4TZwTCNU\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe Design of Datomic - Rich Hickey - \u003ca href=\"https://www.youtube.com/watch?v=Pz_NvY1kw6I\"\u003ehttps://www.youtube.com/watch?v=Pz_NvY1kw6I\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDoes P = NP? | Complexity Theory Explained Visually - \u003ca href=\"https://www.youtube.com/watch?v=rK3xcRYLWeg\"\u003ehttps://www.youtube.com/watch?v=rK3xcRYLWeg\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDatomic: Immutable database for new web architecture (S03E08) - \u003ca href=\"https://www.youtube.com/watch?v=VlNeWWcIQI4\"\u003ehttps://www.youtube.com/watch?v=VlNeWWcIQI4\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhat I Wish Someone Had Told Me - \u003ca href=\"https://blog.samaltman.com/what-i-wish-someone-had-told-me\"\u003ehttps://blog.samaltman.com/what-i-wish-someone-had-told-me\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe dark side of inlining and monomorphization - \u003ca href=\"https://nickb.dev/blog/the-dark-side-of-inlining-and-monomorphization/\"\u003ehttps://nickb.dev/blog/the-dark-side-of-inlining-and-monomorphization/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow do Video Game Graphics Work? - \u003ca href=\"https://www.youtube.com/watch?v=C8YtdC8mxTU\"\u003ehttps://www.youtube.com/watch?v=C8YtdC8mxTU\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow do I Set, Clear, and Toggle a Single Bit? - \u003ca href=\"https://www.youtube.com/watch?v=F9742wnBWRc\"\u003ehttps://www.youtube.com/watch?v=F9742wnBWRc\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDatomic overview - \u003ca href=\"https://docs.datomic.com/pro/overview/introduction.html\"\u003ehttps://docs.datomic.com/pro/overview/introduction.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eInternals of Interfaces in Golang | Intermediate level - \u003ca href=\"https://www.youtube.com/watch?v=x87Cs9vU4Fk\"\u003ehttps://www.youtube.com/watch?v=x87Cs9vU4Fk\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDear Functional Bros - \u003ca href=\"https://www.youtube.com/watch?v=nuML9SmdbJ4\"\u003ehttps://www.youtube.com/watch?v=nuML9SmdbJ4\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMemory Allocation - \u003ca href=\"https://samwho.dev/memory-allocation/\"\u003ehttps://samwho.dev/memory-allocation/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe secret lives of data: Raft - \u003ca href=\"https://thesecretlivesofdata.com/raft/\"\u003ehttps://thesecretlivesofdata.com/raft/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow does B-tree make your queries fast? - \u003ca href=\"https://blog.allegro.tech/2023/11/how-does-btree-make-your-queries-fast.html\"\u003ehttps://blog.allegro.tech/2023/11/how-does-btree-make-your-queries-fast.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eCursed C++ Casts - \u003ca href=\"https://www.youtube.com/watch?v=SmlLdd1Q2V8\"\u003ehttps://www.youtube.com/watch?v=SmlLdd1Q2V8\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eA simple, arena-backed, generic dynamic array for C - \u003ca href=\"https://nullprogram.com/blog/2023/10/05/\"\u003ehttps://nullprogram.com/blog/2023/10/05/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eEssential Matrix Algebra for Neural Networks, Clearly Explained - \u003ca href=\"https://www.youtube.com/watch?v=ZTt9gsGcdDo\"\u003ehttps://www.youtube.com/watch?v=ZTt9gsGcdDo\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAlex Petrov: Algorithms Behind Modern Storage Systems - \u003ca href=\"https://queue.acm.org/detail.cfm?id=3220266\"\u003ehttps://queue.acm.org/detail.cfm?id=3220266\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eLife Beyond Distributed Transactions - \u003ca href=\"https://queue.acm.org/detail.cfm?id=3025012\"\u003ehttps://queue.acm.org/detail.cfm?id=3025012\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ePerformance Engineering on Hard Mode with Andrew Hunter - \u003ca href=\"https://signals-threads.simplecast.com/episodes/performance-engineering-on-hard-mode-with-andrew-hunter-fxhCMIkB\"\u003ehttps://signals-threads.simplecast.com/episodes/performance-engineering-on-hard-mode-with-andrew-hunter-fxhCMIkB\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eKubernetes Tutorial: Container vs. Pod vs. Deployment vs. StatefulSet \u0026amp; More - \u003ca href=\"https://www.youtube.com/watch?v=4MEgCP7h8UU\"\u003ehttps://www.youtube.com/watch?v=4MEgCP7h8UU\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eKubernetes Tutorial: Container vs. Pod vs. Deployment vs. StatefulSet \u0026amp; More - \u003ca href=\"https://www.youtube.com/watch?v=4MEgCP7h8UU\"\u003ehttps://www.youtube.com/watch?v=4MEgCP7h8UU\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAnnouncing Rust 1.75.0 - \u003ca href=\"https://blog.rust-lang.org/2023/12/28/Rust-1.75.0.html\"\u003ehttps://blog.rust-lang.org/2023/12/28/Rust-1.75.0.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eA Machine Learning Primer: How to Build an ML Model - \u003ca href=\"https://www.youtube.com/watch?v=Vx2DpMgplEM\"\u003ehttps://www.youtube.com/watch?v=Vx2DpMgplEM\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe value of canonicity - \u003ca href=\"https://building.nubank.com.br/the-value-of-canonicity/\"\u003ehttps://building.nubank.com.br/the-value-of-canonicity/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAn introduction to the basic principles of Functional Programming - \u003ca href=\"https://www.iamtk.co/an-introduction-to-the-basic-principles-of-functional-programming\"\u003ehttps://www.iamtk.co/an-introduction-to-the-basic-principles-of-functional-programming\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","title":"Reading list 2023"},{"content":"The list of things I read or watched this month Design a Metrics Aggregation System | Time Series Database Design | Prometheus - https://www.youtube.com/watch?v=SCmN2Sr7fqE\u0026list=PL4kInuyvT-Aw_Bz7l33AwTHXDgD3s0nkv\u0026index=3 How I add millions of rows to MySQL (for performance testing) - https://www.youtube.com/watch?v=ywp9Z0xZPzo The Story of Grafana | Episode 1: Democratize Metrics | Grafana Documentary - https://www.youtube.com/watch?v=k3RQVyeYdO8 How to (and how not to) design REST APIs - https://www.youtube.com/watch?v=60F8rzP5nQo How I read a research paper - https://muratbuffalo.blogspot.com/2013/07/how-i-read-research-paper.html Why is Jepsen Written in Clojure? - https://aphyr.com/posts/367-why-is-jepsen-written-in-clojure Benchmarking the fastest possible MySQL query - https://www.youtube.com/watch?v=KZoS1fEPx5Q iMessage, explained - https://jjtech.dev/reverse-engineering/imessage-explained/ How Price’s Law Applies to Everything - https://nielsbohrmann.com/prices-law/ Traces to metrics: Ad hoc RED metrics in Grafana Tempo - https://www.youtube.com/watch?v=xOolCpm2F8c Introduction to opam Switches - https://ocaml.org/docs/opam-switch-introduction#introduction-to-opam-switches Introduction to the OCaml Toplevel - https://ocaml.org/docs/toplevel-introduction Announcing Rust 1.74.1 - https://blog.rust-lang.org/2023/12/07/Rust-1.74.1.html Advice from the CEO of Shopify, Tobias Lütke - https://www.youtube.com/watch?v=prHmUW4JIms Redeveloping TCP from the ground up - https://hannes.robur.coop/Posts/TCP-ns Design HashSet - Leetcode 705 - https://www.youtube.com/watch?v=6eAKScpknHQ TiDB Internal (II) – Computing - https://www.pingcap.com/blog/tidb-internal-computing/ Ocaml docs: Modules - https://ocaml.org/docs/modules#abstract-types The unfair way I got good at Leetcode - https://www.youtube.com/watch?v=GPIuPRqDGG8 Reducing tail latencies with automatic cooperative task yielding - https://tokio.rs/blog/2020-04-preemption How Akka Works: \u0026lsquo;Exactly Once\u0026rsquo; Message Delivery - https://www.lightbend.com/blog/how-akka-works-exactly-once-message-delivery Which 🐘PostgreSQL problems are solved with 🚀YugabyteDB - https://dev.to/yugabyte/which-postgresql-problems-are-solved-with-yugabytedb-2gm Life of a HTTP request, as seen by my toy web server - https://tia.mat.br/posts/2014/10/06/life_of_a_http_request.html On some subtleties of Paxos - https://www.the-paper-trail.org/post/2012-11-03-on-some-subtleties-of-paxos/ Consensus Protocols: A Paxos Implementation - https://www.the-paper-trail.org/post/2009-02-09-consensus-protocols-a-paxos-implementation/ Consensus, Two Phase and Three Phase Commits - https://medium.com/@balrajasubbiah/consensus-two-phase-and-three-phase-commits-4e35c1a435ac Is Scalable OLTP in the Cloud a Solved Problem? (CIDR 2023) - https://muratbuffalo.blogspot.com/2023/01/is-scalable-oltp-in-cloud-solved.html Jeff Dean: Designs, Lessons and Advice from Building Large Distributed Systems - https://www.cs.cornell.edu/projects/ladis2009/talks/dean-keynote-ladis2009.pdf Modern hinted handoff - https://www.datastax.com/blog/modern-hinted-handoff Amazon Aurora Under the Hood: Quorum Reads and Mutating State - https://aws.amazon.com/blogs/database/amazon-aurora-under-the-hood-quorum-reads-and-mutating-state/ HAT, not CAP: Introducing Highly Available Transactions - www.bailis.org/blog/hat-not-cap-introducing-highly-available-transactions/ Back to Basics: service boundaries, autonomous components, and coupling - https://milestone.topics.it/2023/05/17/back-to-basics-boundaries.html 😱 Status quo stories: Alan thinks he needs async locks - https://rust-lang.github.io/wg-async/vision/submitted_stories/status_quo/alan_thinks_he_needs_async_locks.html Let\u0026rsquo;s #TalkConcurrency Panel Discussion with Sir Tony Hoare, Joe Armstrong, and Carl Hewitt - https://www.youtube.com/watch?v=37wFVVVZlVU Students\u0026rsquo; Guide to Raft - https://thesquareplanet.com/blog/students-guide-to-raft/ Instructors\u0026rsquo; Guide to Raft - https://thesquareplanet.com/blog/instructors-guide-to-raft/ How Much Equity to Give Your Cofounder - Michael Seibel - https://www.youtube.com/watch?v=9NhEBVPlJs4 Abandoning Async - rgrinberg.com/posts/abandoning-async/ Getting Started with Lwt threads - https://mirage.io/docs/tutorial-lwt Lwt manual - https://ocsigen.org/lwt/latest/manual/manual TCP Server and Client in OCaml - https://medium.com/@aryangodara_19887/tcp-server-and-client-in-ocaml-13ebefd54f60 Non-Send Futures When? - https://matklad.github.io/2023/12/10/nsfw.html The Big Problem With \u0026ldquo;Serverless\u0026rdquo; - https://www.youtube.com/watch?v=10kVndpDKvA The effect of Random UUID on database performance - https://www.youtube.com/watch?v=OAOQ7U0XAi0 How does fork work with open files? - https://www.youtube.com/watch?v=SThwp5ijh6o Why Riak - https://web.archive.org/web/20181021220147/http://docs.basho.com/riak/1.4.8/theory/why-riak/ Introduction - https://pgrandinetti.github.io/compilers/page/introduction/ Can I Get a Job After I Study Compilers? - https://pgrandinetti.github.io/compilers/page/can-i-get-a-job-in-compilers/ Why There Are So Many Programming Languages? - https://pgrandinetti.github.io/compilers/page/why-so-many-programming-languages/ The Story of Grafana | Episode 2: Community | Grafana Documentary - https://www.youtube.com/watch?v=lbBQk_QPnEs RAND is too slow (in MySQL) - https://www.youtube.com/watch?v=wTcpZWPHl6w Design de API\u0026rsquo;s Resilientes: Explorando Técnicas de Idempotência - https://www.youtube.com/watch?v=bnRZTi3C_JM The Real Hidden Cost of a Request - https://www.youtube.com/watch?v=MN2jIUonuQQ IT in Three: What is RAID? - https://www.youtube.com/watch?v=Aa0RTgxJJy8 How databases store data on disk? - https://www.youtube.com/watch?v=haz2h7_xFDk Divide and Conquer: The Art of Breaking Down Problems | Recursion Series - https://www.youtube.com/watch?v=ib4BHvr5-Ao Why create Index blocks writes - https://www.youtube.com/watch?v=ykVumkmkbik How Databases Store and Retrieve Data - https://siemens.blog/posts/how-databases-store-and-retrieve-data/ The unreasonable generality of feed-forward neural networks (a tribute) - https://www.youtube.com/watch?v=EXbgUXt8fFU Simple introduction to monads in OCaml - https://www.cryptologie.net/article/578/simple-introduction-to-monads-in-ocaml/ OCaml has some new shiny syntax - https://jobjo.github.io/2019/04/24/ocaml-has-some-new-shiny-syntax.html A Tutorial to OCaml -ppx Language Extensions - https://victor.darvariu.me/jekyll/update/2018/06/19/ppx-tutorial.html Let syntax, and why you should use it - https://blog.janestreet.com/let-syntax-and-why-you-should-use-it/ Mitchell reflects as he departs HashiCorp - https://www.hashicorp.com/blog/mitchell-reflects-as-he-departs-hashicorp What Are the Differences Between Programming Languages - https://pgrandinetti.github.io/compilers/page/what-are-the-differences-in-programming-languages/ Jeff Bezos: Amazon and Blue Origin | Lex Fridman Podcast #405 - https://www.youtube.com/watch?v=DcWqzZ3I2cY Leaving Sourcegraph - https://registerspill.thorstenball.com/p/leaving-sourcegraph Let\u0026rsquo;s build a distributed Postgres proof of concept - https://notes.eatonphil.com/distributed-postgres.html FoundationDB: CAP Theorem - https://apple.github.io/foundationdb/cap-theorem.html FoundationDB: Fault Tolerance - https://apple.github.io/foundationdb/fault-tolerance.html Key Startup Metrics | Startup School - https://www.youtube.com/watch?v=_mKeVGSqQac Design a Blob Storage | Facebook F4 | Warm Storage - https://www.youtube.com/watch?v=zx9pz1IklUE\u0026list=PL4kInuyvT-Aw_Bz7l33AwTHXDgD3s0nkv\u0026index=13 Two new MySQL expressions - https://www.youtube.com/watch?v=NZqFiBDQG1s Partial Return Address Overwrite - Exploit Dev 10 - https://www.youtube.com/watch?v=fqsSAqbNFfo Design Metrics Aggregation System | LSM Tree Storage | Scaling - https://www.youtube.com/watch?v=7qfVRn4lFXY Memory layout and mechanics of arrays and slices | Golang | intermediate level - https://www.youtube.com/watch?v=RVTfPy_NELc A Close Look at a Spinlock - https://blog.regehr.org/archives/2173 Database Fundamentals - https://tontinton.com/posts/database-fundementals/ Learn In Public - https://www.swyx.io/learn-in-public \u0026ldquo;Simple Made Easy\u0026rdquo; (12-minute redux) by Rich Hickey (2011) - https://www.youtube.com/watch?v=F87PtAoJNtg the hidden structure you\u0026rsquo;ve been using all along - https://www.youtube.com/watch?v=CRTR5ljBjPM Diving into Kafka Internals with David Jacot - https://www.youtube.com/watch?v=d89W_GzWnRw Ocaml docs: Mutability, loops, and imperative programming - https://ocaml.org/docs/mutability-loops-and-imperative Introducing Solid Queue - https://dev.37signals.com/introducing-solid-queue/ Eio \u0026ndash; Effects-Based Parallel IO for OCaml - https://github.com/ocaml-multicore/eio Replication: Introducing leaderless replication - https://distributed-computing-musings.com/2022/01/replication-introducing-leaderless-replication/ How to Hook Steam Overlay Tutorial - 64-bit IMGUI Hook - https://www.youtube.com/watch?v=z7zUMieOO98 WHAT IS HOOKING? - https://www.youtube.com/watch?v=KY2Y7Zn3HW0 How to Be Great? Just Be Good, Repeatably - https://blog.stephsmith.io/how-to-be-great/ Locking In On Concurrency Control - https://www.youtube.com/watch?v=PyxadX8yrsI How are memories stored in neural networks? | The Hopfield Network #SoME2 - https://www.youtube.com/watch?v=piF6D6CQxUw The Log: What every software engineer should know about real-time data\u0026rsquo;s unifying abstraction - https://engineering.linkedin.com/distributed-systems/log-what-every-software-engineer-should-know-about-real-time-datas-unifying malloc sucks so i wrote my own heap in C - https://www.youtube.com/watch?v=CulF4YQt6zA Rich Hickey: Deconstructing the Database - https://www.youtube.com/watch?v=Cym4TZwTCNU The Design of Datomic - Rich Hickey - https://www.youtube.com/watch?v=Pz_NvY1kw6I Does P = NP? | Complexity Theory Explained Visually - https://www.youtube.com/watch?v=rK3xcRYLWeg Datomic: Immutable database for new web architecture (S03E08) - https://www.youtube.com/watch?v=VlNeWWcIQI4 What I Wish Someone Had Told Me - https://blog.samaltman.com/what-i-wish-someone-had-told-me The dark side of inlining and monomorphization - https://nickb.dev/blog/the-dark-side-of-inlining-and-monomorphization/ How do Video Game Graphics Work? - https://www.youtube.com/watch?v=C8YtdC8mxTU How do I Set, Clear, and Toggle a Single Bit? - https://www.youtube.com/watch?v=F9742wnBWRc Datomic overview - https://docs.datomic.com/pro/overview/introduction.html Internals of Interfaces in Golang | Intermediate level - https://www.youtube.com/watch?v=x87Cs9vU4Fk Dear Functional Bros - https://www.youtube.com/watch?v=nuML9SmdbJ4 Memory Allocation - https://samwho.dev/memory-allocation/ The secret lives of data: Raft - https://thesecretlivesofdata.com/raft/ How does B-tree make your queries fast? - https://blog.allegro.tech/2023/11/how-does-btree-make-your-queries-fast.html Cursed C++ Casts - https://www.youtube.com/watch?v=SmlLdd1Q2V8 A simple, arena-backed, generic dynamic array for C - https://nullprogram.com/blog/2023/10/05/ Essential Matrix Algebra for Neural Networks, Clearly Explained - https://www.youtube.com/watch?v=ZTt9gsGcdDo Alex Petrov: Algorithms Behind Modern Storage Systems - https://queue.acm.org/detail.cfm?id=3220266 Life Beyond Distributed Transactions - https://queue.acm.org/detail.cfm?id=3025012 Performance Engineering on Hard Mode with Andrew Hunter - https://signals-threads.simplecast.com/episodes/performance-engineering-on-hard-mode-with-andrew-hunter-fxhCMIkB Kubernetes Tutorial: Container vs. Pod vs. Deployment vs. StatefulSet \u0026amp; More - https://www.youtube.com/watch?v=4MEgCP7h8UU Kubernetes Tutorial: Container vs. Pod vs. Deployment vs. StatefulSet \u0026amp; More - https://www.youtube.com/watch?v=4MEgCP7h8UU Announcing Rust 1.75.0 - https://blog.rust-lang.org/2023/12/28/Rust-1.75.0.html A Machine Learning Primer: How to Build an ML Model - https://www.youtube.com/watch?v=Vx2DpMgplEM The value of canonicity - https://building.nubank.com.br/the-value-of-canonicity/ An introduction to the basic principles of Functional Programming - https://www.iamtk.co/an-introduction-to-the-basic-principles-of-functional-programming ","permalink":"https://poorlydefinedbehaviour.github.io/posts/reading_list_december_2023/","summary":"\u003ch2 id=\"the-list-of-things-i-read-or-watched-this-month\"\u003eThe list of things I read or watched this month\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eDesign a Metrics Aggregation System | Time Series Database Design | Prometheus - \u003ca href=\"https://www.youtube.com/watch?v=SCmN2Sr7fqE\u0026amp;list=PL4kInuyvT-Aw_Bz7l33AwTHXDgD3s0nkv\u0026amp;index=3\"\u003ehttps://www.youtube.com/watch?v=SCmN2Sr7fqE\u0026list=PL4kInuyvT-Aw_Bz7l33AwTHXDgD3s0nkv\u0026index=3\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow I add millions of rows to MySQL (for performance testing) - \u003ca href=\"https://www.youtube.com/watch?v=ywp9Z0xZPzo\"\u003ehttps://www.youtube.com/watch?v=ywp9Z0xZPzo\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe Story of Grafana | Episode 1: Democratize Metrics | Grafana Documentary - \u003ca href=\"https://www.youtube.com/watch?v=k3RQVyeYdO8\"\u003ehttps://www.youtube.com/watch?v=k3RQVyeYdO8\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow to (and how not to) design REST APIs - \u003ca href=\"https://www.youtube.com/watch?v=60F8rzP5nQo\"\u003ehttps://www.youtube.com/watch?v=60F8rzP5nQo\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow I read a research paper - \u003ca href=\"https://muratbuffalo.blogspot.com/2013/07/how-i-read-research-paper.html\"\u003ehttps://muratbuffalo.blogspot.com/2013/07/how-i-read-research-paper.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhy is Jepsen Written in Clojure? - \u003ca href=\"https://aphyr.com/posts/367-why-is-jepsen-written-in-clojure\"\u003ehttps://aphyr.com/posts/367-why-is-jepsen-written-in-clojure\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eBenchmarking the fastest possible MySQL query - \u003ca href=\"https://www.youtube.com/watch?v=KZoS1fEPx5Q\"\u003ehttps://www.youtube.com/watch?v=KZoS1fEPx5Q\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eiMessage, explained - \u003ca href=\"https://jjtech.dev/reverse-engineering/imessage-explained/\"\u003ehttps://jjtech.dev/reverse-engineering/imessage-explained/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow Price’s Law Applies to Everything - \u003ca href=\"https://nielsbohrmann.com/prices-law/\"\u003ehttps://nielsbohrmann.com/prices-law/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTraces to metrics: Ad hoc RED metrics in Grafana Tempo - \u003ca href=\"https://www.youtube.com/watch?v=xOolCpm2F8c\"\u003ehttps://www.youtube.com/watch?v=xOolCpm2F8c\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eIntroduction to opam Switches - \u003ca href=\"https://ocaml.org/docs/opam-switch-introduction#introduction-to-opam-switches\"\u003ehttps://ocaml.org/docs/opam-switch-introduction#introduction-to-opam-switches\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eIntroduction to the OCaml Toplevel - \u003ca href=\"https://ocaml.org/docs/toplevel-introduction\"\u003ehttps://ocaml.org/docs/toplevel-introduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAnnouncing Rust 1.74.1 - \u003ca href=\"https://blog.rust-lang.org/2023/12/07/Rust-1.74.1.html\"\u003ehttps://blog.rust-lang.org/2023/12/07/Rust-1.74.1.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAdvice from the CEO of Shopify, Tobias Lütke - \u003ca href=\"https://www.youtube.com/watch?v=prHmUW4JIms\"\u003ehttps://www.youtube.com/watch?v=prHmUW4JIms\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eRedeveloping TCP from the ground up - \u003ca href=\"https://hannes.robur.coop/Posts/TCP-ns\"\u003ehttps://hannes.robur.coop/Posts/TCP-ns\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDesign HashSet - Leetcode 705 - \u003ca href=\"https://www.youtube.com/watch?v=6eAKScpknHQ\"\u003ehttps://www.youtube.com/watch?v=6eAKScpknHQ\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTiDB Internal (II) – Computing - \u003ca href=\"https://www.pingcap.com/blog/tidb-internal-computing/\"\u003ehttps://www.pingcap.com/blog/tidb-internal-computing/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eOcaml docs: Modules - \u003ca href=\"https://ocaml.org/docs/modules#abstract-types\"\u003ehttps://ocaml.org/docs/modules#abstract-types\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe unfair way I got good at Leetcode - \u003ca href=\"https://www.youtube.com/watch?v=GPIuPRqDGG8\"\u003ehttps://www.youtube.com/watch?v=GPIuPRqDGG8\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eReducing tail latencies with automatic cooperative task yielding - \u003ca href=\"https://tokio.rs/blog/2020-04-preemption\"\u003ehttps://tokio.rs/blog/2020-04-preemption\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow Akka Works: \u0026lsquo;Exactly Once\u0026rsquo; Message Delivery - \u003ca href=\"https://www.lightbend.com/blog/how-akka-works-exactly-once-message-delivery\"\u003ehttps://www.lightbend.com/blog/how-akka-works-exactly-once-message-delivery\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhich 🐘PostgreSQL problems are solved with 🚀YugabyteDB - \u003ca href=\"https://dev.to/yugabyte/which-postgresql-problems-are-solved-with-yugabytedb-2gm\"\u003ehttps://dev.to/yugabyte/which-postgresql-problems-are-solved-with-yugabytedb-2gm\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eLife of a HTTP request, as seen by my toy web server - \u003ca href=\"https://tia.mat.br/posts/2014/10/06/life_of_a_http_request.html\"\u003ehttps://tia.mat.br/posts/2014/10/06/life_of_a_http_request.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eOn some subtleties of Paxos - \u003ca href=\"https://www.the-paper-trail.org/post/2012-11-03-on-some-subtleties-of-paxos/\"\u003ehttps://www.the-paper-trail.org/post/2012-11-03-on-some-subtleties-of-paxos/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eConsensus Protocols: A Paxos Implementation - \u003ca href=\"https://www.the-paper-trail.org/post/2009-02-09-consensus-protocols-a-paxos-implementation/\"\u003ehttps://www.the-paper-trail.org/post/2009-02-09-consensus-protocols-a-paxos-implementation/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eConsensus, Two Phase and Three Phase Commits - \u003ca href=\"https://medium.com/@balrajasubbiah/consensus-two-phase-and-three-phase-commits-4e35c1a435ac\"\u003ehttps://medium.com/@balrajasubbiah/consensus-two-phase-and-three-phase-commits-4e35c1a435ac\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eIs Scalable OLTP in the Cloud a Solved Problem? (CIDR 2023) - \u003ca href=\"https://muratbuffalo.blogspot.com/2023/01/is-scalable-oltp-in-cloud-solved.html\"\u003ehttps://muratbuffalo.blogspot.com/2023/01/is-scalable-oltp-in-cloud-solved.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eJeff Dean: Designs, Lessons and Advice from Building Large Distributed Systems - \u003ca href=\"https://www.cs.cornell.edu/projects/ladis2009/talks/dean-keynote-ladis2009.pdf\"\u003ehttps://www.cs.cornell.edu/projects/ladis2009/talks/dean-keynote-ladis2009.pdf\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eModern hinted handoff - \u003ca href=\"https://www.datastax.com/blog/modern-hinted-handoff\"\u003ehttps://www.datastax.com/blog/modern-hinted-handoff\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAmazon Aurora Under the Hood: Quorum Reads and Mutating State - \u003ca href=\"https://aws.amazon.com/blogs/database/amazon-aurora-under-the-hood-quorum-reads-and-mutating-state/\"\u003ehttps://aws.amazon.com/blogs/database/amazon-aurora-under-the-hood-quorum-reads-and-mutating-state/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHAT, not CAP: Introducing Highly Available Transactions - \u003ca href=\"https://www.bailis.org/blog/hat-not-cap-introducing-highly-available-transactions/\"\u003ewww.bailis.org/blog/hat-not-cap-introducing-highly-available-transactions/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eBack to Basics: service boundaries, autonomous components, and coupling - \u003ca href=\"https://milestone.topics.it/2023/05/17/back-to-basics-boundaries.html\"\u003ehttps://milestone.topics.it/2023/05/17/back-to-basics-boundaries.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e😱 Status quo stories: Alan thinks he needs async locks - \u003ca href=\"https://rust-lang.github.io/wg-async/vision/submitted_stories/status_quo/alan_thinks_he_needs_async_locks.html\"\u003ehttps://rust-lang.github.io/wg-async/vision/submitted_stories/status_quo/alan_thinks_he_needs_async_locks.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eLet\u0026rsquo;s #TalkConcurrency Panel Discussion with Sir Tony Hoare, Joe Armstrong, and Carl Hewitt - \u003ca href=\"https://www.youtube.com/watch?v=37wFVVVZlVU\"\u003ehttps://www.youtube.com/watch?v=37wFVVVZlVU\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eStudents\u0026rsquo; Guide to Raft - \u003ca href=\"https://thesquareplanet.com/blog/students-guide-to-raft/\"\u003ehttps://thesquareplanet.com/blog/students-guide-to-raft/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eInstructors\u0026rsquo; Guide to Raft - \u003ca href=\"https://thesquareplanet.com/blog/instructors-guide-to-raft/\"\u003ehttps://thesquareplanet.com/blog/instructors-guide-to-raft/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow Much Equity to Give Your Cofounder - Michael Seibel - \u003ca href=\"https://www.youtube.com/watch?v=9NhEBVPlJs4\"\u003ehttps://www.youtube.com/watch?v=9NhEBVPlJs4\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAbandoning Async - rgrinberg.com/posts/abandoning-async/\u003c/li\u003e\n\u003cli\u003eGetting Started with Lwt threads - \u003ca href=\"https://mirage.io/docs/tutorial-lwt\"\u003ehttps://mirage.io/docs/tutorial-lwt\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eLwt manual - \u003ca href=\"https://ocsigen.org/lwt/latest/manual/manual\"\u003ehttps://ocsigen.org/lwt/latest/manual/manual\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTCP Server and Client in OCaml - \u003ca href=\"https://medium.com/@aryangodara_19887/tcp-server-and-client-in-ocaml-13ebefd54f60\"\u003ehttps://medium.com/@aryangodara_19887/tcp-server-and-client-in-ocaml-13ebefd54f60\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eNon-Send Futures When? - \u003ca href=\"https://matklad.github.io/2023/12/10/nsfw.html\"\u003ehttps://matklad.github.io/2023/12/10/nsfw.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe Big Problem With \u0026ldquo;Serverless\u0026rdquo; - \u003ca href=\"https://www.youtube.com/watch?v=10kVndpDKvA\"\u003ehttps://www.youtube.com/watch?v=10kVndpDKvA\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe effect of Random UUID on database performance - \u003ca href=\"https://www.youtube.com/watch?v=OAOQ7U0XAi0\"\u003ehttps://www.youtube.com/watch?v=OAOQ7U0XAi0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow does fork work with open files? - \u003ca href=\"https://www.youtube.com/watch?v=SThwp5ijh6o\"\u003ehttps://www.youtube.com/watch?v=SThwp5ijh6o\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhy Riak - \u003ca href=\"https://web.archive.org/web/20181021220147/http://docs.basho.com/riak/1.4.8/theory/why-riak/\"\u003ehttps://web.archive.org/web/20181021220147/http://docs.basho.com/riak/1.4.8/theory/why-riak/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eIntroduction - \u003ca href=\"https://pgrandinetti.github.io/compilers/page/introduction/\"\u003ehttps://pgrandinetti.github.io/compilers/page/introduction/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eCan I Get a Job After I Study Compilers? - \u003ca href=\"https://pgrandinetti.github.io/compilers/page/can-i-get-a-job-in-compilers/\"\u003ehttps://pgrandinetti.github.io/compilers/page/can-i-get-a-job-in-compilers/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhy There Are So Many Programming Languages? - \u003ca href=\"https://pgrandinetti.github.io/compilers/page/why-so-many-programming-languages/\"\u003ehttps://pgrandinetti.github.io/compilers/page/why-so-many-programming-languages/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe Story of Grafana | Episode 2: Community | Grafana Documentary - \u003ca href=\"https://www.youtube.com/watch?v=lbBQk_QPnEs\"\u003ehttps://www.youtube.com/watch?v=lbBQk_QPnEs\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eRAND is too slow (in MySQL) - \u003ca href=\"https://www.youtube.com/watch?v=wTcpZWPHl6w\"\u003ehttps://www.youtube.com/watch?v=wTcpZWPHl6w\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDesign de API\u0026rsquo;s Resilientes: Explorando Técnicas de Idempotência - \u003ca href=\"https://www.youtube.com/watch?v=bnRZTi3C_JM\"\u003ehttps://www.youtube.com/watch?v=bnRZTi3C_JM\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe Real Hidden Cost of a Request - \u003ca href=\"https://www.youtube.com/watch?v=MN2jIUonuQQ\"\u003ehttps://www.youtube.com/watch?v=MN2jIUonuQQ\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eIT in Three: What is RAID? - \u003ca href=\"https://www.youtube.com/watch?v=Aa0RTgxJJy8\"\u003ehttps://www.youtube.com/watch?v=Aa0RTgxJJy8\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow databases store data on disk? - \u003ca href=\"https://www.youtube.com/watch?v=haz2h7_xFDk\"\u003ehttps://www.youtube.com/watch?v=haz2h7_xFDk\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDivide and Conquer: The Art of Breaking Down Problems | Recursion Series - \u003ca href=\"https://www.youtube.com/watch?v=ib4BHvr5-Ao\"\u003ehttps://www.youtube.com/watch?v=ib4BHvr5-Ao\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhy create Index blocks writes - \u003ca href=\"https://www.youtube.com/watch?v=ykVumkmkbik\"\u003ehttps://www.youtube.com/watch?v=ykVumkmkbik\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow Databases Store and Retrieve Data - \u003ca href=\"https://siemens.blog/posts/how-databases-store-and-retrieve-data/\"\u003ehttps://siemens.blog/posts/how-databases-store-and-retrieve-data/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe unreasonable generality of feed-forward neural networks (a tribute) - \u003ca href=\"https://www.youtube.com/watch?v=EXbgUXt8fFU\"\u003ehttps://www.youtube.com/watch?v=EXbgUXt8fFU\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSimple introduction to monads in OCaml - \u003ca href=\"https://www.cryptologie.net/article/578/simple-introduction-to-monads-in-ocaml/\"\u003ehttps://www.cryptologie.net/article/578/simple-introduction-to-monads-in-ocaml/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eOCaml has some new shiny syntax - \u003ca href=\"https://jobjo.github.io/2019/04/24/ocaml-has-some-new-shiny-syntax.html\"\u003ehttps://jobjo.github.io/2019/04/24/ocaml-has-some-new-shiny-syntax.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eA Tutorial to OCaml -ppx Language Extensions - \u003ca href=\"https://victor.darvariu.me/jekyll/update/2018/06/19/ppx-tutorial.html\"\u003ehttps://victor.darvariu.me/jekyll/update/2018/06/19/ppx-tutorial.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eLet syntax, and why you should use it - \u003ca href=\"https://blog.janestreet.com/let-syntax-and-why-you-should-use-it/\"\u003ehttps://blog.janestreet.com/let-syntax-and-why-you-should-use-it/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMitchell reflects as he departs HashiCorp - \u003ca href=\"https://www.hashicorp.com/blog/mitchell-reflects-as-he-departs-hashicorp\"\u003ehttps://www.hashicorp.com/blog/mitchell-reflects-as-he-departs-hashicorp\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhat Are the Differences Between Programming Languages - \u003ca href=\"https://pgrandinetti.github.io/compilers/page/what-are-the-differences-in-programming-languages/\"\u003ehttps://pgrandinetti.github.io/compilers/page/what-are-the-differences-in-programming-languages/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eJeff Bezos: Amazon and Blue Origin | Lex Fridman Podcast #405 - \u003ca href=\"https://www.youtube.com/watch?v=DcWqzZ3I2cY\"\u003ehttps://www.youtube.com/watch?v=DcWqzZ3I2cY\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eLeaving Sourcegraph - \u003ca href=\"https://registerspill.thorstenball.com/p/leaving-sourcegraph\"\u003ehttps://registerspill.thorstenball.com/p/leaving-sourcegraph\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eLet\u0026rsquo;s build a distributed Postgres proof of concept - \u003ca href=\"https://notes.eatonphil.com/distributed-postgres.html\"\u003ehttps://notes.eatonphil.com/distributed-postgres.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eFoundationDB: CAP Theorem - \u003ca href=\"https://apple.github.io/foundationdb/cap-theorem.html\"\u003ehttps://apple.github.io/foundationdb/cap-theorem.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eFoundationDB: Fault Tolerance - \u003ca href=\"https://apple.github.io/foundationdb/fault-tolerance.html\"\u003ehttps://apple.github.io/foundationdb/fault-tolerance.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eKey Startup Metrics | Startup School - \u003ca href=\"https://www.youtube.com/watch?v=_mKeVGSqQac\"\u003ehttps://www.youtube.com/watch?v=_mKeVGSqQac\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDesign a Blob Storage | Facebook F4 | Warm Storage - \u003ca href=\"https://www.youtube.com/watch?v=zx9pz1IklUE\u0026amp;list=PL4kInuyvT-Aw_Bz7l33AwTHXDgD3s0nkv\u0026amp;index=13\"\u003ehttps://www.youtube.com/watch?v=zx9pz1IklUE\u0026list=PL4kInuyvT-Aw_Bz7l33AwTHXDgD3s0nkv\u0026index=13\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTwo new MySQL expressions - \u003ca href=\"https://www.youtube.com/watch?v=NZqFiBDQG1s\"\u003ehttps://www.youtube.com/watch?v=NZqFiBDQG1s\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ePartial Return Address Overwrite - Exploit Dev 10 - \u003ca href=\"https://www.youtube.com/watch?v=fqsSAqbNFfo\"\u003ehttps://www.youtube.com/watch?v=fqsSAqbNFfo\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDesign Metrics Aggregation System | LSM Tree Storage | Scaling - \u003ca href=\"https://www.youtube.com/watch?v=7qfVRn4lFXY\"\u003ehttps://www.youtube.com/watch?v=7qfVRn4lFXY\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMemory layout and mechanics of arrays and slices | Golang | intermediate level - \u003ca href=\"https://www.youtube.com/watch?v=RVTfPy_NELc\"\u003ehttps://www.youtube.com/watch?v=RVTfPy_NELc\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eA Close Look at a Spinlock - \u003ca href=\"https://blog.regehr.org/archives/2173\"\u003ehttps://blog.regehr.org/archives/2173\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDatabase Fundamentals - \u003ca href=\"https://tontinton.com/posts/database-fundementals/\"\u003ehttps://tontinton.com/posts/database-fundementals/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eLearn In Public - \u003ca href=\"https://www.swyx.io/learn-in-public\"\u003ehttps://www.swyx.io/learn-in-public\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u0026ldquo;Simple Made Easy\u0026rdquo; (12-minute redux) by Rich Hickey (2011) - \u003ca href=\"https://www.youtube.com/watch?v=F87PtAoJNtg\"\u003ehttps://www.youtube.com/watch?v=F87PtAoJNtg\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ethe hidden structure you\u0026rsquo;ve been using all along - \u003ca href=\"https://www.youtube.com/watch?v=CRTR5ljBjPM\"\u003ehttps://www.youtube.com/watch?v=CRTR5ljBjPM\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDiving into Kafka Internals with David Jacot - \u003ca href=\"https://www.youtube.com/watch?v=d89W_GzWnRw\"\u003ehttps://www.youtube.com/watch?v=d89W_GzWnRw\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eOcaml docs: Mutability, loops, and imperative programming - \u003ca href=\"https://ocaml.org/docs/mutability-loops-and-imperative\"\u003ehttps://ocaml.org/docs/mutability-loops-and-imperative\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eIntroducing Solid Queue - \u003ca href=\"https://dev.37signals.com/introducing-solid-queue/\"\u003ehttps://dev.37signals.com/introducing-solid-queue/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eEio \u0026ndash; Effects-Based Parallel IO for OCaml - \u003ca href=\"https://github.com/ocaml-multicore/eio\"\u003ehttps://github.com/ocaml-multicore/eio\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eReplication: Introducing leaderless replication - \u003ca href=\"https://distributed-computing-musings.com/2022/01/replication-introducing-leaderless-replication/\"\u003ehttps://distributed-computing-musings.com/2022/01/replication-introducing-leaderless-replication/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow to Hook Steam Overlay Tutorial - 64-bit IMGUI Hook - \u003ca href=\"https://www.youtube.com/watch?v=z7zUMieOO98\"\u003ehttps://www.youtube.com/watch?v=z7zUMieOO98\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWHAT IS HOOKING? - \u003ca href=\"https://www.youtube.com/watch?v=KY2Y7Zn3HW0\"\u003ehttps://www.youtube.com/watch?v=KY2Y7Zn3HW0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow to Be Great? Just Be Good, Repeatably - \u003ca href=\"https://blog.stephsmith.io/how-to-be-great/\"\u003ehttps://blog.stephsmith.io/how-to-be-great/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eLocking In On Concurrency Control - \u003ca href=\"https://www.youtube.com/watch?v=PyxadX8yrsI\"\u003ehttps://www.youtube.com/watch?v=PyxadX8yrsI\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow are memories stored in neural networks? | The Hopfield Network #SoME2 - \u003ca href=\"https://www.youtube.com/watch?v=piF6D6CQxUw\"\u003ehttps://www.youtube.com/watch?v=piF6D6CQxUw\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe Log: What every software engineer should know about real-time data\u0026rsquo;s unifying abstraction - \u003ca href=\"https://engineering.linkedin.com/distributed-systems/log-what-every-software-engineer-should-know-about-real-time-datas-unifying\"\u003ehttps://engineering.linkedin.com/distributed-systems/log-what-every-software-engineer-should-know-about-real-time-datas-unifying\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003emalloc sucks so i wrote my own heap in C - \u003ca href=\"https://www.youtube.com/watch?v=CulF4YQt6zA\"\u003ehttps://www.youtube.com/watch?v=CulF4YQt6zA\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eRich Hickey: Deconstructing the Database - \u003ca href=\"https://www.youtube.com/watch?v=Cym4TZwTCNU\"\u003ehttps://www.youtube.com/watch?v=Cym4TZwTCNU\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe Design of Datomic - Rich Hickey - \u003ca href=\"https://www.youtube.com/watch?v=Pz_NvY1kw6I\"\u003ehttps://www.youtube.com/watch?v=Pz_NvY1kw6I\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDoes P = NP? | Complexity Theory Explained Visually - \u003ca href=\"https://www.youtube.com/watch?v=rK3xcRYLWeg\"\u003ehttps://www.youtube.com/watch?v=rK3xcRYLWeg\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDatomic: Immutable database for new web architecture (S03E08) - \u003ca href=\"https://www.youtube.com/watch?v=VlNeWWcIQI4\"\u003ehttps://www.youtube.com/watch?v=VlNeWWcIQI4\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhat I Wish Someone Had Told Me - \u003ca href=\"https://blog.samaltman.com/what-i-wish-someone-had-told-me\"\u003ehttps://blog.samaltman.com/what-i-wish-someone-had-told-me\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe dark side of inlining and monomorphization - \u003ca href=\"https://nickb.dev/blog/the-dark-side-of-inlining-and-monomorphization/\"\u003ehttps://nickb.dev/blog/the-dark-side-of-inlining-and-monomorphization/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow do Video Game Graphics Work? - \u003ca href=\"https://www.youtube.com/watch?v=C8YtdC8mxTU\"\u003ehttps://www.youtube.com/watch?v=C8YtdC8mxTU\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow do I Set, Clear, and Toggle a Single Bit? - \u003ca href=\"https://www.youtube.com/watch?v=F9742wnBWRc\"\u003ehttps://www.youtube.com/watch?v=F9742wnBWRc\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDatomic overview - \u003ca href=\"https://docs.datomic.com/pro/overview/introduction.html\"\u003ehttps://docs.datomic.com/pro/overview/introduction.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eInternals of Interfaces in Golang | Intermediate level - \u003ca href=\"https://www.youtube.com/watch?v=x87Cs9vU4Fk\"\u003ehttps://www.youtube.com/watch?v=x87Cs9vU4Fk\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDear Functional Bros - \u003ca href=\"https://www.youtube.com/watch?v=nuML9SmdbJ4\"\u003ehttps://www.youtube.com/watch?v=nuML9SmdbJ4\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMemory Allocation - \u003ca href=\"https://samwho.dev/memory-allocation/\"\u003ehttps://samwho.dev/memory-allocation/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe secret lives of data: Raft - \u003ca href=\"https://thesecretlivesofdata.com/raft/\"\u003ehttps://thesecretlivesofdata.com/raft/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow does B-tree make your queries fast? - \u003ca href=\"https://blog.allegro.tech/2023/11/how-does-btree-make-your-queries-fast.html\"\u003ehttps://blog.allegro.tech/2023/11/how-does-btree-make-your-queries-fast.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eCursed C++ Casts - \u003ca href=\"https://www.youtube.com/watch?v=SmlLdd1Q2V8\"\u003ehttps://www.youtube.com/watch?v=SmlLdd1Q2V8\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eA simple, arena-backed, generic dynamic array for C - \u003ca href=\"https://nullprogram.com/blog/2023/10/05/\"\u003ehttps://nullprogram.com/blog/2023/10/05/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eEssential Matrix Algebra for Neural Networks, Clearly Explained - \u003ca href=\"https://www.youtube.com/watch?v=ZTt9gsGcdDo\"\u003ehttps://www.youtube.com/watch?v=ZTt9gsGcdDo\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAlex Petrov: Algorithms Behind Modern Storage Systems - \u003ca href=\"https://queue.acm.org/detail.cfm?id=3220266\"\u003ehttps://queue.acm.org/detail.cfm?id=3220266\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eLife Beyond Distributed Transactions - \u003ca href=\"https://queue.acm.org/detail.cfm?id=3025012\"\u003ehttps://queue.acm.org/detail.cfm?id=3025012\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ePerformance Engineering on Hard Mode with Andrew Hunter - \u003ca href=\"https://signals-threads.simplecast.com/episodes/performance-engineering-on-hard-mode-with-andrew-hunter-fxhCMIkB\"\u003ehttps://signals-threads.simplecast.com/episodes/performance-engineering-on-hard-mode-with-andrew-hunter-fxhCMIkB\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eKubernetes Tutorial: Container vs. Pod vs. Deployment vs. StatefulSet \u0026amp; More - \u003ca href=\"https://www.youtube.com/watch?v=4MEgCP7h8UU\"\u003ehttps://www.youtube.com/watch?v=4MEgCP7h8UU\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eKubernetes Tutorial: Container vs. Pod vs. Deployment vs. StatefulSet \u0026amp; More - \u003ca href=\"https://www.youtube.com/watch?v=4MEgCP7h8UU\"\u003ehttps://www.youtube.com/watch?v=4MEgCP7h8UU\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAnnouncing Rust 1.75.0 - \u003ca href=\"https://blog.rust-lang.org/2023/12/28/Rust-1.75.0.html\"\u003ehttps://blog.rust-lang.org/2023/12/28/Rust-1.75.0.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eA Machine Learning Primer: How to Build an ML Model - \u003ca href=\"https://www.youtube.com/watch?v=Vx2DpMgplEM\"\u003ehttps://www.youtube.com/watch?v=Vx2DpMgplEM\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe value of canonicity - \u003ca href=\"https://building.nubank.com.br/the-value-of-canonicity/\"\u003ehttps://building.nubank.com.br/the-value-of-canonicity/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAn introduction to the basic principles of Functional Programming - \u003ca href=\"https://www.iamtk.co/an-introduction-to-the-basic-principles-of-functional-programming\"\u003ehttps://www.iamtk.co/an-introduction-to-the-basic-principles-of-functional-programming\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","title":"Reading list December 2023"},{"content":"Disagree and commit is a management principle which states that individuals are allowed to disagree while a decision is being made, but that once a decision has been made, everybody must commit to it1.\nSounds good in theory. I can see it working If the individuals involved are at the same level in the hierarchy or the individual disagreeing and committing has more power than the individual proposing an idea.\nIn my experience, it falls apart when the person disagreeing has less power than the person proposing an idea. The person with the most power ends up using disagree and commit as an excuse to force the other person into a corner where disagreeing is seen as not being a good teammate.\nhttps://en.wikipedia.org/wiki/Disagree_and_commit\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://poorlydefinedbehaviour.github.io/posts/disagree_and_commit_falls_apart_in_the_presence_of_power_imbalance/","summary":"\u003cp\u003eDisagree and commit is a management principle which states that individuals are allowed to disagree while a decision is being made, but that once a decision has been made, everybody must commit to it\u003csup id=\"fnref:1\"\u003e\u003ca href=\"#fn:1\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e1\u003c/a\u003e\u003c/sup\u003e.\u003c/p\u003e\n\u003cp\u003eSounds good in theory. I can see it working If the individuals involved are at the same level in the hierarchy or the individual disagreeing and committing has more power than the individual proposing an idea.\u003c/p\u003e","title":"Disagree and commit falls apart in the presence of power imbalance"},{"content":"The list of things I read or watched this month How To NOT Get Screwed As A Software Engineer - https://www.youtube.com/watch?v=fcfVjd_oV1I Failing Startups : Maybe I should get a job - https://www.indiehackers.com/post/failing-startups-maybe-i-should-get-a-job-653e1efd52 Cross shard transactions at 10 million requests per second - https://dropbox.tech/infrastructure/cross-shard-transactions-at-10-million-requests-per-second Let\u0026rsquo;s implement a basic hotel reservation system with 2PC using pessimistic and optimistic locks in Go - https://blog.stackademic.com/lets-implement-a-basic-hotel-reservation-system-with-2pc-using-pessimistic-and-optimistic-locks-in-581256d142e8 Postgres: PREPARE TRANSACTION - https://www.postgresql.org/docs/current/sql-prepare-transaction.html Building a Streaming Platform in Go for Postgres - https://blog.peerdb.io/building-a-streaming-platform-in-go-for-postgres Using MySQL to stop freeloaders (in only 8 minutes) - https://www.youtube.com/watch?v=goC5BdyCvms You don\u0026rsquo;t need NoSQL (use MySQL) - https://www.youtube.com/watch?v=QZBxgX2OWbI Towards Modern Development of Cloud Applications - https://dl.acm.org/doi/pdf/10.1145/3593856.3595909 Diamond Architecture - How to build HUMONGOUS Apps FAST! - Part 5 - Less Boilerplate Please - https://www.youtube.com/watch?v=SQengjF8gXs Essence of Domain-Driven Design (DDD) - https://www.youtube.com/watch?v=Y0txTmT3k7M Event-Driven Architecture lost its way - https://www.youtube.com/watch?v=YusVrd9rHJU Paper Notes: Bitcask – A Log-Structured Hash Table for Fast Key/Value Data - https://distributed-computing-musings.com/2023/01/paper-notes-bitcask-a-log-structured-hash-table-for-fast-key-value-data/ Wikipedia: readahead - https://en.wikipedia.org/wiki/Readahead Manpage: readahead - https://man7.org/linux/man-pages/man2/readahead.2.html P99 CONF 2023 | A Deterministic Walk Down TigerBeetle’s main() Street by Aleksei Kladov - https://www.youtube.com/watch?v=AGxAnkrhDGY why yelling at your code makes it better (software fuzzing explained) - https://www.youtube.com/watch?v=diUiwAEPjcQ Complex database indexing strategies - https://www.youtube.com/watch?v=IcIkjfXoHV4 Domain Modeling Gone Wrong - Part 1 - https://www.youtube.com/watch?v=0EQCcALt9Cc Domain Modeling Gone Wrong - Part 2 - https://www.youtube.com/watch?v=2Tvb1fA3PLQ If your service doesn\u0026rsquo;t own data, it\u0026rsquo;s NOT a service. - https://www.youtube.com/watch?v=S46f1-0ciHA Transactions Are Not Locks - https://www.benburwell.com/posts/transactions-are-not-locks/ Rust: Polonius update - https://blog.rust-lang.org/inside-rust/2023/10/06/polonius-update.html How to Detect Threads \u0026amp; Bypass Anti-Cheat Detection - https://www.youtube.com/watch?v=KzD_nc5B_8w Storing feature flags as JSON (with indexing) - https://www.youtube.com/watch?v=cDzrY-QW4Ck Message Queue From Scratch In Golang With Only STD LIB - https://www.youtube.com/watch?v=99OEUGbk3vc Store 8 feature flags in 1 integer (Bitwise operations in MySQL) - https://www.youtube.com/watch?v=Kf8SWqljM18 Criptografia na Prática - Certificados, BitTorrent, Git, Bitcoin - https://www.youtube.com/watch?v=iAA8NrfQtHo What Makes The Top 10% Of Founders Different? - Michael Seibel - https://www.youtube.com/watch?v=ZtfTOuSHGg8 Let\u0026rsquo;s Build A Distributed CAS Storage In Golang - https://www.youtube.com/watch?v=d_pVmR_0p0E Why Checked Exceptions Failed - https://borretti.me/article/why-checked-exceptions-failed P2P Protocol In Golang For My Distributed CAS - https://www.youtube.com/watch?v=TFkOzuUz6Wo Announcing Rust 1.74.0 - https://blog.rust-lang.org/2023/11/16/Rust-1.74.0.html Saving a SaaS on the weekend - https://www.youtube.com/watch?v=kkjAxSViOAA Build a Monolith and Deploy like Microservices? Maybe with Service Weaver - https://www.youtube.com/watch?v=Srt_8a5Nam0 Building and operating a pretty big storage system called S3 - https://www.allthingsdistributed.com/2023/07/building-and-operating-a-pretty-big-storage-system.html Distributed CAS Storage In Golang - RPC Networking - https://www.youtube.com/watch?v=_5RrYWKbyVg Uncensored Models - https://erichartford.com/uncensored-models Coding TCP Transport For My P2P Distributed Storage In GO - https://www.youtube.com/watch?v=-Ung58PHgus Streaming Large Files In Golang But Distributed - https://www.youtube.com/watch?v=3mO5MUbCzKQ Your database will break in 2038 (or sooner) - https://www.youtube.com/watch?v=d6HaTHkXqcQ Neural Networks From Scratch in Rust - https://www.youtube.com/watch?v=DKbz9pNXVdE Episode 001: Intro and (Absence of) Message Parsing - https://www.youtube.com/watch?v=hPUL8Xo6MJw Two Ways To Do Dynamic Dispatch - https://www.youtube.com/watch?v=wU8hQvU8aKM How Do You Convince Someone to Join Your Startup? - Dalton Caldwell - https://www.youtube.com/watch?v=N8deM6B4eE4 The magic of content-addressable storage - https://hal.science/hal-02559031v1/file/content-addressable-storage-preprint.pdf There is No Now: Problems with simultaneity in distributed systems - https://queue.acm.org/detail.cfm?id=2745385 Database enums are weird - https://www.youtube.com/watch?v=ej8jzMloE_4 Pizza Wars: The Exorcism of Papa John’s - https://www.youtube.com/watch?v=6eAcykBJsUM Kubernetes Autoscaling: HPA vs. VPA vs. Keda vs. CA vs. Karpenter vs. Fargate - https://www.youtube.com/watch?v=hsJ2qtwoWZw interrupts is threads - https://onevariable.com/blog/interrupts-is-threads/ MIT 6.824: Distributed systems - Lecture 4: Primary-Backup Replication - https://www.youtube.com/watch?app=desktop\u0026v=M_teob23ZzY\u0026amp%3Bfeature=youtu.be ZooKeper wiki: Zab vs. Paxos - https://cwiki.apache.org/confluence/display/ZOOKEEPER/Zab+vs.+Paxos The Postgres replication dilemma - https://medium.com/@hnasr/the-postgres-replication-dilemma-72bef6cc4599 Inside logical replication in PostgreSQL: How it works - https://www.postgresql.fastware.com/blog/inside-logical-replication-in-postgresql The cost and benefit of synchronous replication in PostgreSQL and YugabyteDB - https://dev.to/yugabyte/the-cost-and-benefit-of-synchronous-replication-in-postgresql-and-yugabytedb-2ej0 How I became a machine learning practitioner - https://blog.gregbrockman.com/how-i-became-a-machine-learning-practitioner It’s time to become an ML engineer - https://blog.gregbrockman.com/its-time-to-become-an-ml-engineer My path to OpenAI - https://blog.gregbrockman.com/my-path-to-openai What Is Platform Engineering - https://www.youtube.com/watch?v=JP8-9WXBcgg Top 8 Most Popular Network Protocols Explained - https://www.youtube.com/watch?v=P6SZLcGE4us You don\u0026rsquo;t* need JOINs - https://www.youtube.com/watch?v=5hsl47I3svw Writing Tests For My Distributed File Storage In Golang - https://www.youtube.com/watch?v=MKwYkV9JWLw Everything You Know About MongoDB is Wrong! - https://www.mongodb.com/developer/products/mongodb/everything-you-know-is-wrong/ Why async Rust? - https://without.boats/blog/why-async-rust/ What is a MESSAGE QUEUE and Where is it used? - https://www.youtube.com/watch?v=oUJbuFMyBDk Basic Amazon SQS architecture - https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-basic-architecture.html The Big Little Guide to Message Queues - https://sudhir.io/the-big-little-guide-to-message-queues Using the expand and contract pattern for schema changes - https://www.prisma.io/dataguide/types/relational/expand-and-contract-pattern Andrej Karpathy: [1hr Talk] Intro to Large Language Models - https://www.youtube.com/watch?v=zjkBMFhNj_g Tim Brady - How Much Equity Should I Give My First Employees? - https://www.youtube.com/watch?v=B2QdN0-fAbw Implement Raft in Rust - https://www.pingcap.com/blog/implement-raft-in-rust/ What is a Multiraft? - https://sergeiturukin.com/2017/06/09/multiraft.html Scaling Raft - https://www.cockroachlabs.com/blog/scaling-raft/ Elasticell: Multi-Raft - https://elasticell.readthedocs.io/en/latest/architecture/multi-raft/ TiKV: Multi-raft - https://tikv.org/deep-dive/scalability/multi-raft/ Raft or not? The Best Solution to Data Consistency in Cloud-native Databases - https://milvus.io/blog/raft-or-not.md Dan Lüdtke: Implementing Distributed Consensus - https://www.usenix.org/sites/default/files/conference/protected-files/srecon19apac_slides_ludtke.pdf Distributed consensus made simple (for real this time!) - https://decentralizedthoughts.github.io/2021-09-30-distributed-consensus-made-simple-for-real-this-time/ Machine Learning Interview - Design Spotify Recommendations - https://www.youtube.com/watch?v=vyZMYlGBSBM Vertical Slice Architecture Myths You Need To Know! - https://www.youtube.com/watch?v=TfMArQnepco Database Replication Explained - https://towardsdatascience.com/database-replication-explained-5c76a200d8f3 Paxos, Raft, EPaxos: How Has Distributed Consensus Technology Evolved? - https://www.alibabacloud.com/blog/paxos-raft-epaxos-how-has-distributed-consensus-technology-evolved_597127 It’s About Time! - https://brooker.co.za/blog/2023/11/27/about-time.html How Git Works: Explained in 4 Minutes - https://www.youtube.com/watch?v=e9lnsKot_SQ Many to many relationships in MySQL - https://www.youtube.com/watch?v=csLHXmVLGbs Announcing the new Amazon S3 Express One Zone high performance storage class - https://aws.amazon.com/blogs/aws/new-amazon-s3-express-one-zone-high-performance-storage-class/ S3 Express is All You Need - https://www.warpstream.com/blog/s3-express-is-all-you-need The Golang Function Nobody Talks About - https://www.youtube.com/watch?v=INcV8kNlDPM How To Build A Tech Startup With No Technical Skills - https://www.youtube.com/watch?v=ZpKu2wvquWg Write throughput differences in B-tree vs LSM-tree based databases? - https://www.reddit.com/r/databasedevelopment/comments/187cp1g/write_throughput_differences_in_btree_vs_lsmtree/ LSM Tree: Data structure powering write heavy storage engines - https://distributed-computing-musings.com/2022/07/lsm-tree-data-structure-powering-write-heavy-storage-engines/ WiredTiger: Btree vs LSM - https://github.com/wiredtiger/wiredtiger/wiki/Btree-vs-LSM How OmniPaxos handles partial connectivity - and why other protocols can’t - https://omnipaxos.com/blog/how-omnipaxos-handles-partial-connectivity-and-why-other-protocols-cant/ Raft does not Guarantee Liveness in the face of Network Faults - https://decentralizedthoughts.github.io/2020-12-12-raft-liveness-full-omission/ Design an Amazon S3 or Object Storage - https://www.youtube.com/watch?v=vTPR6fIgC-I All Web Services API What are the benefits and drawbacks of using token bucket or leaky bucket for API rate limiting? - https://www.linkedin.com/advice/0/what-benefits-drawbacks-using-token-bucket-leaky ","permalink":"https://poorlydefinedbehaviour.github.io/posts/reading_list_november_2023/","summary":"\u003ch2 id=\"the-list-of-things-i-read-or-watched-this-month\"\u003eThe list of things I read or watched this month\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHow To NOT Get Screwed As A Software Engineer - \u003ca href=\"https://www.youtube.com/watch?v=fcfVjd_oV1I\"\u003ehttps://www.youtube.com/watch?v=fcfVjd_oV1I\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eFailing Startups : Maybe I should get a job - \u003ca href=\"https://www.indiehackers.com/post/failing-startups-maybe-i-should-get-a-job-653e1efd52\"\u003ehttps://www.indiehackers.com/post/failing-startups-maybe-i-should-get-a-job-653e1efd52\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eCross shard transactions at 10 million requests per second - \u003ca href=\"https://dropbox.tech/infrastructure/cross-shard-transactions-at-10-million-requests-per-second\"\u003ehttps://dropbox.tech/infrastructure/cross-shard-transactions-at-10-million-requests-per-second\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eLet\u0026rsquo;s implement a basic hotel reservation system with 2PC using pessimistic and optimistic locks in Go - \u003ca href=\"https://blog.stackademic.com/lets-implement-a-basic-hotel-reservation-system-with-2pc-using-pessimistic-and-optimistic-locks-in-581256d142e8\"\u003ehttps://blog.stackademic.com/lets-implement-a-basic-hotel-reservation-system-with-2pc-using-pessimistic-and-optimistic-locks-in-581256d142e8\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ePostgres: PREPARE TRANSACTION - \u003ca href=\"https://www.postgresql.org/docs/current/sql-prepare-transaction.html\"\u003ehttps://www.postgresql.org/docs/current/sql-prepare-transaction.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eBuilding a Streaming Platform in Go for Postgres - \u003ca href=\"https://blog.peerdb.io/building-a-streaming-platform-in-go-for-postgres\"\u003ehttps://blog.peerdb.io/building-a-streaming-platform-in-go-for-postgres\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eUsing MySQL to stop freeloaders (in only 8 minutes) - \u003ca href=\"https://www.youtube.com/watch?v=goC5BdyCvms\"\u003ehttps://www.youtube.com/watch?v=goC5BdyCvms\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eYou don\u0026rsquo;t need NoSQL (use MySQL) - \u003ca href=\"https://www.youtube.com/watch?v=QZBxgX2OWbI\"\u003ehttps://www.youtube.com/watch?v=QZBxgX2OWbI\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTowards Modern Development of Cloud Applications - \u003ca href=\"https://dl.acm.org/doi/pdf/10.1145/3593856.3595909\"\u003ehttps://dl.acm.org/doi/pdf/10.1145/3593856.3595909\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDiamond Architecture - How to build HUMONGOUS Apps FAST! - Part 5 - Less Boilerplate Please - \u003ca href=\"https://www.youtube.com/watch?v=SQengjF8gXs\"\u003ehttps://www.youtube.com/watch?v=SQengjF8gXs\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eEssence of Domain-Driven Design (DDD) - \u003ca href=\"https://www.youtube.com/watch?v=Y0txTmT3k7M\"\u003ehttps://www.youtube.com/watch?v=Y0txTmT3k7M\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eEvent-Driven Architecture lost its way - \u003ca href=\"https://www.youtube.com/watch?v=YusVrd9rHJU\"\u003ehttps://www.youtube.com/watch?v=YusVrd9rHJU\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ePaper Notes: Bitcask – A Log-Structured Hash Table for Fast Key/Value Data - \u003ca href=\"https://distributed-computing-musings.com/2023/01/paper-notes-bitcask-a-log-structured-hash-table-for-fast-key-value-data/\"\u003ehttps://distributed-computing-musings.com/2023/01/paper-notes-bitcask-a-log-structured-hash-table-for-fast-key-value-data/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWikipedia: readahead - \u003ca href=\"https://en.wikipedia.org/wiki/Readahead\"\u003ehttps://en.wikipedia.org/wiki/Readahead\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eManpage: readahead - \u003ca href=\"https://man7.org/linux/man-pages/man2/readahead.2.html\"\u003ehttps://man7.org/linux/man-pages/man2/readahead.2.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eP99 CONF 2023 | A Deterministic Walk Down TigerBeetle’s main() Street by Aleksei Kladov - \u003ca href=\"https://www.youtube.com/watch?v=AGxAnkrhDGY\"\u003ehttps://www.youtube.com/watch?v=AGxAnkrhDGY\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ewhy yelling at your code makes it better (software fuzzing explained) - \u003ca href=\"https://www.youtube.com/watch?v=diUiwAEPjcQ\"\u003ehttps://www.youtube.com/watch?v=diUiwAEPjcQ\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eComplex database indexing strategies - \u003ca href=\"https://www.youtube.com/watch?v=IcIkjfXoHV4\"\u003ehttps://www.youtube.com/watch?v=IcIkjfXoHV4\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDomain Modeling Gone Wrong - Part 1 - \u003ca href=\"https://www.youtube.com/watch?v=0EQCcALt9Cc\"\u003ehttps://www.youtube.com/watch?v=0EQCcALt9Cc\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDomain Modeling Gone Wrong - Part 2 - \u003ca href=\"https://www.youtube.com/watch?v=2Tvb1fA3PLQ\"\u003ehttps://www.youtube.com/watch?v=2Tvb1fA3PLQ\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eIf your service doesn\u0026rsquo;t own data, it\u0026rsquo;s NOT a service. - \u003ca href=\"https://www.youtube.com/watch?v=S46f1-0ciHA\"\u003ehttps://www.youtube.com/watch?v=S46f1-0ciHA\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTransactions Are Not Locks - \u003ca href=\"https://www.benburwell.com/posts/transactions-are-not-locks/\"\u003ehttps://www.benburwell.com/posts/transactions-are-not-locks/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eRust: Polonius update - \u003ca href=\"https://blog.rust-lang.org/inside-rust/2023/10/06/polonius-update.html\"\u003ehttps://blog.rust-lang.org/inside-rust/2023/10/06/polonius-update.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow to Detect Threads \u0026amp; Bypass Anti-Cheat Detection - \u003ca href=\"https://www.youtube.com/watch?v=KzD_nc5B_8w\"\u003ehttps://www.youtube.com/watch?v=KzD_nc5B_8w\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eStoring feature flags as JSON (with indexing) - \u003ca href=\"https://www.youtube.com/watch?v=cDzrY-QW4Ck\"\u003ehttps://www.youtube.com/watch?v=cDzrY-QW4Ck\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMessage Queue From Scratch In Golang With Only STD LIB - \u003ca href=\"https://www.youtube.com/watch?v=99OEUGbk3vc\"\u003ehttps://www.youtube.com/watch?v=99OEUGbk3vc\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eStore 8 feature flags in 1 integer (Bitwise operations in MySQL) - \u003ca href=\"https://www.youtube.com/watch?v=Kf8SWqljM18\"\u003ehttps://www.youtube.com/watch?v=Kf8SWqljM18\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eCriptografia na Prática - Certificados, BitTorrent, Git, Bitcoin - \u003ca href=\"https://www.youtube.com/watch?v=iAA8NrfQtHo\"\u003ehttps://www.youtube.com/watch?v=iAA8NrfQtHo\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhat Makes The Top 10% Of Founders Different? - Michael Seibel - \u003ca href=\"https://www.youtube.com/watch?v=ZtfTOuSHGg8\"\u003ehttps://www.youtube.com/watch?v=ZtfTOuSHGg8\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eLet\u0026rsquo;s Build A Distributed CAS Storage In Golang - \u003ca href=\"https://www.youtube.com/watch?v=d_pVmR_0p0E\"\u003ehttps://www.youtube.com/watch?v=d_pVmR_0p0E\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhy Checked Exceptions Failed - \u003ca href=\"https://borretti.me/article/why-checked-exceptions-failed\"\u003ehttps://borretti.me/article/why-checked-exceptions-failed\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eP2P Protocol In Golang For My Distributed CAS - \u003ca href=\"https://www.youtube.com/watch?v=TFkOzuUz6Wo\"\u003ehttps://www.youtube.com/watch?v=TFkOzuUz6Wo\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAnnouncing Rust 1.74.0 - \u003ca href=\"https://blog.rust-lang.org/2023/11/16/Rust-1.74.0.html\"\u003ehttps://blog.rust-lang.org/2023/11/16/Rust-1.74.0.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSaving a SaaS on the weekend - \u003ca href=\"https://www.youtube.com/watch?v=kkjAxSViOAA\"\u003ehttps://www.youtube.com/watch?v=kkjAxSViOAA\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eBuild a Monolith and Deploy like Microservices? Maybe with Service Weaver - \u003ca href=\"https://www.youtube.com/watch?v=Srt_8a5Nam0\"\u003ehttps://www.youtube.com/watch?v=Srt_8a5Nam0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eBuilding and operating a pretty big storage system called S3 - \u003ca href=\"https://www.allthingsdistributed.com/2023/07/building-and-operating-a-pretty-big-storage-system.html\"\u003ehttps://www.allthingsdistributed.com/2023/07/building-and-operating-a-pretty-big-storage-system.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDistributed CAS Storage In Golang - RPC Networking - \u003ca href=\"https://www.youtube.com/watch?v=_5RrYWKbyVg\"\u003ehttps://www.youtube.com/watch?v=_5RrYWKbyVg\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eUncensored Models - \u003ca href=\"https://erichartford.com/uncensored-models\"\u003ehttps://erichartford.com/uncensored-models\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eCoding TCP Transport For My P2P Distributed Storage In GO - \u003ca href=\"https://www.youtube.com/watch?v=-Ung58PHgus\"\u003ehttps://www.youtube.com/watch?v=-Ung58PHgus\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eStreaming Large Files In Golang But Distributed - \u003ca href=\"https://www.youtube.com/watch?v=3mO5MUbCzKQ\"\u003ehttps://www.youtube.com/watch?v=3mO5MUbCzKQ\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eYour database will break in 2038 (or sooner) - \u003ca href=\"https://www.youtube.com/watch?v=d6HaTHkXqcQ\"\u003ehttps://www.youtube.com/watch?v=d6HaTHkXqcQ\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eNeural Networks From Scratch in Rust - \u003ca href=\"https://www.youtube.com/watch?v=DKbz9pNXVdE\"\u003ehttps://www.youtube.com/watch?v=DKbz9pNXVdE\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eEpisode 001: Intro and (Absence of) Message Parsing - \u003ca href=\"https://www.youtube.com/watch?v=hPUL8Xo6MJw\"\u003ehttps://www.youtube.com/watch?v=hPUL8Xo6MJw\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTwo Ways To Do Dynamic Dispatch - \u003ca href=\"https://www.youtube.com/watch?v=wU8hQvU8aKM\"\u003ehttps://www.youtube.com/watch?v=wU8hQvU8aKM\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow Do You Convince Someone to Join Your Startup? - Dalton Caldwell - \u003ca href=\"https://www.youtube.com/watch?v=N8deM6B4eE4\"\u003ehttps://www.youtube.com/watch?v=N8deM6B4eE4\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe magic of content-addressable storage - \u003ca href=\"https://hal.science/hal-02559031v1/file/content-addressable-storage-preprint.pdf\"\u003ehttps://hal.science/hal-02559031v1/file/content-addressable-storage-preprint.pdf\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThere is No Now: Problems with simultaneity in distributed systems - \u003ca href=\"https://queue.acm.org/detail.cfm?id=2745385\"\u003ehttps://queue.acm.org/detail.cfm?id=2745385\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDatabase enums are weird - \u003ca href=\"https://www.youtube.com/watch?v=ej8jzMloE_4\"\u003ehttps://www.youtube.com/watch?v=ej8jzMloE_4\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ePizza Wars: The Exorcism of Papa John’s - \u003ca href=\"https://www.youtube.com/watch?v=6eAcykBJsUM\"\u003ehttps://www.youtube.com/watch?v=6eAcykBJsUM\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eKubernetes Autoscaling: HPA vs. VPA vs. Keda vs. CA vs. Karpenter vs. Fargate - \u003ca href=\"https://www.youtube.com/watch?v=hsJ2qtwoWZw\"\u003ehttps://www.youtube.com/watch?v=hsJ2qtwoWZw\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003einterrupts is threads - \u003ca href=\"https://onevariable.com/blog/interrupts-is-threads/\"\u003ehttps://onevariable.com/blog/interrupts-is-threads/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMIT 6.824: Distributed systems - Lecture 4: Primary-Backup Replication - \u003ca href=\"https://www.youtube.com/watch?app=desktop\u0026amp;v=M_teob23ZzY\u0026amp;amp%3Bfeature=youtu.be\"\u003ehttps://www.youtube.com/watch?app=desktop\u0026v=M_teob23ZzY\u0026amp%3Bfeature=youtu.be\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eZooKeper wiki: Zab vs. Paxos - \u003ca href=\"https://cwiki.apache.org/confluence/display/ZOOKEEPER/Zab\u0026#43;vs.\u0026#43;Paxos\"\u003ehttps://cwiki.apache.org/confluence/display/ZOOKEEPER/Zab+vs.+Paxos\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe Postgres replication dilemma - \u003ca href=\"https://medium.com/@hnasr/the-postgres-replication-dilemma-72bef6cc4599\"\u003ehttps://medium.com/@hnasr/the-postgres-replication-dilemma-72bef6cc4599\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eInside logical replication in PostgreSQL: How it works - \u003ca href=\"https://www.postgresql.fastware.com/blog/inside-logical-replication-in-postgresql\"\u003ehttps://www.postgresql.fastware.com/blog/inside-logical-replication-in-postgresql\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe cost and benefit of synchronous replication in PostgreSQL and YugabyteDB - \u003ca href=\"https://dev.to/yugabyte/the-cost-and-benefit-of-synchronous-replication-in-postgresql-and-yugabytedb-2ej0\"\u003ehttps://dev.to/yugabyte/the-cost-and-benefit-of-synchronous-replication-in-postgresql-and-yugabytedb-2ej0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow I became a machine learning practitioner - \u003ca href=\"https://blog.gregbrockman.com/how-i-became-a-machine-learning-practitioner\"\u003ehttps://blog.gregbrockman.com/how-i-became-a-machine-learning-practitioner\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eIt’s time to become an ML engineer - \u003ca href=\"https://blog.gregbrockman.com/its-time-to-become-an-ml-engineer\"\u003ehttps://blog.gregbrockman.com/its-time-to-become-an-ml-engineer\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMy path to OpenAI - \u003ca href=\"https://blog.gregbrockman.com/my-path-to-openai\"\u003ehttps://blog.gregbrockman.com/my-path-to-openai\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhat Is Platform Engineering - \u003ca href=\"https://www.youtube.com/watch?v=JP8-9WXBcgg\"\u003ehttps://www.youtube.com/watch?v=JP8-9WXBcgg\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTop 8 Most Popular Network Protocols Explained - \u003ca href=\"https://www.youtube.com/watch?v=P6SZLcGE4us\"\u003ehttps://www.youtube.com/watch?v=P6SZLcGE4us\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eYou don\u0026rsquo;t* need JOINs - \u003ca href=\"https://www.youtube.com/watch?v=5hsl47I3svw\"\u003ehttps://www.youtube.com/watch?v=5hsl47I3svw\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWriting Tests For My Distributed File Storage In Golang - \u003ca href=\"https://www.youtube.com/watch?v=MKwYkV9JWLw\"\u003ehttps://www.youtube.com/watch?v=MKwYkV9JWLw\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eEverything You Know About MongoDB is Wrong! - \u003ca href=\"https://www.mongodb.com/developer/products/mongodb/everything-you-know-is-wrong/\"\u003ehttps://www.mongodb.com/developer/products/mongodb/everything-you-know-is-wrong/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhy async Rust? - \u003ca href=\"https://without.boats/blog/why-async-rust/\"\u003ehttps://without.boats/blog/why-async-rust/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhat is a MESSAGE QUEUE and Where is it used? - \u003ca href=\"https://www.youtube.com/watch?v=oUJbuFMyBDk\"\u003ehttps://www.youtube.com/watch?v=oUJbuFMyBDk\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eBasic Amazon SQS architecture - \u003ca href=\"https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-basic-architecture.html\"\u003ehttps://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-basic-architecture.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe Big Little Guide to Message Queues - \u003ca href=\"https://sudhir.io/the-big-little-guide-to-message-queues\"\u003ehttps://sudhir.io/the-big-little-guide-to-message-queues\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eUsing the expand and contract pattern for schema changes - \u003ca href=\"https://www.prisma.io/dataguide/types/relational/expand-and-contract-pattern\"\u003ehttps://www.prisma.io/dataguide/types/relational/expand-and-contract-pattern\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAndrej Karpathy: [1hr Talk] Intro to Large Language Models - \u003ca href=\"https://www.youtube.com/watch?v=zjkBMFhNj_g\"\u003ehttps://www.youtube.com/watch?v=zjkBMFhNj_g\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTim Brady - How Much Equity Should I Give My First Employees? - \u003ca href=\"https://www.youtube.com/watch?v=B2QdN0-fAbw\"\u003ehttps://www.youtube.com/watch?v=B2QdN0-fAbw\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eImplement Raft in Rust - \u003ca href=\"https://www.pingcap.com/blog/implement-raft-in-rust/\"\u003ehttps://www.pingcap.com/blog/implement-raft-in-rust/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhat is a Multiraft? - \u003ca href=\"https://sergeiturukin.com/2017/06/09/multiraft.html\"\u003ehttps://sergeiturukin.com/2017/06/09/multiraft.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eScaling Raft - \u003ca href=\"https://www.cockroachlabs.com/blog/scaling-raft/\"\u003ehttps://www.cockroachlabs.com/blog/scaling-raft/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eElasticell: Multi-Raft - \u003ca href=\"https://elasticell.readthedocs.io/en/latest/architecture/multi-raft/\"\u003ehttps://elasticell.readthedocs.io/en/latest/architecture/multi-raft/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTiKV: Multi-raft - \u003ca href=\"https://tikv.org/deep-dive/scalability/multi-raft/\"\u003ehttps://tikv.org/deep-dive/scalability/multi-raft/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eRaft or not? The Best Solution to Data Consistency in Cloud-native Databases - \u003ca href=\"https://milvus.io/blog/raft-or-not.md\"\u003ehttps://milvus.io/blog/raft-or-not.md\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDan Lüdtke: Implementing Distributed Consensus - \u003ca href=\"https://www.usenix.org/sites/default/files/conference/protected-files/srecon19apac_slides_ludtke.pdf\"\u003ehttps://www.usenix.org/sites/default/files/conference/protected-files/srecon19apac_slides_ludtke.pdf\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDistributed consensus made simple (for real this time!) - \u003ca href=\"https://decentralizedthoughts.github.io/2021-09-30-distributed-consensus-made-simple-for-real-this-time/\"\u003ehttps://decentralizedthoughts.github.io/2021-09-30-distributed-consensus-made-simple-for-real-this-time/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMachine Learning Interview - Design Spotify Recommendations - \u003ca href=\"https://www.youtube.com/watch?v=vyZMYlGBSBM\"\u003ehttps://www.youtube.com/watch?v=vyZMYlGBSBM\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eVertical Slice Architecture Myths You Need To Know! - \u003ca href=\"https://www.youtube.com/watch?v=TfMArQnepco\"\u003ehttps://www.youtube.com/watch?v=TfMArQnepco\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDatabase Replication Explained - \u003ca href=\"https://towardsdatascience.com/database-replication-explained-5c76a200d8f3\"\u003ehttps://towardsdatascience.com/database-replication-explained-5c76a200d8f3\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ePaxos, Raft, EPaxos: How Has Distributed Consensus Technology Evolved? - \u003ca href=\"https://www.alibabacloud.com/blog/paxos-raft-epaxos-how-has-distributed-consensus-technology-evolved_597127\"\u003ehttps://www.alibabacloud.com/blog/paxos-raft-epaxos-how-has-distributed-consensus-technology-evolved_597127\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eIt’s About Time! - \u003ca href=\"https://brooker.co.za/blog/2023/11/27/about-time.html\"\u003ehttps://brooker.co.za/blog/2023/11/27/about-time.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow Git Works: Explained in 4 Minutes - \u003ca href=\"https://www.youtube.com/watch?v=e9lnsKot_SQ\"\u003ehttps://www.youtube.com/watch?v=e9lnsKot_SQ\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMany to many relationships in MySQL - \u003ca href=\"https://www.youtube.com/watch?v=csLHXmVLGbs\"\u003ehttps://www.youtube.com/watch?v=csLHXmVLGbs\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAnnouncing the new Amazon S3 Express One Zone high performance storage class - \u003ca href=\"https://aws.amazon.com/blogs/aws/new-amazon-s3-express-one-zone-high-performance-storage-class/\"\u003ehttps://aws.amazon.com/blogs/aws/new-amazon-s3-express-one-zone-high-performance-storage-class/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eS3 Express is All You Need - \u003ca href=\"https://www.warpstream.com/blog/s3-express-is-all-you-need\"\u003ehttps://www.warpstream.com/blog/s3-express-is-all-you-need\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe Golang Function Nobody Talks About - \u003ca href=\"https://www.youtube.com/watch?v=INcV8kNlDPM\"\u003ehttps://www.youtube.com/watch?v=INcV8kNlDPM\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow To Build A Tech Startup With No Technical Skills - \u003ca href=\"https://www.youtube.com/watch?v=ZpKu2wvquWg\"\u003ehttps://www.youtube.com/watch?v=ZpKu2wvquWg\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWrite throughput differences in B-tree vs LSM-tree based databases? - \u003ca href=\"https://www.reddit.com/r/databasedevelopment/comments/187cp1g/write_throughput_differences_in_btree_vs_lsmtree/\"\u003ehttps://www.reddit.com/r/databasedevelopment/comments/187cp1g/write_throughput_differences_in_btree_vs_lsmtree/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eLSM Tree: Data structure powering write heavy storage engines - \u003ca href=\"https://distributed-computing-musings.com/2022/07/lsm-tree-data-structure-powering-write-heavy-storage-engines/\"\u003ehttps://distributed-computing-musings.com/2022/07/lsm-tree-data-structure-powering-write-heavy-storage-engines/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWiredTiger: Btree vs LSM - \u003ca href=\"https://github.com/wiredtiger/wiredtiger/wiki/Btree-vs-LSM\"\u003ehttps://github.com/wiredtiger/wiredtiger/wiki/Btree-vs-LSM\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow OmniPaxos handles partial connectivity - and why other protocols can’t - \u003ca href=\"https://omnipaxos.com/blog/how-omnipaxos-handles-partial-connectivity-and-why-other-protocols-cant/\"\u003ehttps://omnipaxos.com/blog/how-omnipaxos-handles-partial-connectivity-and-why-other-protocols-cant/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eRaft does not Guarantee Liveness in the face of Network Faults - \u003ca href=\"https://decentralizedthoughts.github.io/2020-12-12-raft-liveness-full-omission/\"\u003ehttps://decentralizedthoughts.github.io/2020-12-12-raft-liveness-full-omission/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDesign an Amazon S3 or Object Storage - \u003ca href=\"https://www.youtube.com/watch?v=vTPR6fIgC-I\"\u003ehttps://www.youtube.com/watch?v=vTPR6fIgC-I\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAll Web Services API What are the benefits and drawbacks of using token bucket or leaky bucket for API rate limiting? - \u003ca href=\"https://www.linkedin.com/advice/0/what-benefits-drawbacks-using-token-bucket-leaky\"\u003ehttps://www.linkedin.com/advice/0/what-benefits-drawbacks-using-token-bucket-leaky\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","title":"Reading list November 2023"},{"content":"As the World Wide Web became more popular all of sudden a server could receive way more traffic than it could handle causing the server to service requests slowly or to not be able to serve them at all1. An intuitive solution to this problem is to cache2 the content served by the servers and allow the clients to fetch content from the caches instead of going to the original server. Several clients communicate with the same cache servers which means that if client 1 fetches the contents for the page example.com, client 2 can fetch the same contents from the cache instead of going to the oirignal server if it decides to visit example.com as well.\nWhen the first client fetches the contents for example.com a request is sent to the original server but when the second client tries to fetch the content for example.com the contents are returned from the cache server\nRunning a single cache server is not feasible given the amount of data it would need to store could be huge and if the cache stopped for working for any reason, the clients would go directly to the original servers that have content the clients wish to download and the servers could get overloaded.\nClient can't connect to the cache so it goes directly to the server\nThe single point of failure can be removed by running many cache servers instead of just one but that creates other problems with one them being: how does the client know which cache should have the contents for the website it wants to visit?\nGiven a fixed number n of cache servers, identified by a number from 0 to n - 1, the client can mod the hash of the url by n to find out which cache server a request should be sent to. Since the same input will always hash to the same value, different clients trying to fetch the contents for the same url would always go for the same cache.\nClients hash the url to find out which cache server to contact\nIn reality there would be a large number of cache servers instead of just a few which means some cache servers would stop working and that new cache servers would be added all the time. Using the hash of the url mod the number of cache servers invalidates most of the cached data as soon as the number of cache servers changes since the hash mod the number of servers may yield a different number when the number of servers changes. It would be nice to be able to change the number of cache servers while keeping the as much as possible of the cached contents.\nSince a new server was added, the result of mod operation changes which causes clients to contact a cache server that does not have the contents they are looking for. The contents are in cache 1.\nConsistent hashing allows the number of cache servers to be changed while invalidating only a small part of the cached data. The clients are still going the hash the url to find out which server a request should be sent to but instead of using the hash mod the number of servers to find the server, servers are going to be in a ring.\nA ring containing 3 cache servers. The position of each cache server in the ring is found by hashing something that identifies each server such as the server address\nGiven a ring, the server identifiers are hashed and the hash value is used to decide where each server is located in the ring. A client that needs to decide which cache server should handle a request hashes the url and uses the value of the hash to determine where the url is located in the ring, after locating the url in the ring, the request is sent to the next server in the clockwise direction starting from the url location.\nThe hash value of example.com is located after Cache 1 and before Cache 2 in the ring which means Cache 2 is the cache server responsible for handling the request because is it is the next server in the clockwise direction\nIn constrat to the previous hash based solution, adding or removing a server invalidates only a small part of the cached data. Before adding the cache server Cache 3, a client looking for the contents of mysite.com would hash the url, the hash value would land after Cache 0 and before Cache 1 in the ring. The client would walk the ring in the clockwise direction, find Cache 1 and sent the request to it. If a client wanted to fetch the contents for example.com, it would execute the same steps and sent the request to Cache 2.\nAfter adding the cache server Cache 3, a client looking for the contents of mysite.com would execute the same steps as before but this time while walking the ring in the clockwise direction, Cache 3 would be the first server to be found which means the client would send the request to it. If a client wanted to fetch the contents for example.com again, the request would still go to Cache 2, same as before.\nCache 3 was added and the only partition of the cached data that a client won't find in the next request before it is cached in another cache server is the cached contents for mysite.com\nAt this time, the contents for each url are stored only in a single server, if higher fault-tolerance is needed, the contents could be stored in more than one of the servers. The data could be replicated to the next n servers instead of the first server in the clockwise direction or more than one hash function could be used to find which servers should have the data.\nThe contents of example.com are stored in Cache Cache 1, Cache 0 and Cache 3 at the same time\nSince hash functions are being used to place servers in the ring, it is possible that some serves end up responsible for larger sections of the ring. It is possible to decrease the change of a single server being responsible for a large section of the ring by using virtual servers, meaning that each server will appear in several locations of the ring. The use of virtual servers also allows cache servers that have more resources to store more data and handle more requests, a server that has more resources can appear more times than other servers for example. A way to decide where to place the same server is to use more than once hash function to find the server location in the ring.\nCache 1 appears more than once in the ring because it has enough resources to handle 3 times more the number of requests other servers can handle\nAmazon Dynamo, Amazon\u0026rsquo;s highly available key-value store used consistent hashing with virtual nodes to partition the load across storage servers3.\nScyllaDB, a distributed NoSQL wide-column database uses consistent hashing to assign rows to partitions4.\nCassandra, a distributed NoSQL wide-column database uses consistent hashing to assign data to nodes5.\nChord, a distributed lookup protocol that maps keys onto nodes uses a variant of consistent hashing6.\nRiak, a distributed NoSQL key-value database uses consistent hashing to decide which virtual node in the cluster stores each object7.\nhttps://cs.brown.edu/courses/csci2950-u/f10/papers/chash99www.pdf\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://en.wikipedia.org/wiki/Cache_(computing)\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://www.allthingsdistributed.com/files/amazon-dynamo-sosp2007.pdf\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://opensource.docs.scylladb.com/stable/architecture/ringarchitecture/\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://docs.datastax.com/en/cassandra-oss/3.0/cassandra/architecture/archDataDistributeHashing.html\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://pdos.csail.mit.edu/papers/chord:sigcomm01/chord_sigcomm.pdf\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://docs.riak.com/riak/kv/latest/learn/glossary/index.html#consistent-hashing\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://poorlydefinedbehaviour.github.io/posts/consistent_hashing/","summary":"\u003cp\u003eAs the \u003ca href=\"https://en.wikipedia.org/wiki/World_Wide_Web\"\u003eWorld Wide Web\u003c/a\u003e became more popular all of sudden a server could receive way more traffic than it could handle causing the server to service requests slowly or to not be able to serve them at all\u003csup id=\"fnref:1\"\u003e\u003ca href=\"#fn:1\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e1\u003c/a\u003e\u003c/sup\u003e. An intuitive solution to this problem is to cache\u003csup id=\"fnref:2\"\u003e\u003ca href=\"#fn:2\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e2\u003c/a\u003e\u003c/sup\u003e the content served by the servers and allow the clients to fetch content from the caches instead of going to the original server. Several clients communicate with the same cache servers which means that if client \u003ccode\u003e1\u003c/code\u003e fetches the contents for the page \u003ccode\u003eexample.com\u003c/code\u003e, client \u003ccode\u003e2\u003c/code\u003e can fetch the same contents from the cache instead of going to the oirignal server if it decides to visit \u003ccode\u003eexample.com\u003c/code\u003e as well.\u003c/p\u003e","title":"Consistent hashing"},{"content":"The list of things I read or watched this month Farewell EC2-Classic, it’s been swell - https://www.allthingsdistributed.com/2023/09/farewell-ec2-classic.html Building a Firecracker-Powered Course Platform To Learn Docker and Kubernetes - https://iximiuz.com/en/posts/iximiuz-labs-story/ The Power Of Struct Embedding And Interfaces In Golang - https://www.youtube.com/watch?v=fXZJu_JuH0A Beginners Should Think Differently When Writing Golang - https://www.youtube.com/watch?v=PyDMqgOkiR8 How to Get Transactions Between (Almost) Any Data Stores - https://petereliaskraft.net/blog/epoxy How to do Distributed Transactions the RIGHT way? Microservices - https://www.youtube.com/watch?v=vGOEO6mO674 \u0026ldquo;Workflows, a new abstraction for distributed systems\u0026rdquo; by Dominik Tornow (Strange Loop 2022) - https://www.youtube.com/watch?v=V_5WeVmyhzg Domain Modeling Gone Wrong - Part 2 - https://www.youtube.com/watch?v=2Tvb1fA3PLQ dbdb: etcd - https://dbdb.io/db/etcd Shuffle Sharding: Massive and Magical Fault Isolation - https://aws.amazon.com/blogs/architecture/shuffle-sharding-massive-and-magical-fault-isolation/ System Design: Apache Kafka In 3 Minutes - https://www.youtube.com/watch?v=HZklgPkboro Serializability - https://jepsen.io/consistency/models/serializable Strict Serializability - https://jepsen.io/consistency/models/strict-serializable Linearizability - https://jepsen.io/consistency/models/linearizable What is Linearizability in Distributed System? - https://hongilkwon.medium.com/what-is-linearizability-in-distributed-system-db8bca3d432d Towards Inserting One Billion Rows in SQLite Under A Minute - https://avi.im/blag/2021/fast-sqlite-inserts/ You Cannot Have Exactly-Once Delivery - https://bravenewgeek.com/you-cannot-have-exactly-once-delivery/ Pagination in MySQL - https://www.youtube.com/watch?v=zwDIN04lIpc Free your API. Misconceptions are holding you back! - https://www.youtube.com/watch?v=nS8XHgMvqNo Understanding Consensus - https://bravenewgeek.com/understanding-consensus/ Algorithms You Should Know Before System Design Interviews - https://www.youtube.com/watch?v=xbgzl2maQUU Distributed consensus - https://shachaf.net/w/consensus are \u0026ldquo;smart pointers\u0026rdquo; actually smart? - https://www.youtube.com/watch?v=tSIBKys2eBQ There is plenty of room at the bottom - https://muratbuffalo.blogspot.com/2021/08/there-is-plenty-of-room-at-bottom.html Raft does not Guarantee Liveness in the face of Network Faults - https://decentralizedthoughts.github.io/2020-12-12-raft-liveness-full-omission/ What is Zig\u0026rsquo;s “Colorblind” Async/Await? - https://kristoff.it/blog/zig-colorblind-async-await/ A Gentle Introduction to LLVM IR - https://mcyoung.xyz/2023/08/01/llvm-ir/ Single-Decree Paxos - https://mwhittaker.github.io/blog/single_decree_paxos/ I Wrote A String Type - https://mcyoung.xyz/2023/08/09/yarns/ Little Computer 3 - https://en.wikipedia.org/wiki/Little_Computer_3 LC3 Instruction Set Architecture - https://winniewjeng.github.io/organization%20\u0026%20programming/2020/06/09/Instruction-Set-Architecture/ LC3 Machine Instruction - https://winniewjeng.github.io/organization%20\u0026%20programming/2020/06/08/LC3-Machine-Instruction/ What is a spinlock? //Source Dive// 002 - https://www.youtube.com/watch?v=ZE9OODanrDA Sign extension - https://en.wikipedia.org/wiki/Sign_extension Use your database to power state machines - https://blog.lawrencejones.dev/state-machines/ ZooKeeper: Zab vs. Paxos - https://cwiki.apache.org/confluence/display/ZOOKEEPER/Zab+vs.+Paxos University of Washington: Replicated State Machines Primary-Backup - https://courses.cs.washington.edu/courses/cse552/19au/notes/lect3.pdf Princeton: Replication State Machines via Primary-Backup Replication - https://www.cs.princeton.edu/courses/archive/spring22/cos418/docs/L11-rsm-pb.pdf MIT 6.824: Lecture 4: Primary-Backup Replication - https://www.youtube.com/watch?v=M_teob23ZzY Large Language Models from scratch - https://www.youtube.com/watch?v=lnA9DMvHtfI Large Language Models: Part 2 - https://www.youtube.com/watch?v=YDiSFS-yHwk Searching by location in MySQL - https://www.youtube.com/watch?v=QgnCB8X_sN4 why do header files even exist? - https://www.youtube.com/watch?v=tOQZlD-0Scc Alternative to the Outbox Pattern? Not so fast. - https://www.youtube.com/watch?v=cuQ9zuNF1cI Container Loading in AWS Lambda - https://brooker.co.za/blog/2023/05/23/snapshot-loading.html JDK 21 LTS - All Features Explained! - https://www.youtube.com/watch?v=bgxuSIhkQZg 4x shorter WebGPU access from Wasm, featuring Nelua, Zig, \u0026amp; Rust - https://www.youtube.com/watch?v=I-tN3dS2zwA Fixing For Loops in Go 1.22 - https://go.dev/blog/loopvar-preview Another way to check pointers at runtime in C - https://www.youtube.com/watch?v=xCxI2GIFdZo RabbitMQ vs. Kafka – An Architect’s Dilemma (Part 1) - https://eranstiller.com/rabbitmq-vs-kafka-an-architects-dilemma-part-1 RabbitMQ vs. Kafka – An Architect’s Dilemma (Part 2) - https://eranstiller.com/rabbitmq-vs-kafka-an-architects-dilemma-part-2 295 - LOCK otimista no CASO DE USO | theWiseDev CleanArch - https://www.youtube.com/watch?v=e6cxVjv5rN0 Transactions: Write skew \u0026amp; why we need serialization? - https://distributed-computing-musings.com/2022/02/transactions-write-skew-why-we-need-serialization/ Transactions: Introduction to serializability techniques - https://distributed-computing-musings.com/2022/02/transactions-introduction-to-serializability-techniques/ Transactions: Two-phase Locking - https://distributed-computing-musings.com/2022/02/transactions-two-phase-locking/ Transactions: Serializable Snapshot Isolation - https://distributed-computing-musings.com/2022/02/transactions-serializable-snapshot-isolation/ Best Developer Interview Question - https://www.youtube.com/watch?v=h1w4X3CmRH4 How to create an alert rule in Grafana 10.1 - https://www.youtube.com/watch?v=nPdzomH6bno New flame graph features for continuous profiling data in Grafana 10.1 - https://www.youtube.com/watch?v=bezFLhbzDOM How to to filter trace spans in Grafana 10.1 - https://www.youtube.com/watch?v=VP2XV3IIc80 Grafana 10.1: TraceQL query results streaming - https://www.youtube.com/watch?v=7BRapaDM_2c Understand Paxos with Rust, Automerge, and TLA+ — Part 1: The Synod. - https://medium.com/@polyglot_factotum/understand-paxos-with-rust-automerge-and-tla-part-1-the-synod-371df5f16f45 Loki Log Context Query Editor in Grafana 10 - https://www.youtube.com/watch?v=t6SG-w_bVss What is Podman? How is it Different Than Docker? - https://www.youtube.com/watch?v=5WML8gX2F1c Relational Databases vs Time Series Databases - https://www.influxdata.com/blog/relational-databases-vs-time-series-databases/ Linux network ring buffers - https://medium.com/coccoc-engineering-blog/linux-network-ring-buffers-cea7ead0b8e8 How do databases execute expressions? - https://notes.eatonphil.com/2023-09-21-how-do-databases-execute-expressions.html Rustonomicon: Poisoning - https://doc.rust-lang.org/nomicon/poisoning.html Make Kubernetes and Platform Engineering Easier Part 2 Monitoring and Observability - https://www.youtube.com/watch?v=RjtT1Q7DpmQ Make Kubernetes and Platform Engineering Easier Part 4: Application Workflows - https://www.youtube.com/watch?v=YPuAAS3lba8 ORMs can lead to FAT domain models. Slim them down! - https://www.youtube.com/watch?v=4UZXUc9jmHc Adding Nested Loops Makes this Algorithm 120x FASTER? - https://www.youtube.com/watch?v=QGYvbsHDPxo Mark Zuckerberg: First Interview in the Metaverse | Lex Fridman Podcast #398 - https://www.youtube.com/watch?v=MVYrJJNdrEg Faster database indexes (straight from the docs) - https://www.youtube.com/watch?v=5aezDBaNfcc Containerization Strategy - https://www.youtube.com/watch?v=iLyBEEkm5e0 why do void pointers even exist? - https://www.youtube.com/watch?v=t7CUti_7d7c The Pros and Cons of Encrypted Client Hello - https://www.youtube.com/watch?v=1ezrBsJCVqw Why Do You Only Get Motivated After Midnight? | Night Owls - https://www.youtube.com/watch?v=jiIhOgpOWcA Why You Should Be Ashamed Of Yourself - https://www.youtube.com/watch?v=COHThDr1uvg Server Name Indication (SNI) TLS Extension Explained - https://www.youtube.com/watch?v=manTiXESYG0 50 years later, is Two-Phase Locking the best we can do? - concurrencyfreaks.blogspot.com/2023/09/50-years-later-is-two-phase-locking.html ","permalink":"https://poorlydefinedbehaviour.github.io/posts/reading_list_september_2023/","summary":"\u003ch2 id=\"the-list-of-things-i-read-or-watched-this-month\"\u003eThe list of things I read or watched this month\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eFarewell EC2-Classic, it’s been swell - \u003ca href=\"https://www.allthingsdistributed.com/2023/09/farewell-ec2-classic.html\"\u003ehttps://www.allthingsdistributed.com/2023/09/farewell-ec2-classic.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eBuilding a Firecracker-Powered Course Platform To Learn Docker and Kubernetes - \u003ca href=\"https://iximiuz.com/en/posts/iximiuz-labs-story/\"\u003ehttps://iximiuz.com/en/posts/iximiuz-labs-story/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe Power Of Struct Embedding And Interfaces In Golang - \u003ca href=\"https://www.youtube.com/watch?v=fXZJu_JuH0A\"\u003ehttps://www.youtube.com/watch?v=fXZJu_JuH0A\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eBeginners Should Think Differently When Writing Golang - \u003ca href=\"https://www.youtube.com/watch?v=PyDMqgOkiR8\"\u003ehttps://www.youtube.com/watch?v=PyDMqgOkiR8\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow to Get Transactions Between (Almost) Any Data Stores - \u003ca href=\"https://petereliaskraft.net/blog/epoxy\"\u003ehttps://petereliaskraft.net/blog/epoxy\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow to do Distributed Transactions the RIGHT way? Microservices - \u003ca href=\"https://www.youtube.com/watch?v=vGOEO6mO674\"\u003ehttps://www.youtube.com/watch?v=vGOEO6mO674\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u0026ldquo;Workflows, a new abstraction for distributed systems\u0026rdquo; by Dominik Tornow (Strange Loop 2022) - \u003ca href=\"https://www.youtube.com/watch?v=V_5WeVmyhzg\"\u003ehttps://www.youtube.com/watch?v=V_5WeVmyhzg\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDomain Modeling Gone Wrong - Part 2 - \u003ca href=\"https://www.youtube.com/watch?v=2Tvb1fA3PLQ\"\u003ehttps://www.youtube.com/watch?v=2Tvb1fA3PLQ\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003edbdb: etcd - \u003ca href=\"https://dbdb.io/db/etcd\"\u003ehttps://dbdb.io/db/etcd\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eShuffle Sharding: Massive and Magical Fault Isolation - \u003ca href=\"https://aws.amazon.com/blogs/architecture/shuffle-sharding-massive-and-magical-fault-isolation/\"\u003ehttps://aws.amazon.com/blogs/architecture/shuffle-sharding-massive-and-magical-fault-isolation/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSystem Design: Apache Kafka In 3 Minutes - \u003ca href=\"https://www.youtube.com/watch?v=HZklgPkboro\"\u003ehttps://www.youtube.com/watch?v=HZklgPkboro\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSerializability - \u003ca href=\"https://jepsen.io/consistency/models/serializable\"\u003ehttps://jepsen.io/consistency/models/serializable\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eStrict Serializability - \u003ca href=\"https://jepsen.io/consistency/models/strict-serializable\"\u003ehttps://jepsen.io/consistency/models/strict-serializable\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eLinearizability - \u003ca href=\"https://jepsen.io/consistency/models/linearizable\"\u003ehttps://jepsen.io/consistency/models/linearizable\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhat is Linearizability in Distributed System? - \u003ca href=\"https://hongilkwon.medium.com/what-is-linearizability-in-distributed-system-db8bca3d432d\"\u003ehttps://hongilkwon.medium.com/what-is-linearizability-in-distributed-system-db8bca3d432d\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTowards Inserting One Billion Rows in SQLite Under A Minute - \u003ca href=\"https://avi.im/blag/2021/fast-sqlite-inserts/\"\u003ehttps://avi.im/blag/2021/fast-sqlite-inserts/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eYou Cannot Have Exactly-Once Delivery - \u003ca href=\"https://bravenewgeek.com/you-cannot-have-exactly-once-delivery/\"\u003ehttps://bravenewgeek.com/you-cannot-have-exactly-once-delivery/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ePagination in MySQL - \u003ca href=\"https://www.youtube.com/watch?v=zwDIN04lIpc\"\u003ehttps://www.youtube.com/watch?v=zwDIN04lIpc\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eFree your API. Misconceptions are holding you back! - \u003ca href=\"https://www.youtube.com/watch?v=nS8XHgMvqNo\"\u003ehttps://www.youtube.com/watch?v=nS8XHgMvqNo\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eUnderstanding Consensus - \u003ca href=\"https://bravenewgeek.com/understanding-consensus/\"\u003ehttps://bravenewgeek.com/understanding-consensus/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAlgorithms You Should Know Before System Design Interviews - \u003ca href=\"https://www.youtube.com/watch?v=xbgzl2maQUU\"\u003ehttps://www.youtube.com/watch?v=xbgzl2maQUU\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDistributed consensus - \u003ca href=\"https://shachaf.net/w/consensus\"\u003ehttps://shachaf.net/w/consensus\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eare \u0026ldquo;smart pointers\u0026rdquo; actually smart? - \u003ca href=\"https://www.youtube.com/watch?v=tSIBKys2eBQ\"\u003ehttps://www.youtube.com/watch?v=tSIBKys2eBQ\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThere is plenty of room at the bottom - \u003ca href=\"https://muratbuffalo.blogspot.com/2021/08/there-is-plenty-of-room-at-bottom.html\"\u003ehttps://muratbuffalo.blogspot.com/2021/08/there-is-plenty-of-room-at-bottom.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eRaft does not Guarantee Liveness in the face of Network Faults - \u003ca href=\"https://decentralizedthoughts.github.io/2020-12-12-raft-liveness-full-omission/\"\u003ehttps://decentralizedthoughts.github.io/2020-12-12-raft-liveness-full-omission/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhat is Zig\u0026rsquo;s “Colorblind” Async/Await? - \u003ca href=\"https://kristoff.it/blog/zig-colorblind-async-await/\"\u003ehttps://kristoff.it/blog/zig-colorblind-async-await/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eA Gentle Introduction to LLVM IR - \u003ca href=\"https://mcyoung.xyz/2023/08/01/llvm-ir/\"\u003ehttps://mcyoung.xyz/2023/08/01/llvm-ir/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSingle-Decree Paxos - \u003ca href=\"https://mwhittaker.github.io/blog/single_decree_paxos/\"\u003ehttps://mwhittaker.github.io/blog/single_decree_paxos/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eI Wrote A String Type - \u003ca href=\"https://mcyoung.xyz/2023/08/09/yarns/\"\u003ehttps://mcyoung.xyz/2023/08/09/yarns/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eLittle Computer 3 - \u003ca href=\"https://en.wikipedia.org/wiki/Little_Computer_3\"\u003ehttps://en.wikipedia.org/wiki/Little_Computer_3\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eLC3 Instruction Set Architecture - \u003ca href=\"https://winniewjeng.github.io/organization%20\u0026amp;%20programming/2020/06/09/Instruction-Set-Architecture/\"\u003ehttps://winniewjeng.github.io/organization%20\u0026%20programming/2020/06/09/Instruction-Set-Architecture/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eLC3 Machine Instruction - \u003ca href=\"https://winniewjeng.github.io/organization%20\u0026amp;%20programming/2020/06/08/LC3-Machine-Instruction/\"\u003ehttps://winniewjeng.github.io/organization%20\u0026%20programming/2020/06/08/LC3-Machine-Instruction/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhat is a spinlock? //Source Dive// 002 - \u003ca href=\"https://www.youtube.com/watch?v=ZE9OODanrDA\"\u003ehttps://www.youtube.com/watch?v=ZE9OODanrDA\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSign extension - \u003ca href=\"https://en.wikipedia.org/wiki/Sign_extension\"\u003ehttps://en.wikipedia.org/wiki/Sign_extension\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eUse your database to power state machines - \u003ca href=\"https://blog.lawrencejones.dev/state-machines/\"\u003ehttps://blog.lawrencejones.dev/state-machines/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eZooKeeper: Zab vs. Paxos - \u003ca href=\"https://cwiki.apache.org/confluence/display/ZOOKEEPER/Zab\u0026#43;vs.\u0026#43;Paxos\"\u003ehttps://cwiki.apache.org/confluence/display/ZOOKEEPER/Zab+vs.+Paxos\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eUniversity of Washington: Replicated State Machines Primary-Backup - \u003ca href=\"https://courses.cs.washington.edu/courses/cse552/19au/notes/lect3.pdf\"\u003ehttps://courses.cs.washington.edu/courses/cse552/19au/notes/lect3.pdf\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ePrinceton: Replication State Machines via Primary-Backup Replication - \u003ca href=\"https://www.cs.princeton.edu/courses/archive/spring22/cos418/docs/L11-rsm-pb.pdf\"\u003ehttps://www.cs.princeton.edu/courses/archive/spring22/cos418/docs/L11-rsm-pb.pdf\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMIT 6.824: Lecture 4: Primary-Backup Replication - \u003ca href=\"https://www.youtube.com/watch?v=M_teob23ZzY\"\u003ehttps://www.youtube.com/watch?v=M_teob23ZzY\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eLarge Language Models from scratch - \u003ca href=\"https://www.youtube.com/watch?v=lnA9DMvHtfI\"\u003ehttps://www.youtube.com/watch?v=lnA9DMvHtfI\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eLarge Language Models: Part 2 - \u003ca href=\"https://www.youtube.com/watch?v=YDiSFS-yHwk\"\u003ehttps://www.youtube.com/watch?v=YDiSFS-yHwk\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSearching by location in MySQL - \u003ca href=\"https://www.youtube.com/watch?v=QgnCB8X_sN4\"\u003ehttps://www.youtube.com/watch?v=QgnCB8X_sN4\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ewhy do header files even exist? - \u003ca href=\"https://www.youtube.com/watch?v=tOQZlD-0Scc\"\u003ehttps://www.youtube.com/watch?v=tOQZlD-0Scc\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAlternative to the Outbox Pattern? Not so fast. - \u003ca href=\"https://www.youtube.com/watch?v=cuQ9zuNF1cI\"\u003ehttps://www.youtube.com/watch?v=cuQ9zuNF1cI\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eContainer Loading in AWS Lambda - \u003ca href=\"https://brooker.co.za/blog/2023/05/23/snapshot-loading.html\"\u003ehttps://brooker.co.za/blog/2023/05/23/snapshot-loading.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eJDK 21 LTS - All Features Explained! - \u003ca href=\"https://www.youtube.com/watch?v=bgxuSIhkQZg\"\u003ehttps://www.youtube.com/watch?v=bgxuSIhkQZg\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e4x shorter WebGPU access from Wasm, featuring Nelua, Zig, \u0026amp; Rust - \u003ca href=\"https://www.youtube.com/watch?v=I-tN3dS2zwA\"\u003ehttps://www.youtube.com/watch?v=I-tN3dS2zwA\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eFixing For Loops in Go 1.22 - \u003ca href=\"https://go.dev/blog/loopvar-preview\"\u003ehttps://go.dev/blog/loopvar-preview\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAnother way to check pointers at runtime in C - \u003ca href=\"https://www.youtube.com/watch?v=xCxI2GIFdZo\"\u003ehttps://www.youtube.com/watch?v=xCxI2GIFdZo\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eRabbitMQ vs. Kafka – An Architect’s Dilemma (Part 1) - \u003ca href=\"https://eranstiller.com/rabbitmq-vs-kafka-an-architects-dilemma-part-1\"\u003ehttps://eranstiller.com/rabbitmq-vs-kafka-an-architects-dilemma-part-1\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eRabbitMQ vs. Kafka – An Architect’s Dilemma (Part 2) - \u003ca href=\"https://eranstiller.com/rabbitmq-vs-kafka-an-architects-dilemma-part-2\"\u003ehttps://eranstiller.com/rabbitmq-vs-kafka-an-architects-dilemma-part-2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e295 - LOCK otimista no CASO DE USO | theWiseDev CleanArch - \u003ca href=\"https://www.youtube.com/watch?v=e6cxVjv5rN0\"\u003ehttps://www.youtube.com/watch?v=e6cxVjv5rN0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTransactions: Write skew \u0026amp; why we need serialization? - \u003ca href=\"https://distributed-computing-musings.com/2022/02/transactions-write-skew-why-we-need-serialization/\"\u003ehttps://distributed-computing-musings.com/2022/02/transactions-write-skew-why-we-need-serialization/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTransactions: Introduction to serializability techniques - \u003ca href=\"https://distributed-computing-musings.com/2022/02/transactions-introduction-to-serializability-techniques/\"\u003ehttps://distributed-computing-musings.com/2022/02/transactions-introduction-to-serializability-techniques/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTransactions: Two-phase Locking - \u003ca href=\"https://distributed-computing-musings.com/2022/02/transactions-two-phase-locking/\"\u003ehttps://distributed-computing-musings.com/2022/02/transactions-two-phase-locking/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTransactions: Serializable Snapshot Isolation - \u003ca href=\"https://distributed-computing-musings.com/2022/02/transactions-serializable-snapshot-isolation/\"\u003ehttps://distributed-computing-musings.com/2022/02/transactions-serializable-snapshot-isolation/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eBest Developer Interview Question - \u003ca href=\"https://www.youtube.com/watch?v=h1w4X3CmRH4\"\u003ehttps://www.youtube.com/watch?v=h1w4X3CmRH4\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow to create an alert rule in Grafana 10.1 - \u003ca href=\"https://www.youtube.com/watch?v=nPdzomH6bno\"\u003ehttps://www.youtube.com/watch?v=nPdzomH6bno\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eNew flame graph features for continuous profiling data in Grafana 10.1 - \u003ca href=\"https://www.youtube.com/watch?v=bezFLhbzDOM\"\u003ehttps://www.youtube.com/watch?v=bezFLhbzDOM\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow to to filter trace spans in Grafana 10.1 - \u003ca href=\"https://www.youtube.com/watch?v=VP2XV3IIc80\"\u003ehttps://www.youtube.com/watch?v=VP2XV3IIc80\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eGrafana 10.1: TraceQL query results streaming - \u003ca href=\"https://www.youtube.com/watch?v=7BRapaDM_2c\"\u003ehttps://www.youtube.com/watch?v=7BRapaDM_2c\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eUnderstand Paxos with Rust, Automerge, and TLA+ — Part 1: The Synod. - \u003ca href=\"https://medium.com/@polyglot_factotum/understand-paxos-with-rust-automerge-and-tla-part-1-the-synod-371df5f16f45\"\u003ehttps://medium.com/@polyglot_factotum/understand-paxos-with-rust-automerge-and-tla-part-1-the-synod-371df5f16f45\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eLoki Log Context Query Editor in Grafana 10 - \u003ca href=\"https://www.youtube.com/watch?v=t6SG-w_bVss\"\u003ehttps://www.youtube.com/watch?v=t6SG-w_bVss\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhat is Podman? How is it Different Than Docker? - \u003ca href=\"https://www.youtube.com/watch?v=5WML8gX2F1c\"\u003ehttps://www.youtube.com/watch?v=5WML8gX2F1c\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eRelational Databases vs Time Series Databases - \u003ca href=\"https://www.influxdata.com/blog/relational-databases-vs-time-series-databases/\"\u003ehttps://www.influxdata.com/blog/relational-databases-vs-time-series-databases/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eLinux network ring buffers - \u003ca href=\"https://medium.com/coccoc-engineering-blog/linux-network-ring-buffers-cea7ead0b8e8\"\u003ehttps://medium.com/coccoc-engineering-blog/linux-network-ring-buffers-cea7ead0b8e8\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow do databases execute expressions? - \u003ca href=\"https://notes.eatonphil.com/2023-09-21-how-do-databases-execute-expressions.html\"\u003ehttps://notes.eatonphil.com/2023-09-21-how-do-databases-execute-expressions.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eRustonomicon: Poisoning - \u003ca href=\"https://doc.rust-lang.org/nomicon/poisoning.html\"\u003ehttps://doc.rust-lang.org/nomicon/poisoning.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMake Kubernetes and Platform Engineering Easier Part 2 Monitoring and Observability - \u003ca href=\"https://www.youtube.com/watch?v=RjtT1Q7DpmQ\"\u003ehttps://www.youtube.com/watch?v=RjtT1Q7DpmQ\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMake Kubernetes and Platform Engineering Easier Part 4: Application Workflows - \u003ca href=\"https://www.youtube.com/watch?v=YPuAAS3lba8\"\u003ehttps://www.youtube.com/watch?v=YPuAAS3lba8\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eORMs can lead to FAT domain models. Slim them down! - \u003ca href=\"https://www.youtube.com/watch?v=4UZXUc9jmHc\"\u003ehttps://www.youtube.com/watch?v=4UZXUc9jmHc\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAdding Nested Loops Makes this Algorithm 120x FASTER? - \u003ca href=\"https://www.youtube.com/watch?v=QGYvbsHDPxo\"\u003ehttps://www.youtube.com/watch?v=QGYvbsHDPxo\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMark Zuckerberg: First Interview in the Metaverse | Lex Fridman Podcast #398 - \u003ca href=\"https://www.youtube.com/watch?v=MVYrJJNdrEg\"\u003ehttps://www.youtube.com/watch?v=MVYrJJNdrEg\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eFaster database indexes (straight from the docs) - \u003ca href=\"https://www.youtube.com/watch?v=5aezDBaNfcc\"\u003ehttps://www.youtube.com/watch?v=5aezDBaNfcc\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eContainerization Strategy - \u003ca href=\"https://www.youtube.com/watch?v=iLyBEEkm5e0\"\u003ehttps://www.youtube.com/watch?v=iLyBEEkm5e0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ewhy do void pointers even exist? - \u003ca href=\"https://www.youtube.com/watch?v=t7CUti_7d7c\"\u003ehttps://www.youtube.com/watch?v=t7CUti_7d7c\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe Pros and Cons of Encrypted Client Hello - \u003ca href=\"https://www.youtube.com/watch?v=1ezrBsJCVqw\"\u003ehttps://www.youtube.com/watch?v=1ezrBsJCVqw\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhy Do You Only Get Motivated After Midnight? | Night Owls - \u003ca href=\"https://www.youtube.com/watch?v=jiIhOgpOWcA\"\u003ehttps://www.youtube.com/watch?v=jiIhOgpOWcA\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhy You Should Be Ashamed Of Yourself - \u003ca href=\"https://www.youtube.com/watch?v=COHThDr1uvg\"\u003ehttps://www.youtube.com/watch?v=COHThDr1uvg\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eServer Name Indication (SNI) TLS Extension Explained - \u003ca href=\"https://www.youtube.com/watch?v=manTiXESYG0\"\u003ehttps://www.youtube.com/watch?v=manTiXESYG0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e50 years later, is Two-Phase Locking the best we can do? - concurrencyfreaks.blogspot.com/2023/09/50-years-later-is-two-phase-locking.html\u003c/li\u003e\n\u003c/ul\u003e","title":"Reading list September 2023"},{"content":"The list of things I read or watched this month Aplicação do Open Closed Principle: Exemplo prático com metaprogramação mais polimorfismo - https://www.youtube.com/watch?v=-gOR0WXZmYg Firecracker: Lightweight Virtualization for Serverless Applications - https://www.usenix.org/system/files/nsdi20-paper-agache.pdf SEC02-BP02 Use temporary credentials - https://docs.aws.amazon.com/wellarchitected/latest/framework/sec_identities_unique.html 5 Tips for Building Resilient Architecture - https://www.youtube.com/watch?v=gm6Y4vPlOLg Containers at the edge: it’s not what you think, or maybe it is - https://blog.cloudflare.com/containers-on-the-edge/ What is a Point of Presence (PoP) in networking? - https://rahi.io/articles/what-is-a-point-of-presence-pop-in-networking/ A Programmer-Friendly I/O Abstraction Over io_uring and kqueue - https://tigerbeetle.com/blog/a-friendly-abstraction-over-iouring-and-kqueue/ Intrusive linked lists - https://www.data-structures-in-practice.com/intrusive-linked-lists/ Case Study: TigerBeetle Simulator (VOPR) - https://github.com/LAC-Tech/laterbase/blob/master/deterministic_simulation_testing.md Dependency Injection, The Best Pattern - https://www.youtube.com/watch?v=J1f5b4vcxCQ How to Add AI to Your Apps Faster with Embedded AI - https://www.youtube.com/watch?v=OThahaOga20 Why Google and Meta Put Billion Lines of Code In 1 Repository? - https://www.youtube.com/watch?v=x3cANGNPyx0 Cybersecurity Architecture: Response - https://www.youtube.com/watch?v=Jk79QJCxPkM What happens before the Backend gets the Request - https://www.youtube.com/watch?v=gSQoA4SYhJY Torturing Postgres: extreme autonomous testing for distributed architectures - https://medium.com/@thinkx_/torturing-postgres-extreme-autonomous-testing-for-distributed-architectures-e1c4139ed72e FoundationDB or: How I Learned to Stop Worrying and Trust the Database (Markus Pilman, Snowflake) - https://www.youtube.com/watch?v=OJb8A6h9jQQ Autonomous Testing and the Future of Software Development - Will Wilson - https://www.youtube.com/watch?v=fFSPwJFXVlw How does the Kernel manage backend Connections? - https://www.youtube.com/watch?v=Mc7hAjgFBvY Let’s implement a basic leader election algorithm using Go with RPC - https://itnext.io/lets-implement-a-basic-leader-election-algorithm-using-go-with-rpc-6cd012515358 Pattern: 3rd Party Registration - https://microservices.io/patterns/3rd-party-registration.html Let\u0026rsquo;s implement basic service discovery using Go - https://itnext.io/lets-implement-basic-service-discovery-using-go-d91c513883f6 Most Common Kubernetes Deployment Strategies (Examples \u0026amp; Code) - https://www.youtube.com/watch?v=lxc4EXZOOvE As HashiCorp adopts the BSL, an era of open-source software might be ending - https://www.runtime.news/as-hashicorp-adopts-the-bsl-an-era-of-open-source-software-might-be-ending/ Configure Grafana private data source connect - https://grafana.com/docs/grafana-cloud/connect-externally-hosted/configure-private-datasource-connect/ Circuit-level gateway - https://en.wikipedia.org/wiki/Circuit-level_gateway Dynamic Reverse Tunnels in SSH - https://blog.benpri.me/blog/2019/05/25/dynamic-reverse-tunnels-in-ssh/ SOCKS5 Proxies Explained - https://www.youtube.com/watch?v=EfOjTkFR1iw Git MERGE vs REBASE: Everything You Need to Know - https://www.youtube.com/watch?v=0chZFIZLR_0 Database Replication Explained (in 5 Minutes) - https://www.youtube.com/watch?v=bI8Ry6GhMSE Database Replication Explained - https://towardsdatascience.com/database-replication-explained-5c76a200d8f3 Fundamentals of Neural Networks - https://wandb.ai/site/articles/fundamentals-of-neural-networks Gradient Descent: All You Need to Know - https://hackernoon.com/gradient-descent-aynk-7cbe95a778da Apriori — Association Rule Mining In-depth Explanation and Python Implementation - https://towardsdatascience.com/apriori-association-rule-mining-explanation-and-python-implementation-290b42afdfc6 is it wrong to use numbers in your code? (low level code review) - https://www.youtube.com/watch?v=cjarxeW9_Wo Storing money in MySQL (the right way) - https://www.youtube.com/watch?v=fhwEFZ34c7g SOCKS - https://en.wikipedia.org/wiki/SOCKS SOCKS 5 — A Proxy Protocol - https://medium.com/@nimit95/socks-5-a-proxy-protocol-b741d3bec66c Backward Compatibility, Go 1.21, and Go 2 - https://go.dev/blog/compat Containers at the Edge - https://www.youtube.com/watch?v=LBx56Q10G3Q How a startup loses its spark - https://blog.johnqian.com/startup-spark The Bitter Lesson - www.incompleteideas.net/IncIdeas/BitterLesson.html Kubernetes and Platform Engineering Part 1: k8s Operators - https://www.youtube.com/watch?v=1i9C-QWQUE8 294 - Concorrência na CLEAN ARCHITECTURE | theWiseDev NFR - https://www.youtube.com/watch?v=QEJUAInPKjw Your CPU May be FASTER than You Think - https://www.youtube.com/watch?v=WgTr79htuM4 A Real World Project Use Case Of Golang\u0026rsquo;s Sync.WaitGroup - https://www.youtube.com/watch?v=96scGqEV0pc Why we use the Linux kernel\u0026rsquo;s TCP stack - https://blog.cloudflare.com/why-we-use-the-linux-kernels-tcp-stack/ Cloud Computing without Containers - https://blog.cloudflare.com/cloud-computing-without-containers/ Career advice for young system programmers - https://glaubercosta-11125.medium.com/career-advice-for-young-system-programmers-c7443f2d3edf Distributed Transactions at Scale in Amazon DynamoDB - https://muratbuffalo.blogspot.com/2023/08/distributed-transactions-at-scale-in.html DynamoDB\u0026rsquo;s Best Feature: Predictability - https://brooker.co.za/blog/2022/01/19/predictability.html Why do we use the Linux kernel\u0026rsquo;s TCP stack? - jvns.ca/blog/2016/06/30/why-do-we-use-the-linux-kernels-tcp-stack/ Top 6 Load Balancing Algorithms Every Developer Should Know - https://www.youtube.com/watch?v=dBmxNsS3BGE Understanding Transaction Isolation in DynamoDB: From Concepts to Conflicts - https://blog.calvinsd.in/understanding-transaction-isolation-in-dynamodb Timestamp-based Algorithms for Concurrency Control in Distributed Database Systems - https://muratbuffalo.blogspot.com/2022/11/timestamp-based-algorithms-for.html Fantastic Learning Resources - https://matklad.github.io/2023/08/06/fantastic-learning-resources.html CONSENSUS: BRIDGING THEORY AND PRACTICE - https://web.stanford.edu/~ouster/cgi-bin/papers/OngaroPhD.pdf Viewstamped Replication Made Famous - Joran Greef - https://www.youtube.com/watch?v=qeWyc8G-lq4 Revisiting Viewstamped Replication with Brian Oki and James Cowling - https://www.youtube.com/watch?v=ps106zjmjhw How To Identify File Types - File Format Analysis Tools - https://www.youtube.com/watch?v=xwpNYpFRLf0 Kubernetes Canary Deployment (Manual vs Automated) - https://www.youtube.com/watch?v=fWe6k4MmeSg What is gained and lost with 63-bit integers? - https://blog.janestreet.com/what-is-gained-and-lost-with-63-bit-integers/ What Rust Discovered - https://www.youtube.com/watch?v=v6RxJsk8otY Starting my own hobby language (again) - https://www.youtube.com/watch?v=2bvltIjqrRg The Dark Side of .reserve() - https://www.youtube.com/watch?v=algDLvbl1YY Stop using COUNT(id) to count rows - https://www.youtube.com/watch?v=H6juZ8c_Nu8 Tooling for Tooling - https://uptointerpretation.com/posts/tooling-for-tooling/ Solutions Architect Interview - How Do CDNs Work? (with Salesforce SA) - https://www.youtube.com/watch?v=j9KT9geE5SU Your CPU May be FASTER than You Think - https://www.youtube.com/watch?v=WgTr79htuM4 Kubernetes and Platform Engineering Part 2: Cluster API - https://www.youtube.com/watch?v=K1fGoWCoeSs Data Consistency Between Microservices - https://www.youtube.com/watch?v=uKURpE12Mgo Viewstamped Replication explained - https://blog.brunobonacci.com/2018/07/15/viewstamped-replication-explained/ A Proxy Protocol - https://medium.com/@nimit95/socks-5-a-proxy-protocol-b741d3bec66c So Long, Twitter and Reddit - https://andrewkelley.me/post/goodbye-twitter-reddit.html Getting into formal specification, and getting my team into it too - https://brooker.co.za/blog/2022/07/29/getting-into-tla.html Simple Simulations for System Builders - https://brooker.co.za/blog/2022/04/11/simulation.html Stateful Property Testing in Rust - https://blog.readyset.io/stateful-property-testing-in-rust Exactly-Once Semantics Are Possible: Here’s How Kafka Does It - https://www.confluent.io/blog/exactly-once-semantics-are-possible-heres-how-apache-kafka-does-it/ Viewstamped Replication: The Less-Famous Consensus Protocol - https://brooker.co.za/blog/2014/05/19/vr.html Everything You Always Wanted To Know About fsync() - https://blog.httrack.com/blog/2013/11/15/everything-you-always-wanted-to-know-about-fsync/ Why we built Restate - https://www.restate.dev/blog/why-we-built-restate/ EC2 Enhanced Networking Tutorial - https://www.youtube.com/watch?v=DsNEtIS_q_E Top 5 Most Used Architecture Patterns - https://www.youtube.com/watch?v=f6zXyq4VPP8 Want to build a good API? Here\u0026rsquo;s 5 Tips for API Design. - https://www.youtube.com/watch?v=HBH6qnj0trU 5 Strong Opinions On Everyday Rust - https://www.youtube.com/watch?v=8j_FbjiowvE Durable Objects: Easy, Fast, Correct — Choose three - https://blog.cloudflare.com/durable-objects-easy-fast-correct-choose-three/ Serverless Workflows with Durable Functions and Netherite - https://arxiv.org/pdf/2103.00033.pdf \u0026ldquo;Formal Modeling and Analysis of Distributed Systems\u0026rdquo; by Ankush Desai (Strange Loop 2022) - https://www.youtube.com/watch?v=5YjsSDDWFDY The Time Traveler\u0026rsquo;s Guide to Distributed Applications - https://qianli.dev/blog/timetravel Kubernetes and Platform Engineering Part 3: Crossplane - https://www.youtube.com/watch?v=CPjAiYSoBRE Emulation Fundamentals - Writing A Basic x86 Emulator - https://www.youtube.com/watch?v=HPrqOIdNlrQ ","permalink":"https://poorlydefinedbehaviour.github.io/posts/reading_list_august_2023/","summary":"\u003ch2 id=\"the-list-of-things-i-read-or-watched-this-month\"\u003eThe list of things I read or watched this month\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eAplicação do Open Closed Principle: Exemplo prático com metaprogramação mais polimorfismo - \u003ca href=\"https://www.youtube.com/watch?v=-gOR0WXZmYg\"\u003ehttps://www.youtube.com/watch?v=-gOR0WXZmYg\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eFirecracker: Lightweight Virtualization for Serverless Applications - \u003ca href=\"https://www.usenix.org/system/files/nsdi20-paper-agache.pdf\"\u003ehttps://www.usenix.org/system/files/nsdi20-paper-agache.pdf\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSEC02-BP02 Use temporary credentials - \u003ca href=\"https://docs.aws.amazon.com/wellarchitected/latest/framework/sec_identities_unique.html\"\u003ehttps://docs.aws.amazon.com/wellarchitected/latest/framework/sec_identities_unique.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e5 Tips for Building Resilient Architecture - \u003ca href=\"https://www.youtube.com/watch?v=gm6Y4vPlOLg\"\u003ehttps://www.youtube.com/watch?v=gm6Y4vPlOLg\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eContainers at the edge: it’s not what you think, or maybe it is - \u003ca href=\"https://blog.cloudflare.com/containers-on-the-edge/\"\u003ehttps://blog.cloudflare.com/containers-on-the-edge/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhat is a Point of Presence (PoP) in networking? - \u003ca href=\"https://rahi.io/articles/what-is-a-point-of-presence-pop-in-networking/\"\u003ehttps://rahi.io/articles/what-is-a-point-of-presence-pop-in-networking/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eA Programmer-Friendly I/O Abstraction Over io_uring and kqueue - \u003ca href=\"https://tigerbeetle.com/blog/a-friendly-abstraction-over-iouring-and-kqueue/\"\u003ehttps://tigerbeetle.com/blog/a-friendly-abstraction-over-iouring-and-kqueue/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eIntrusive linked lists - \u003ca href=\"https://www.data-structures-in-practice.com/intrusive-linked-lists/\"\u003ehttps://www.data-structures-in-practice.com/intrusive-linked-lists/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eCase Study: TigerBeetle Simulator (VOPR) - \u003ca href=\"https://github.com/LAC-Tech/laterbase/blob/master/deterministic_simulation_testing.md\"\u003ehttps://github.com/LAC-Tech/laterbase/blob/master/deterministic_simulation_testing.md\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDependency Injection, The Best Pattern - \u003ca href=\"https://www.youtube.com/watch?v=J1f5b4vcxCQ\"\u003ehttps://www.youtube.com/watch?v=J1f5b4vcxCQ\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow to Add AI to Your Apps Faster with Embedded AI - \u003ca href=\"https://www.youtube.com/watch?v=OThahaOga20\"\u003ehttps://www.youtube.com/watch?v=OThahaOga20\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhy Google and Meta Put Billion Lines of Code In 1 Repository? - \u003ca href=\"https://www.youtube.com/watch?v=x3cANGNPyx0\"\u003ehttps://www.youtube.com/watch?v=x3cANGNPyx0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eCybersecurity Architecture: Response - \u003ca href=\"https://www.youtube.com/watch?v=Jk79QJCxPkM\"\u003ehttps://www.youtube.com/watch?v=Jk79QJCxPkM\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhat happens before the Backend gets the Request - \u003ca href=\"https://www.youtube.com/watch?v=gSQoA4SYhJY\"\u003ehttps://www.youtube.com/watch?v=gSQoA4SYhJY\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTorturing Postgres: extreme autonomous testing for distributed architectures - \u003ca href=\"https://medium.com/@thinkx_/torturing-postgres-extreme-autonomous-testing-for-distributed-architectures-e1c4139ed72e\"\u003ehttps://medium.com/@thinkx_/torturing-postgres-extreme-autonomous-testing-for-distributed-architectures-e1c4139ed72e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eFoundationDB or: How I Learned to Stop Worrying and Trust the Database (Markus Pilman, Snowflake) - \u003ca href=\"https://www.youtube.com/watch?v=OJb8A6h9jQQ\"\u003ehttps://www.youtube.com/watch?v=OJb8A6h9jQQ\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAutonomous Testing and the Future of Software Development - Will Wilson - \u003ca href=\"https://www.youtube.com/watch?v=fFSPwJFXVlw\"\u003ehttps://www.youtube.com/watch?v=fFSPwJFXVlw\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow does the Kernel manage backend Connections? - \u003ca href=\"https://www.youtube.com/watch?v=Mc7hAjgFBvY\"\u003ehttps://www.youtube.com/watch?v=Mc7hAjgFBvY\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eLet’s implement a basic leader election algorithm using Go with RPC - \u003ca href=\"https://itnext.io/lets-implement-a-basic-leader-election-algorithm-using-go-with-rpc-6cd012515358\"\u003ehttps://itnext.io/lets-implement-a-basic-leader-election-algorithm-using-go-with-rpc-6cd012515358\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ePattern: 3rd Party Registration - \u003ca href=\"https://microservices.io/patterns/3rd-party-registration.html\"\u003ehttps://microservices.io/patterns/3rd-party-registration.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eLet\u0026rsquo;s implement basic service discovery using Go - \u003ca href=\"https://itnext.io/lets-implement-basic-service-discovery-using-go-d91c513883f6\"\u003ehttps://itnext.io/lets-implement-basic-service-discovery-using-go-d91c513883f6\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMost Common Kubernetes Deployment Strategies (Examples \u0026amp; Code) - \u003ca href=\"https://www.youtube.com/watch?v=lxc4EXZOOvE\"\u003ehttps://www.youtube.com/watch?v=lxc4EXZOOvE\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAs HashiCorp adopts the BSL, an era of open-source software might be ending - \u003ca href=\"https://www.runtime.news/as-hashicorp-adopts-the-bsl-an-era-of-open-source-software-might-be-ending/\"\u003ehttps://www.runtime.news/as-hashicorp-adopts-the-bsl-an-era-of-open-source-software-might-be-ending/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eConfigure Grafana private data source connect - \u003ca href=\"https://grafana.com/docs/grafana-cloud/connect-externally-hosted/configure-private-datasource-connect/\"\u003ehttps://grafana.com/docs/grafana-cloud/connect-externally-hosted/configure-private-datasource-connect/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eCircuit-level gateway - \u003ca href=\"https://en.wikipedia.org/wiki/Circuit-level_gateway\"\u003ehttps://en.wikipedia.org/wiki/Circuit-level_gateway\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDynamic Reverse Tunnels in SSH - \u003ca href=\"https://blog.benpri.me/blog/2019/05/25/dynamic-reverse-tunnels-in-ssh/\"\u003ehttps://blog.benpri.me/blog/2019/05/25/dynamic-reverse-tunnels-in-ssh/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSOCKS5 Proxies Explained - \u003ca href=\"https://www.youtube.com/watch?v=EfOjTkFR1iw\"\u003ehttps://www.youtube.com/watch?v=EfOjTkFR1iw\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eGit MERGE vs REBASE: Everything You Need to Know - \u003ca href=\"https://www.youtube.com/watch?v=0chZFIZLR_0\"\u003ehttps://www.youtube.com/watch?v=0chZFIZLR_0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDatabase Replication Explained (in 5 Minutes) - \u003ca href=\"https://www.youtube.com/watch?v=bI8Ry6GhMSE\"\u003ehttps://www.youtube.com/watch?v=bI8Ry6GhMSE\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDatabase Replication Explained - \u003ca href=\"https://towardsdatascience.com/database-replication-explained-5c76a200d8f3\"\u003ehttps://towardsdatascience.com/database-replication-explained-5c76a200d8f3\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eFundamentals of Neural Networks - \u003ca href=\"https://wandb.ai/site/articles/fundamentals-of-neural-networks\"\u003ehttps://wandb.ai/site/articles/fundamentals-of-neural-networks\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eGradient Descent: All You Need to Know - \u003ca href=\"https://hackernoon.com/gradient-descent-aynk-7cbe95a778da\"\u003ehttps://hackernoon.com/gradient-descent-aynk-7cbe95a778da\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eApriori — Association Rule Mining In-depth Explanation and Python Implementation - \u003ca href=\"https://towardsdatascience.com/apriori-association-rule-mining-explanation-and-python-implementation-290b42afdfc6\"\u003ehttps://towardsdatascience.com/apriori-association-rule-mining-explanation-and-python-implementation-290b42afdfc6\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eis it wrong to use numbers in your code? (low level code review) - \u003ca href=\"https://www.youtube.com/watch?v=cjarxeW9_Wo\"\u003ehttps://www.youtube.com/watch?v=cjarxeW9_Wo\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eStoring money in MySQL (the right way) - \u003ca href=\"https://www.youtube.com/watch?v=fhwEFZ34c7g\"\u003ehttps://www.youtube.com/watch?v=fhwEFZ34c7g\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSOCKS - \u003ca href=\"https://en.wikipedia.org/wiki/SOCKS\"\u003ehttps://en.wikipedia.org/wiki/SOCKS\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSOCKS 5 — A Proxy Protocol - \u003ca href=\"https://medium.com/@nimit95/socks-5-a-proxy-protocol-b741d3bec66c\"\u003ehttps://medium.com/@nimit95/socks-5-a-proxy-protocol-b741d3bec66c\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eBackward Compatibility, Go 1.21, and Go 2 - \u003ca href=\"https://go.dev/blog/compat\"\u003ehttps://go.dev/blog/compat\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eContainers at the Edge - \u003ca href=\"https://www.youtube.com/watch?v=LBx56Q10G3Q\"\u003ehttps://www.youtube.com/watch?v=LBx56Q10G3Q\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow a startup loses its spark - \u003ca href=\"https://blog.johnqian.com/startup-spark\"\u003ehttps://blog.johnqian.com/startup-spark\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe Bitter Lesson - \u003ca href=\"https://www.incompleteideas.net/IncIdeas/BitterLesson.html\"\u003ewww.incompleteideas.net/IncIdeas/BitterLesson.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eKubernetes and Platform Engineering Part 1: k8s Operators - \u003ca href=\"https://www.youtube.com/watch?v=1i9C-QWQUE8\"\u003ehttps://www.youtube.com/watch?v=1i9C-QWQUE8\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e294 - Concorrência na CLEAN ARCHITECTURE | theWiseDev NFR - \u003ca href=\"https://www.youtube.com/watch?v=QEJUAInPKjw\"\u003ehttps://www.youtube.com/watch?v=QEJUAInPKjw\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eYour CPU May be FASTER than You Think - \u003ca href=\"https://www.youtube.com/watch?v=WgTr79htuM4\"\u003ehttps://www.youtube.com/watch?v=WgTr79htuM4\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eA Real World Project Use Case Of Golang\u0026rsquo;s Sync.WaitGroup - \u003ca href=\"https://www.youtube.com/watch?v=96scGqEV0pc\"\u003ehttps://www.youtube.com/watch?v=96scGqEV0pc\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhy we use the Linux kernel\u0026rsquo;s TCP stack - \u003ca href=\"https://blog.cloudflare.com/why-we-use-the-linux-kernels-tcp-stack/\"\u003ehttps://blog.cloudflare.com/why-we-use-the-linux-kernels-tcp-stack/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eCloud Computing without Containers - \u003ca href=\"https://blog.cloudflare.com/cloud-computing-without-containers/\"\u003ehttps://blog.cloudflare.com/cloud-computing-without-containers/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eCareer advice for young system programmers - \u003ca href=\"https://glaubercosta-11125.medium.com/career-advice-for-young-system-programmers-c7443f2d3edf\"\u003ehttps://glaubercosta-11125.medium.com/career-advice-for-young-system-programmers-c7443f2d3edf\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDistributed Transactions at Scale in Amazon DynamoDB - \u003ca href=\"https://muratbuffalo.blogspot.com/2023/08/distributed-transactions-at-scale-in.html\"\u003ehttps://muratbuffalo.blogspot.com/2023/08/distributed-transactions-at-scale-in.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDynamoDB\u0026rsquo;s Best Feature: Predictability - \u003ca href=\"https://brooker.co.za/blog/2022/01/19/predictability.html\"\u003ehttps://brooker.co.za/blog/2022/01/19/predictability.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhy do we use the Linux kernel\u0026rsquo;s TCP stack? - jvns.ca/blog/2016/06/30/why-do-we-use-the-linux-kernels-tcp-stack/\u003c/li\u003e\n\u003cli\u003eTop 6 Load Balancing Algorithms Every Developer Should Know - \u003ca href=\"https://www.youtube.com/watch?v=dBmxNsS3BGE\"\u003ehttps://www.youtube.com/watch?v=dBmxNsS3BGE\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eUnderstanding Transaction Isolation in DynamoDB: From Concepts to Conflicts - \u003ca href=\"https://blog.calvinsd.in/understanding-transaction-isolation-in-dynamodb\"\u003ehttps://blog.calvinsd.in/understanding-transaction-isolation-in-dynamodb\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTimestamp-based Algorithms for Concurrency Control in Distributed Database Systems - \u003ca href=\"https://muratbuffalo.blogspot.com/2022/11/timestamp-based-algorithms-for.html\"\u003ehttps://muratbuffalo.blogspot.com/2022/11/timestamp-based-algorithms-for.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eFantastic Learning Resources - \u003ca href=\"https://matklad.github.io/2023/08/06/fantastic-learning-resources.html\"\u003ehttps://matklad.github.io/2023/08/06/fantastic-learning-resources.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eCONSENSUS: BRIDGING THEORY AND PRACTICE - \u003ca href=\"https://web.stanford.edu/~ouster/cgi-bin/papers/OngaroPhD.pdf\"\u003ehttps://web.stanford.edu/~ouster/cgi-bin/papers/OngaroPhD.pdf\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eViewstamped Replication Made Famous - Joran Greef - \u003ca href=\"https://www.youtube.com/watch?v=qeWyc8G-lq4\"\u003ehttps://www.youtube.com/watch?v=qeWyc8G-lq4\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eRevisiting Viewstamped Replication with Brian Oki and James Cowling - \u003ca href=\"https://www.youtube.com/watch?v=ps106zjmjhw\"\u003ehttps://www.youtube.com/watch?v=ps106zjmjhw\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow To Identify File Types - File Format Analysis Tools - \u003ca href=\"https://www.youtube.com/watch?v=xwpNYpFRLf0\"\u003ehttps://www.youtube.com/watch?v=xwpNYpFRLf0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eKubernetes Canary Deployment (Manual vs Automated) - \u003ca href=\"https://www.youtube.com/watch?v=fWe6k4MmeSg\"\u003ehttps://www.youtube.com/watch?v=fWe6k4MmeSg\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhat is gained and lost with 63-bit integers? - \u003ca href=\"https://blog.janestreet.com/what-is-gained-and-lost-with-63-bit-integers/\"\u003ehttps://blog.janestreet.com/what-is-gained-and-lost-with-63-bit-integers/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhat Rust Discovered - \u003ca href=\"https://www.youtube.com/watch?v=v6RxJsk8otY\"\u003ehttps://www.youtube.com/watch?v=v6RxJsk8otY\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eStarting my own hobby language (again) - \u003ca href=\"https://www.youtube.com/watch?v=2bvltIjqrRg\"\u003ehttps://www.youtube.com/watch?v=2bvltIjqrRg\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe Dark Side of .reserve() - \u003ca href=\"https://www.youtube.com/watch?v=algDLvbl1YY\"\u003ehttps://www.youtube.com/watch?v=algDLvbl1YY\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eStop using COUNT(id) to count rows - \u003ca href=\"https://www.youtube.com/watch?v=H6juZ8c_Nu8\"\u003ehttps://www.youtube.com/watch?v=H6juZ8c_Nu8\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTooling for Tooling - \u003ca href=\"https://uptointerpretation.com/posts/tooling-for-tooling/\"\u003ehttps://uptointerpretation.com/posts/tooling-for-tooling/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSolutions Architect Interview - How Do CDNs Work? (with Salesforce SA) - \u003ca href=\"https://www.youtube.com/watch?v=j9KT9geE5SU\"\u003ehttps://www.youtube.com/watch?v=j9KT9geE5SU\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eYour CPU May be FASTER than You Think - \u003ca href=\"https://www.youtube.com/watch?v=WgTr79htuM4\"\u003ehttps://www.youtube.com/watch?v=WgTr79htuM4\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eKubernetes and Platform Engineering Part 2: Cluster API - \u003ca href=\"https://www.youtube.com/watch?v=K1fGoWCoeSs\"\u003ehttps://www.youtube.com/watch?v=K1fGoWCoeSs\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eData Consistency Between Microservices - \u003ca href=\"https://www.youtube.com/watch?v=uKURpE12Mgo\"\u003ehttps://www.youtube.com/watch?v=uKURpE12Mgo\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eViewstamped Replication explained - \u003ca href=\"https://blog.brunobonacci.com/2018/07/15/viewstamped-replication-explained/\"\u003ehttps://blog.brunobonacci.com/2018/07/15/viewstamped-replication-explained/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eA Proxy Protocol - \u003ca href=\"https://medium.com/@nimit95/socks-5-a-proxy-protocol-b741d3bec66c\"\u003ehttps://medium.com/@nimit95/socks-5-a-proxy-protocol-b741d3bec66c\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSo Long, Twitter and Reddit - \u003ca href=\"https://andrewkelley.me/post/goodbye-twitter-reddit.html\"\u003ehttps://andrewkelley.me/post/goodbye-twitter-reddit.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eGetting into formal specification, and getting my team into it too - \u003ca href=\"https://brooker.co.za/blog/2022/07/29/getting-into-tla.html\"\u003ehttps://brooker.co.za/blog/2022/07/29/getting-into-tla.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSimple Simulations for System Builders - \u003ca href=\"https://brooker.co.za/blog/2022/04/11/simulation.html\"\u003ehttps://brooker.co.za/blog/2022/04/11/simulation.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eStateful Property Testing in Rust - \u003ca href=\"https://blog.readyset.io/stateful-property-testing-in-rust\"\u003ehttps://blog.readyset.io/stateful-property-testing-in-rust\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eExactly-Once Semantics Are Possible: Here’s How Kafka Does It - \u003ca href=\"https://www.confluent.io/blog/exactly-once-semantics-are-possible-heres-how-apache-kafka-does-it/\"\u003ehttps://www.confluent.io/blog/exactly-once-semantics-are-possible-heres-how-apache-kafka-does-it/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eViewstamped Replication: The Less-Famous Consensus Protocol - \u003ca href=\"https://brooker.co.za/blog/2014/05/19/vr.html\"\u003ehttps://brooker.co.za/blog/2014/05/19/vr.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eEverything You Always Wanted To Know About fsync() - \u003ca href=\"https://blog.httrack.com/blog/2013/11/15/everything-you-always-wanted-to-know-about-fsync/\"\u003ehttps://blog.httrack.com/blog/2013/11/15/everything-you-always-wanted-to-know-about-fsync/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhy we built Restate - \u003ca href=\"https://www.restate.dev/blog/why-we-built-restate/\"\u003ehttps://www.restate.dev/blog/why-we-built-restate/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eEC2 Enhanced Networking Tutorial - \u003ca href=\"https://www.youtube.com/watch?v=DsNEtIS_q_E\"\u003ehttps://www.youtube.com/watch?v=DsNEtIS_q_E\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTop 5 Most Used Architecture Patterns - \u003ca href=\"https://www.youtube.com/watch?v=f6zXyq4VPP8\"\u003ehttps://www.youtube.com/watch?v=f6zXyq4VPP8\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWant to build a good API? Here\u0026rsquo;s 5 Tips for API Design. - \u003ca href=\"https://www.youtube.com/watch?v=HBH6qnj0trU\"\u003ehttps://www.youtube.com/watch?v=HBH6qnj0trU\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e5 Strong Opinions On Everyday Rust - \u003ca href=\"https://www.youtube.com/watch?v=8j_FbjiowvE\"\u003ehttps://www.youtube.com/watch?v=8j_FbjiowvE\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDurable Objects: Easy, Fast, Correct — Choose three - \u003ca href=\"https://blog.cloudflare.com/durable-objects-easy-fast-correct-choose-three/\"\u003ehttps://blog.cloudflare.com/durable-objects-easy-fast-correct-choose-three/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eServerless Workflows with Durable Functions and Netherite - \u003ca href=\"https://arxiv.org/pdf/2103.00033.pdf\"\u003ehttps://arxiv.org/pdf/2103.00033.pdf\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u0026ldquo;Formal Modeling and Analysis of Distributed Systems\u0026rdquo; by Ankush Desai (Strange Loop 2022) - \u003ca href=\"https://www.youtube.com/watch?v=5YjsSDDWFDY\"\u003ehttps://www.youtube.com/watch?v=5YjsSDDWFDY\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe Time Traveler\u0026rsquo;s Guide to Distributed Applications - \u003ca href=\"https://qianli.dev/blog/timetravel\"\u003ehttps://qianli.dev/blog/timetravel\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eKubernetes and Platform Engineering Part 3: Crossplane - \u003ca href=\"https://www.youtube.com/watch?v=CPjAiYSoBRE\"\u003ehttps://www.youtube.com/watch?v=CPjAiYSoBRE\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eEmulation Fundamentals - Writing A Basic x86 Emulator - \u003ca href=\"https://www.youtube.com/watch?v=HPrqOIdNlrQ\"\u003ehttps://www.youtube.com/watch?v=HPrqOIdNlrQ\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","title":"Reading list August 2023"},{"content":"An alphabet is any set of finite symbols such as a and b. For example, the alphabet Σ = {a, b} is an alphabet that contains the strings that can be built by combining a and b and the alphabet Σ = {0, 1} is the an alphabet that contains the strings that can be built by combining 0 and 1.\nSymbols such as a and b put together to form something like bbaa are called strings.\nbbaa is a string built from the symbols a and b\nAlphabets and symbols can be used to create a language which is a set of strings over some fixed alphabet.\nGiven the language L = x ∈ {0, 1}* | x starts_with(x, 10):\nS -\u0026gt; 1A A -\u0026gt; 10B B -\u0026gt; 10B | 1B | 0B | ε We can try to match a few strings:\n10 (Matches) S -\u0026gt; 1A A -\u0026gt; 10B B -\u0026gt; ε 01 (Doesn\u0026#39;t match) S -\u0026gt; No match 101 (Matches) S -\u0026gt; 1A A -\u0026gt; 10B B -\u0026gt; 1B B -\u0026gt; ε ε is the empty string and it is being used to stop the recursion.\nSome of this comes from one of the books I\u0026rsquo;m reading at the moment: FORMAL LANGUAGE: A PRACTICAL INTRODUCTION\n","permalink":"https://poorlydefinedbehaviour.github.io/posts/formal_languages_alphabet_strings_and_languages/","summary":"\u003cp\u003eAn \u003ccode\u003ealphabet\u003c/code\u003e is any set of finite symbols such as \u003ccode\u003ea\u003c/code\u003e and \u003ccode\u003eb\u003c/code\u003e. For example, the alphabet \u003ccode\u003eΣ = {a, b}\u003c/code\u003e is an alphabet that contains the \u003ccode\u003estrings\u003c/code\u003e that can be built by combining \u003ccode\u003ea\u003c/code\u003e and \u003ccode\u003eb\u003c/code\u003e and the alphabet \u003ccode\u003eΣ = {0, 1}\u003c/code\u003e is the an alphabet that contains the strings that can be built by combining \u003ccode\u003e0\u003c/code\u003e and \u003ccode\u003e1\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eSymbols such as \u003ccode\u003ea\u003c/code\u003e and \u003ccode\u003eb\u003c/code\u003e put together to form something like \u003ccode\u003ebbaa\u003c/code\u003e are called \u003ccode\u003estrings\u003c/code\u003e.\u003c/p\u003e","title":"Notes on formal languages: alphabets, strings and languages"},{"content":"Dagger is a programmable CI/CD engine that runs your pipelines inside containers1 which makes it easier to test things locally and to setup complex workflows. Not having to write yaml/bash/etc as the workflow gets more complex is a huge advantage for me.\nI\u0026rsquo;m working on a personal project that will allow people to deploy their code by selecting a GitHub repository. Me and a friend have decided to use Dagger to clone the user provided Git repository and build a Docker image and it was extremely easy to get it working.\npub async fn build(repo_url: \u0026amp;str, branch: \u0026amp;str, image: \u0026amp;str) -\u0026gt; Result\u0026lt;String\u0026gt; { let client = dagger_sdk::connect() .await .map_err(|err| anyhow!(\u0026#34;connecting to dagger: {}\u0026#34;, err.to_string()))?; let git_ref = client .git(repo_url) .branch(branch); let container_registry_secret = client.set_secret(\u0026#34;CONTAINER_REGISTRY_SECRET\u0026#34;, \u0026#34;TODO\u0026#34;); let registry_secret_id = container_registry_secret .id() .await .map_err(|err| anyhow!(\u0026#34;fetching secret id: {}\u0026#34;, err.to_string()))?; let directory_id = git_ref .tree() .id() .await .map_err(|err| anyhow!(\u0026#34;fetching git tree directory id: {}\u0026#34;, err.to_string()))?; let image_ref = client .container() .from(\u0026#34;node:20-alpine\u0026#34;) .with_directory(\u0026#34;/app\u0026#34;, directory_id) .with_workdir(\u0026#34;/app\u0026#34;) .with_exec(vec![\u0026#34;npm\u0026#34;, \u0026#34;install\u0026#34;, \u0026#34;--only=production\u0026#34;]) .with_entrypoint(vec![\u0026#34;npm\u0026#34;, \u0026#34;start\u0026#34;]) .with_registry_auth(\u0026#34;docker.io\u0026#34;, \u0026#34;poorlydefinedbehaviour\u0026#34;, registry_secret_id) .publish(image) .await .map_err(|err| anyhow!(\u0026#34;publishing container image: {}\u0026#34;, err.to_string()))?; info!(\u0026#34;pushed image to container registry: {image_ref}\u0026#34;); Ok(image) } The container building part will get more complex as we add more functionality and Dagger will certainly become more appreciated.\nSince we are dealing with user provided code, we cannot trust that the provided code will not try to break the system. We are planning to run containers that contain untrusted code inside sandboxes in Kubernetes using kata-containers and a virtual machine monitor like AWS\u0026rsquo;s Firecracker.\nhttps://docs.dagger.io/#what-is-dagger/\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://poorlydefinedbehaviour.github.io/posts/how_i_write_ci_pipelines_in_2023/","summary":"\u003cp\u003e\u003ca href=\"https://dagger.io/\"\u003eDagger\u003c/a\u003e is a programmable CI/CD engine that runs your pipelines inside containers\u003csup id=\"fnref:1\"\u003e\u003ca href=\"#fn:1\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e1\u003c/a\u003e\u003c/sup\u003e which makes it easier to test things locally and to setup complex workflows. Not having to write yaml/bash/etc as the workflow gets more complex is a huge advantage for me.\u003c/p\u003e\n\u003cp\u003eI\u0026rsquo;m working on a personal project that will allow people to deploy their code by selecting a \u003ca href=\"https://github.com/\"\u003eGitHub\u003c/a\u003e repository. Me and a friend have decided to use Dagger to clone the user provided \u003ca href=\"https://git-scm.com/\"\u003eGit\u003c/a\u003e repository and build a \u003ca href=\"https://www.docker.com/\"\u003eDocker\u003c/a\u003e image and it was extremely easy to get it working.\u003c/p\u003e","title":"How I write CI pipelines in 2023"},{"content":"The list of things I read or watched this month The right way to define a C function with no arguments - https://www.youtube.com/watch?v=VsRs0H4hXEE TREE-STRUCTURED CONCURRENCY — 2023-07-01 - https://blog.yoshuawuyts.com/tree-structured-concurrency/ Myths Programmers Believe about CPU Caches - https://software.rajivprab.com/2018/04/29/myths-programmers-believe-about-cpu-caches/ Eventual vs Strong Consistency in Distributed Databases - https://hackernoon.com/eventual-vs-strong-consistency-in-distributed-databases-282fdad37cf7 Accounting For Developers, Part I - https://www.moderntreasury.com/journal/accounting-for-developers-part-i Accounting For Developers, Part II - https://www.moderntreasury.com/journal/accounting-for-developers-part-ii Accounting for Developers Part III: Building a Lending Marketplace - https://www.moderntreasury.com/journal/accounting-for-developers-part-iii What is a Wire Transfer? - https://www.moderntreasury.com/learn/what-is-a-wire-transfer What is RTP? - https://www.moderntreasury.com/learn/what-is-rtp vTables for Game Hacking \u0026amp; VMT Hooking - https://www.youtube.com/watch?v=HfrBdf-hM28 API vs. Messaging — How to Choose Which One to Use? - https://betterprogramming.pub/api-vs-messaging-how-to-choose-which-one-to-use-d6634599d2bd Kubernetes Basics: Pods, Nodes, Containers, Deployments \u0026amp; Clusters - https://www.youtube.com/watch?v=6IPu3WU_M0o Are You Sure You Want to Use MMAP in Your Database Management System? - https://db.cs.cmu.edu/papers/2022/cidr2022-p13-crotty.pdf Content-based filtering \u0026amp; collaborative filtering (Building recommendation systems with TensorFlow) - https://www.youtube.com/watch?v=v90un9ALRzw What are Business Rules? It\u0026rsquo;s not this. - https://www.youtube.com/watch?v=FbYcIqVmGRk Demystifying the Unusual Evolution of the Netflix API Architecture - https://www.youtube.com/watch?v=Uu32ggF-DWg A Gentle Introduction to Linear Algebra - https://machinelearningmastery.com/gentle-introduction-linear-algebra/ Introduction to Amazon Personalize - https://www.youtube.com/watch?v=3gJmhoLaLIo Understanding your Data with Amazon Personalize - https://www.youtube.com/watch?v=TEioktJD1GE Solving Real World Use Cases with Amazon Personalize - https://www.youtube.com/watch?v=9N7s_dVVWBE how do computers create code? - https://www.youtube.com/watch?v=2y1IgW2T8bo What if writing tests was a joyful experience - https://blog.janestreet.com/the-joy-of-expect-tests/ Quickcheck for Core - https://blog.janestreet.com/quickcheck-for-core/ Basics of Mathematical Notation for Machine Learning - https://machinelearningmastery.com/basics-mathematical-notation-machine-learning/ A Real Use Case of Goroutines With Package Context In Golang - https://www.youtube.com/watch?v=5QyxqhLnKmM Engineering Intensity - https://ruiper.es/posts/engineering_intensity/ Implementing a Transactional Outbox Pattern with DynamoDB Streams to Avoid 2-phase Commits - https://medium.com/ssense-tech/implementing-a-transactional-outbox-pattern-with-dynamodb-streams-to-avoid-2-phase-commits-ed0f91e69e9 StatQuest: K-nearest neighbors, Clearly Explained - https://www.youtube.com/watch?v=HVXime0nQeI BRIDGING FUZZING AND PROPERTY TESTING — 2023-07-10 - https://blog.yoshuawuyts.com/bridging-fuzzing-and-property-testing/ 289 - CONFIABILIDADE \u0026amp; ESCALABILIDADE em aplicações com uso intensivo de DADOS | theWiseDev NFR - https://www.youtube.com/watch?v=EXwJwwOJ1UY Why ScyllaDB is Moving to a New Replication Algorithm: Tablets - https://www.scylladb.com/2023/07/10/why-scylladb-is-moving-to-a-new-replication-algorithm-tablets/ A problem so hard even Google relies on Random Chance - https://www.youtube.com/watch?v=lJYufx0bfpw Are You Sure You Want to Use MMAP in Your Database Management System? - https://www.youtube.com/watch?v=1BRGU_AS25c Digital Wallet - https://www.moderntreasury.com/learn/digital-wallet What is ACH? - https://www.moderntreasury.com/learn/what-is-ach How simple can a programming language be? - https://www.youtube.com/watch?v=Fg5En6pbsDA Kubernetes Deployment vs. StatefulSet vs. DaemonSet - https://www.youtube.com/watch?v=30KAInyvY_o How to Optimize Caching for Transactions - https://audreyccheng.com/blog/transaction-caching/ How to use mongoDB change streams as a powerful event-driven engine - https://dev.to/woovi/how-to-use-mongodb-change-streams-as-a-powerful-event-driven-engine-4d9c Making WebAssembly even faster: Firefox’s new streaming and tiering compiler - https://hacks.mozilla.org/2018/01/making-webassembly-even-faster-firefoxs-new-streaming-and-tiering-compiler/ Life of a Packet [I] - Michael Rubin, Google - https://www.youtube.com/watch?v=0Omvgd7Hg1I Data Lakehouse Architecture \u0026amp; Use-Cases - https://www.youtube.com/watch?v=hB6olelYhr0 Making FinTech systems safe, reliable, and scalable with Redpanda - https://redpanda.com/blog/data-streaming-for-financial-services Announcing Rust 1.71.0 - https://blog.rust-lang.org/2023/07/13/Rust-1.71.0.html Focusing on \u0026ldquo;Entities\u0026rdquo; leads nowhere good. - https://www.youtube.com/watch?v=v5Fss4fCl8c How Functions Function - https://www.youtube.com/watch?v=SqT5YglW3qU Single vs. Double Entry Accounting - https://www.moderntreasury.com/learn/single-vs-double-entry-accounting Bank Reconciliation - https://www.moderntreasury.com/learn/bank-reconciliation What is a Ledger? - https://www.moderntreasury.com/learn/what-is-a-ledger How Big Is A Character? - https://www.youtube.com/watch?v=BAGcSyrWiPs Scylla Summit 2022: The Future of Consensus in ScyllaDB 5.0 and Beyond - https://www.youtube.com/watch?v=LoriHUqrzso I Cheated, and Gave Myself Infinite Hearts in Aladdin for SNES (snes rom hacks) - https://www.youtube.com/watch?v=2ZnAS5_0Z3I Accounting for Computer Scientists - https://martin.kleppmann.com/2011/03/07/accounting-for-computer-scientists.html Andrew Kelley - Practical DOD - https://vimeo.com/649009599 Anicet Nougaret - Insights from making a DNN \u0026amp; CNN library from scratch in Rust - https://www.youtube.com/watch?v=GjUM8ejy6kE What is Database Sharding? - https://www.youtube.com/watch?v=XP98YCr-iXQ Handles are the better pointers - https://floooh.github.io/2018/06/17/handles-vs-pointers.html Getting Hands on with io_uring using Go - https://developers.mattermost.com/blog/hands-on-iouring-go/ Implementing Raft: Part 0 - Introduction - https://eli.thegreenplace.net/2020/implementing-raft-part-0-introduction/ Implementing Raft: Part 1 - Elections - https://eli.thegreenplace.net/2020/implementing-raft-part-1-elections/ Implementing Raft: Part 2 - Commands and Log Replication - https://eli.thegreenplace.net/2020/implementing-raft-part-2-commands-and-log-replication/ Implementing Raft: Part 3 - Persistence and Optimizations - https://eli.thegreenplace.net/2020/implementing-raft-part-3-persistence-and-optimizations/ How do games like Prince of Persia manipulate time? | Bitwise - https://www.youtube.com/watch?v=GYLBCTTyHsI What’s new with io_uring - https://kernel.dk/io_uring-whatsnew.pdf Hash chain - https://en.wikipedia.org/wiki/Hash_chain Things I Wish I Knew Before Building a Ledger - https://www.andriosrobert.com/p/things-i-wish-i-knew-before-building Back to Basics: commands, events, and messages - https://milestone.topics.it/2023/05/25/back-to-basics-messages.html The looming demise of the 10x developer: Why an era of enthusiast programmers is coming to an end - https://blog.testdouble.com/posts/2023-07-12-the-looming-demise-of-the-10x-developer/ NumPy vs SciPy - https://www.youtube.com/watch?v=l3s-_8uTBVA The basics of the InnoDB undo logging and history system - https://blog.jcole.us/innodb/ Visualizing the impact of ordered vs. random index insertion in InnoDB - https://blog.jcole.us/2014/10/02/visualizing-the-impact-of-ordered-vs-random-index-insertion-in-innodb/ Coroutines for Go - https://research.swtch.com/coro 290 - SQL ou NoSQL: EIS A QUESTÃO! 🤔 | theWiseDev SQL - https://www.youtube.com/watch?v=mP11yY6uKmg Step Function Callbacks with AWS Lambda | Console Tutorial - https://www.youtube.com/watch?v=Uacjxu_AJTI Multi-tenant data isolation with PostgreSQL Row Level Security - https://aws.amazon.com/blogs/database/multi-tenant-data-isolation-with-postgresql-row-level-security/ MySQL Row-Level Security - https://satoricyber.com/mysql-security/mysql-row-level-security/ Simulation Testing For Liveness - https://tigerbeetle.com/blog/2023-07-06-simulation-testing-for-liveness/ Basics of Linear Algebra for Machine Learning - https://machinelearningmastery.com/linear_algebra_for_machine_learning/ Binary Comparisons for Patch Diffing - BinDiff Tutorial - https://www.youtube.com/watch?v=n06QSoICU6c How real user monitoring works in Grafana Cloud Frontend Observability - https://www.youtube.com/watch?v=5MfpcwTEQ6g Observe your Rust application with Quickwit, Jaeger and Grafana - https://quickwit.io/blog/observing-rust-app-with-quickwit-jaeger-grafana DevOps vs SRE vs Platform Engineering | Clear Big Misconceptions - https://www.youtube.com/watch?v=an8SrFtJBdM DDD is just giving a $h!t about your Domain - https://www.youtube.com/watch?v=i0aGAdgbG7A Bernard Kolobara – Lunatic - Erlang-inspired runtime for WebAssembly - Rust Vienna May 2023 - https://www.youtube.com/watch?v=VhDUGLdj5hY Differences between Apache Kafka and Redpanda: Bypass page cache \u0026amp; optimize for direct memory access - https://www.youtube.com/watch?v=ugZkzonAaqs Vertical Slice Architecture, not Layers! - https://www.youtube.com/watch?v=L2Wnq0ChAIA Sending generated traces to Grafana Tempo - https://www.youtube.com/watch?v=V5GtJRZtZ90 A Good Rust Stack - https://www.youtube.com/watch?v=pocWrUj68tU Make invalid states unrepresentable - https://geeklaunch.io/blog/make-invalid-states-unrepresentable/ Book Review: Nine Lies About Work - https://www.daviddaly.me/2023/07/book-review-nine-lies-about-work.html Building for Failure - https://encore.dev/blog/building-for-failure Why fsync(): Losing unsynced data on a single node leads to global data loss - https://redpanda.com/blog/why-fsync-is-needed-for-data-safety-in-kafka-or-non-byzantine-protocols?utm_source=twitter\u0026utm_medium=social\u0026utm_campaign=may16_social\u0026utm_assettype=blog\u0026utm_assetname=fsync The big picture: How Google Photos scaled rapidly on Spanner - https://cloud.google.com/blog/products/databases/google-photos-builds-user-experience-on-spanner/ Full Circle - https://taliaringer.wordpress.com/2023/07/22/full-circle/ 6 SQL Joins you MUST know! (Animated + Practice) - https://www.youtube.com/watch?v=Yh4CrPHVBdE How This Expression Caused a Global Internet Outage - youtube.com/watch?v=DDe-S3uef2w Square vs. Stripe - https://www.investopedia.com/articles/personal-finance/021715/square-vs-stripe.asp Qual a diferença entre Instituição de Pagamentos e Instituição Financeira?​ - https://www.iugu.com/blog/instituicao-de-pagamentos O que são arranjos de pagamentos e para que eles servem? - https://www.iugu.com/blog/o-que-sao-arranjos-de-pagamentos Entenda o que é CIP e veja as mudanças para marketplaces - https://www.iugu.com/blog/cip-camara-interbancaria-pagamentos-o-que-e Building an an Early Stage Startup: Lessons from Akita Software - https://blog.pragmaticengineer.com/building-an-an-early-stage-startup/ O que é uma instituição de pagamento regulamentada pelo BACEN? - https://www.iugu.com/blog/instituicao-de-pagamento-regulamentada-bacen Como funciona o mercado de Marketplace no Brasil? - https://www.iugu.com/blog/mercado-de-marketplace-no-brasil Token triplo: o que é e como protege os pagamentos digitais? - https://www.iugu.com/blog/token-triplo Instituições de pagamento - https://www.bcb.gov.br/estabilidadefinanceira/instituicaopagamento Arranjo de Pagamentos: O que sua Startup precisa saber sobre esse sistema - https://ndmadvogados.com.br/artigos/arranjo-de-pagamentos-o-que-sua-startup-precisa-saber-sobre-esse-sistema Como criar uma Fintech de Pagamentos para Apostas Esportivas? - https://ndmadvogados.com.br/artigos/como-criar-uma-fintech-de-pagamentos-para-apostas-esportivas 23 Sistema de Pagamentos Brasileiro – SPB - https://www.youtube.com/watch?v=1BT2l_REaBI Instituição de Pagamento: como obter autorização do Banco Central | NDM na Prática - https://www.youtube.com/watch?v=F8Vt675A78w Implementing a Regular Expression Engine - https://deniskyashif.com/2019/02/17/implementing-a-regular-expression-engine/ Amazon EC2 P5 Instances | Amazon Web Services - https://www.youtube.com/watch?v=S8JR50sVong Scaling your API with rate limiters - https://stripe.com/blog/rate-limiters Scaling your API with rate limiters - https://gist.github.com/ptarjan/e38f45f2dfe601419ca3af937fff574d Using load shedding to survive a success disaster—CRE life lessons - https://cloud.google.com/blog/products/gcp/using-load-shedding-to-survive-a-success-disaster-cre-life-lessons Top 7 Ways to 10x Your API Performance - https://www.youtube.com/watch?v=zvWKqUiovAM Monitor behind a firewall w/ Private Data source Connect on Grafana Cloud (Grafana Office Hours #04) - https://www.youtube.com/watch?v=9oPe1IICE80 Path to Event-Driven Architecture. Start capturing INTENT! - https://www.youtube.com/watch?v=sPjj8tVKy6M A Simpler Way to See Results - https://www.youtube.com/watch?v=s5S2Ed5T-dc 10 Postgres tips for beginners - https://postgres.ai/blog/20230722-10-postgres-tips-for-beginners 10 Postgres tips for beginners - https://postgres.ai/blog/20230722-10-postgres-tips-for-beginners How Large language Models Work - https://www.youtube.com/watch?v=5sLYAQS9sWQ Kubernetes Node Selector vs Node Affinity vs Pod Affinity vs Tains \u0026amp; Tolerations - https://www.youtube.com/watch?v=rX4v_L0k4Hc why does polymorphism suck? - https://www.youtube.com/watch?v=aq365yzrTVE How to read inference rules - https://cohost.org/prophet/post/2248211-how-to-read-inferenc Learning about distributed systems: where to start? - muratbuffalo.blogspot.com/2020/06/learning-about-distributed-systems.html The Enemy Within: Running Untrusted Code with gVisor - Ian Lewis, Google - https://www.youtube.com/watch?v=1Ib-rfSzDuM I often hear people ask why Kubernetes and Firecracker (FC) can’t just be used together. It seems like an intuitive combination, Kubernetes is popular for orchestration, and Firecracker provides strong isolation boundaries. So why aren’t they compatible yet? Read on 🧵 - https://threadreaderapp.com/thread/1238496944684597248.html Kata containers limitations - https://github.com/kata-containers/kata-containers/blob/main/docs/Limitations.md Kata Containers, gVisor offer more secure container strategies - https://www.techtarget.com/searchitoperations/tip/Kata-Containers-gVisor-offer-more-secure-container-strategies How to deploy Kubernetes with Firecracker? - https://www.padok.fr/en/blog/deploy-kubernetes-firecracker Secure Compute Part 2: gVisor Runtime on EKS - https://www.verygoodsecurity.com/blog/posts/secure-compute-part-2 Firecracker Executor for Apache Mesos - https://www.aventer.biz/en/products/mesos-firecracker/ DynamoDB Users Need To Know About This Update - https://www.youtube.com/watch?v=vizbUmohKKg x64 Virtual Address Translation - https://www.youtube.com/watch?v=W3o5jYHMh8s Podman vs. Docker - https://www.youtube.com/watch?v=Xx588nbshlM So, you want to deploy on the edge? - https://zknill.io/posts/edge-database/ Turbo docs: Concepts - https://docs.turso.tech/concepts What is a warrant canary? - https://www.cloudflare.com/learning/privacy/what-is-warrant-canary/ What is select skip locked for in postgresql 9.5 - https://www.2ndquadrant.com/en/blog/what-is-select-skip-locked-for-in-postgresql-9-5/ SANDBOXING CONTAINERS RUN UNTRUSTED CODE IN A CONTAINER - https://www.scip.ch/en/?labs.20211118 High-throughput stream processing in Rust - https://noz.ai/hash-pipeline/ BLAKE3 Is an Extremely Fast, Parallel Cryptographic Hash - https://www.infoq.com/news/2020/01/blake3-fast-crypto-hash/ ","permalink":"https://poorlydefinedbehaviour.github.io/posts/reading_list_jul_31_2023/","summary":"\u003ch2 id=\"the-list-of-things-i-read-or-watched-this-month\"\u003eThe list of things I read or watched this month\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eThe right way to define a C function with no arguments - \u003ca href=\"https://www.youtube.com/watch?v=VsRs0H4hXEE\"\u003ehttps://www.youtube.com/watch?v=VsRs0H4hXEE\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTREE-STRUCTURED CONCURRENCY — 2023-07-01 - \u003ca href=\"https://blog.yoshuawuyts.com/tree-structured-concurrency/\"\u003ehttps://blog.yoshuawuyts.com/tree-structured-concurrency/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMyths Programmers Believe about CPU Caches - \u003ca href=\"https://software.rajivprab.com/2018/04/29/myths-programmers-believe-about-cpu-caches/\"\u003ehttps://software.rajivprab.com/2018/04/29/myths-programmers-believe-about-cpu-caches/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eEventual vs Strong Consistency in Distributed Databases - \u003ca href=\"https://hackernoon.com/eventual-vs-strong-consistency-in-distributed-databases-282fdad37cf7\"\u003ehttps://hackernoon.com/eventual-vs-strong-consistency-in-distributed-databases-282fdad37cf7\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAccounting For Developers, Part I - \u003ca href=\"https://www.moderntreasury.com/journal/accounting-for-developers-part-i\"\u003ehttps://www.moderntreasury.com/journal/accounting-for-developers-part-i\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAccounting For Developers, Part II - \u003ca href=\"https://www.moderntreasury.com/journal/accounting-for-developers-part-ii\"\u003ehttps://www.moderntreasury.com/journal/accounting-for-developers-part-ii\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAccounting for Developers Part III: Building a Lending Marketplace - \u003ca href=\"https://www.moderntreasury.com/journal/accounting-for-developers-part-iii\"\u003ehttps://www.moderntreasury.com/journal/accounting-for-developers-part-iii\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhat is a Wire Transfer? - \u003ca href=\"https://www.moderntreasury.com/learn/what-is-a-wire-transfer\"\u003ehttps://www.moderntreasury.com/learn/what-is-a-wire-transfer\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhat is RTP? - \u003ca href=\"https://www.moderntreasury.com/learn/what-is-rtp\"\u003ehttps://www.moderntreasury.com/learn/what-is-rtp\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003evTables for Game Hacking \u0026amp; VMT Hooking - \u003ca href=\"https://www.youtube.com/watch?v=HfrBdf-hM28\"\u003ehttps://www.youtube.com/watch?v=HfrBdf-hM28\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAPI vs. Messaging — How to Choose Which One to Use? - \u003ca href=\"https://betterprogramming.pub/api-vs-messaging-how-to-choose-which-one-to-use-d6634599d2bd\"\u003ehttps://betterprogramming.pub/api-vs-messaging-how-to-choose-which-one-to-use-d6634599d2bd\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eKubernetes Basics: Pods, Nodes, Containers, Deployments \u0026amp; Clusters - \u003ca href=\"https://www.youtube.com/watch?v=6IPu3WU_M0o\"\u003ehttps://www.youtube.com/watch?v=6IPu3WU_M0o\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAre You Sure You Want to Use MMAP in Your Database Management System? - \u003ca href=\"https://db.cs.cmu.edu/papers/2022/cidr2022-p13-crotty.pdf\"\u003ehttps://db.cs.cmu.edu/papers/2022/cidr2022-p13-crotty.pdf\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eContent-based filtering \u0026amp; collaborative filtering (Building recommendation systems with TensorFlow) - \u003ca href=\"https://www.youtube.com/watch?v=v90un9ALRzw\"\u003ehttps://www.youtube.com/watch?v=v90un9ALRzw\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhat are Business Rules? It\u0026rsquo;s not this. - \u003ca href=\"https://www.youtube.com/watch?v=FbYcIqVmGRk\"\u003ehttps://www.youtube.com/watch?v=FbYcIqVmGRk\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDemystifying the Unusual Evolution of the Netflix API Architecture - \u003ca href=\"https://www.youtube.com/watch?v=Uu32ggF-DWg\"\u003ehttps://www.youtube.com/watch?v=Uu32ggF-DWg\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eA Gentle Introduction to Linear Algebra - \u003ca href=\"https://machinelearningmastery.com/gentle-introduction-linear-algebra/\"\u003ehttps://machinelearningmastery.com/gentle-introduction-linear-algebra/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eIntroduction to Amazon Personalize - \u003ca href=\"https://www.youtube.com/watch?v=3gJmhoLaLIo\"\u003ehttps://www.youtube.com/watch?v=3gJmhoLaLIo\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eUnderstanding your Data with Amazon Personalize - \u003ca href=\"https://www.youtube.com/watch?v=TEioktJD1GE\"\u003ehttps://www.youtube.com/watch?v=TEioktJD1GE\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSolving Real World Use Cases with Amazon Personalize - \u003ca href=\"https://www.youtube.com/watch?v=9N7s_dVVWBE\"\u003ehttps://www.youtube.com/watch?v=9N7s_dVVWBE\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ehow do computers create code? - \u003ca href=\"https://www.youtube.com/watch?v=2y1IgW2T8bo\"\u003ehttps://www.youtube.com/watch?v=2y1IgW2T8bo\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhat if writing tests was a joyful experience - \u003ca href=\"https://blog.janestreet.com/the-joy-of-expect-tests/\"\u003ehttps://blog.janestreet.com/the-joy-of-expect-tests/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eQuickcheck for Core - \u003ca href=\"https://blog.janestreet.com/quickcheck-for-core/\"\u003ehttps://blog.janestreet.com/quickcheck-for-core/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eBasics of Mathematical Notation for Machine Learning - \u003ca href=\"https://machinelearningmastery.com/basics-mathematical-notation-machine-learning/\"\u003ehttps://machinelearningmastery.com/basics-mathematical-notation-machine-learning/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eA Real Use Case of Goroutines With Package Context In Golang - \u003ca href=\"https://www.youtube.com/watch?v=5QyxqhLnKmM\"\u003ehttps://www.youtube.com/watch?v=5QyxqhLnKmM\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eEngineering Intensity - \u003ca href=\"https://ruiper.es/posts/engineering_intensity/\"\u003ehttps://ruiper.es/posts/engineering_intensity/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eImplementing a Transactional Outbox Pattern with DynamoDB Streams to Avoid 2-phase Commits - \u003ca href=\"https://medium.com/ssense-tech/implementing-a-transactional-outbox-pattern-with-dynamodb-streams-to-avoid-2-phase-commits-ed0f91e69e9\"\u003ehttps://medium.com/ssense-tech/implementing-a-transactional-outbox-pattern-with-dynamodb-streams-to-avoid-2-phase-commits-ed0f91e69e9\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eStatQuest: K-nearest neighbors, Clearly Explained - \u003ca href=\"https://www.youtube.com/watch?v=HVXime0nQeI\"\u003ehttps://www.youtube.com/watch?v=HVXime0nQeI\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eBRIDGING FUZZING AND PROPERTY TESTING — 2023-07-10 - \u003ca href=\"https://blog.yoshuawuyts.com/bridging-fuzzing-and-property-testing/\"\u003ehttps://blog.yoshuawuyts.com/bridging-fuzzing-and-property-testing/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e289 - CONFIABILIDADE \u0026amp; ESCALABILIDADE em aplicações com uso intensivo de DADOS | theWiseDev NFR - \u003ca href=\"https://www.youtube.com/watch?v=EXwJwwOJ1UY\"\u003ehttps://www.youtube.com/watch?v=EXwJwwOJ1UY\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhy ScyllaDB is Moving to a New Replication Algorithm: Tablets - \u003ca href=\"https://www.scylladb.com/2023/07/10/why-scylladb-is-moving-to-a-new-replication-algorithm-tablets/\"\u003ehttps://www.scylladb.com/2023/07/10/why-scylladb-is-moving-to-a-new-replication-algorithm-tablets/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eA problem so hard even Google relies on Random Chance - \u003ca href=\"https://www.youtube.com/watch?v=lJYufx0bfpw\"\u003ehttps://www.youtube.com/watch?v=lJYufx0bfpw\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAre You Sure You Want to Use MMAP in Your Database Management System? - \u003ca href=\"https://www.youtube.com/watch?v=1BRGU_AS25c\"\u003ehttps://www.youtube.com/watch?v=1BRGU_AS25c\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDigital Wallet - \u003ca href=\"https://www.moderntreasury.com/learn/digital-wallet\"\u003ehttps://www.moderntreasury.com/learn/digital-wallet\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhat is ACH? - \u003ca href=\"https://www.moderntreasury.com/learn/what-is-ach\"\u003ehttps://www.moderntreasury.com/learn/what-is-ach\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow simple can a programming language be? - \u003ca href=\"https://www.youtube.com/watch?v=Fg5En6pbsDA\"\u003ehttps://www.youtube.com/watch?v=Fg5En6pbsDA\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eKubernetes Deployment vs. StatefulSet vs. DaemonSet - \u003ca href=\"https://www.youtube.com/watch?v=30KAInyvY_o\"\u003ehttps://www.youtube.com/watch?v=30KAInyvY_o\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow to Optimize Caching for Transactions - \u003ca href=\"https://audreyccheng.com/blog/transaction-caching/\"\u003ehttps://audreyccheng.com/blog/transaction-caching/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow to use mongoDB change streams as a powerful event-driven engine - \u003ca href=\"https://dev.to/woovi/how-to-use-mongodb-change-streams-as-a-powerful-event-driven-engine-4d9c\"\u003ehttps://dev.to/woovi/how-to-use-mongodb-change-streams-as-a-powerful-event-driven-engine-4d9c\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMaking WebAssembly even faster: Firefox’s new streaming and tiering compiler - \u003ca href=\"https://hacks.mozilla.org/2018/01/making-webassembly-even-faster-firefoxs-new-streaming-and-tiering-compiler/\"\u003ehttps://hacks.mozilla.org/2018/01/making-webassembly-even-faster-firefoxs-new-streaming-and-tiering-compiler/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eLife of a Packet [I] - Michael Rubin, Google - \u003ca href=\"https://www.youtube.com/watch?v=0Omvgd7Hg1I\"\u003ehttps://www.youtube.com/watch?v=0Omvgd7Hg1I\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eData Lakehouse Architecture \u0026amp; Use-Cases - \u003ca href=\"https://www.youtube.com/watch?v=hB6olelYhr0\"\u003ehttps://www.youtube.com/watch?v=hB6olelYhr0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMaking FinTech systems safe, reliable, and scalable with Redpanda - \u003ca href=\"https://redpanda.com/blog/data-streaming-for-financial-services\"\u003ehttps://redpanda.com/blog/data-streaming-for-financial-services\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAnnouncing Rust 1.71.0 - \u003ca href=\"https://blog.rust-lang.org/2023/07/13/Rust-1.71.0.html\"\u003ehttps://blog.rust-lang.org/2023/07/13/Rust-1.71.0.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eFocusing on \u0026ldquo;Entities\u0026rdquo; leads nowhere good. - \u003ca href=\"https://www.youtube.com/watch?v=v5Fss4fCl8c\"\u003ehttps://www.youtube.com/watch?v=v5Fss4fCl8c\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow Functions Function - \u003ca href=\"https://www.youtube.com/watch?v=SqT5YglW3qU\"\u003ehttps://www.youtube.com/watch?v=SqT5YglW3qU\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSingle vs. Double Entry Accounting - \u003ca href=\"https://www.moderntreasury.com/learn/single-vs-double-entry-accounting\"\u003ehttps://www.moderntreasury.com/learn/single-vs-double-entry-accounting\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eBank Reconciliation - \u003ca href=\"https://www.moderntreasury.com/learn/bank-reconciliation\"\u003ehttps://www.moderntreasury.com/learn/bank-reconciliation\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhat is a Ledger? - \u003ca href=\"https://www.moderntreasury.com/learn/what-is-a-ledger\"\u003ehttps://www.moderntreasury.com/learn/what-is-a-ledger\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow Big Is A Character? - \u003ca href=\"https://www.youtube.com/watch?v=BAGcSyrWiPs\"\u003ehttps://www.youtube.com/watch?v=BAGcSyrWiPs\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eScylla Summit 2022: The Future of Consensus in ScyllaDB 5.0 and Beyond - \u003ca href=\"https://www.youtube.com/watch?v=LoriHUqrzso\"\u003ehttps://www.youtube.com/watch?v=LoriHUqrzso\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eI Cheated, and Gave Myself Infinite Hearts in Aladdin for SNES (snes rom hacks) - \u003ca href=\"https://www.youtube.com/watch?v=2ZnAS5_0Z3I\"\u003ehttps://www.youtube.com/watch?v=2ZnAS5_0Z3I\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAccounting for Computer Scientists - \u003ca href=\"https://martin.kleppmann.com/2011/03/07/accounting-for-computer-scientists.html\"\u003ehttps://martin.kleppmann.com/2011/03/07/accounting-for-computer-scientists.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAndrew Kelley - Practical DOD - \u003ca href=\"https://vimeo.com/649009599\"\u003ehttps://vimeo.com/649009599\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAnicet Nougaret - Insights from making a DNN \u0026amp; CNN library from scratch in Rust - \u003ca href=\"https://www.youtube.com/watch?v=GjUM8ejy6kE\"\u003ehttps://www.youtube.com/watch?v=GjUM8ejy6kE\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhat is Database Sharding? - \u003ca href=\"https://www.youtube.com/watch?v=XP98YCr-iXQ\"\u003ehttps://www.youtube.com/watch?v=XP98YCr-iXQ\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHandles are the better pointers - \u003ca href=\"https://floooh.github.io/2018/06/17/handles-vs-pointers.html\"\u003ehttps://floooh.github.io/2018/06/17/handles-vs-pointers.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eGetting Hands on with io_uring using Go - \u003ca href=\"https://developers.mattermost.com/blog/hands-on-iouring-go/\"\u003ehttps://developers.mattermost.com/blog/hands-on-iouring-go/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eImplementing Raft: Part 0 - Introduction - \u003ca href=\"https://eli.thegreenplace.net/2020/implementing-raft-part-0-introduction/\"\u003ehttps://eli.thegreenplace.net/2020/implementing-raft-part-0-introduction/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eImplementing Raft: Part 1 - Elections - \u003ca href=\"https://eli.thegreenplace.net/2020/implementing-raft-part-1-elections/\"\u003ehttps://eli.thegreenplace.net/2020/implementing-raft-part-1-elections/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eImplementing Raft: Part 2 - Commands and Log Replication - \u003ca href=\"https://eli.thegreenplace.net/2020/implementing-raft-part-2-commands-and-log-replication/\"\u003ehttps://eli.thegreenplace.net/2020/implementing-raft-part-2-commands-and-log-replication/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eImplementing Raft: Part 3 - Persistence and Optimizations - \u003ca href=\"https://eli.thegreenplace.net/2020/implementing-raft-part-3-persistence-and-optimizations/\"\u003ehttps://eli.thegreenplace.net/2020/implementing-raft-part-3-persistence-and-optimizations/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow do games like Prince of Persia manipulate time? | Bitwise - \u003ca href=\"https://www.youtube.com/watch?v=GYLBCTTyHsI\"\u003ehttps://www.youtube.com/watch?v=GYLBCTTyHsI\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhat’s new with io_uring - \u003ca href=\"https://kernel.dk/io_uring-whatsnew.pdf\"\u003ehttps://kernel.dk/io_uring-whatsnew.pdf\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHash chain - \u003ca href=\"https://en.wikipedia.org/wiki/Hash_chain\"\u003ehttps://en.wikipedia.org/wiki/Hash_chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThings I Wish I Knew Before Building a Ledger - \u003ca href=\"https://www.andriosrobert.com/p/things-i-wish-i-knew-before-building\"\u003ehttps://www.andriosrobert.com/p/things-i-wish-i-knew-before-building\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eBack to Basics: commands, events, and messages - \u003ca href=\"https://milestone.topics.it/2023/05/25/back-to-basics-messages.html\"\u003ehttps://milestone.topics.it/2023/05/25/back-to-basics-messages.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe looming demise of the 10x developer: Why an era of enthusiast programmers is coming to an end - \u003ca href=\"https://blog.testdouble.com/posts/2023-07-12-the-looming-demise-of-the-10x-developer/\"\u003ehttps://blog.testdouble.com/posts/2023-07-12-the-looming-demise-of-the-10x-developer/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eNumPy vs SciPy - \u003ca href=\"https://www.youtube.com/watch?v=l3s-_8uTBVA\"\u003ehttps://www.youtube.com/watch?v=l3s-_8uTBVA\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe basics of the InnoDB undo logging and history system - \u003ca href=\"https://blog.jcole.us/innodb/\"\u003ehttps://blog.jcole.us/innodb/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eVisualizing the impact of ordered vs. random index insertion in InnoDB - \u003ca href=\"https://blog.jcole.us/2014/10/02/visualizing-the-impact-of-ordered-vs-random-index-insertion-in-innodb/\"\u003ehttps://blog.jcole.us/2014/10/02/visualizing-the-impact-of-ordered-vs-random-index-insertion-in-innodb/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eCoroutines for Go - \u003ca href=\"https://research.swtch.com/coro\"\u003ehttps://research.swtch.com/coro\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e290 - SQL ou NoSQL: EIS A QUESTÃO! 🤔 | theWiseDev SQL - \u003ca href=\"https://www.youtube.com/watch?v=mP11yY6uKmg\"\u003ehttps://www.youtube.com/watch?v=mP11yY6uKmg\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eStep Function Callbacks with AWS Lambda | Console Tutorial - \u003ca href=\"https://www.youtube.com/watch?v=Uacjxu_AJTI\"\u003ehttps://www.youtube.com/watch?v=Uacjxu_AJTI\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMulti-tenant data isolation with PostgreSQL Row Level Security - \u003ca href=\"https://aws.amazon.com/blogs/database/multi-tenant-data-isolation-with-postgresql-row-level-security/\"\u003ehttps://aws.amazon.com/blogs/database/multi-tenant-data-isolation-with-postgresql-row-level-security/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMySQL Row-Level Security - \u003ca href=\"https://satoricyber.com/mysql-security/mysql-row-level-security/\"\u003ehttps://satoricyber.com/mysql-security/mysql-row-level-security/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSimulation Testing For Liveness - \u003ca href=\"https://tigerbeetle.com/blog/2023-07-06-simulation-testing-for-liveness/\"\u003ehttps://tigerbeetle.com/blog/2023-07-06-simulation-testing-for-liveness/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eBasics of Linear Algebra for Machine Learning - \u003ca href=\"https://machinelearningmastery.com/linear_algebra_for_machine_learning/\"\u003ehttps://machinelearningmastery.com/linear_algebra_for_machine_learning/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eBinary Comparisons for Patch Diffing - BinDiff Tutorial - \u003ca href=\"https://www.youtube.com/watch?v=n06QSoICU6c\"\u003ehttps://www.youtube.com/watch?v=n06QSoICU6c\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow real user monitoring works in Grafana Cloud Frontend Observability - \u003ca href=\"https://www.youtube.com/watch?v=5MfpcwTEQ6g\"\u003ehttps://www.youtube.com/watch?v=5MfpcwTEQ6g\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eObserve your Rust application with Quickwit, Jaeger and Grafana - \u003ca href=\"https://quickwit.io/blog/observing-rust-app-with-quickwit-jaeger-grafana\"\u003ehttps://quickwit.io/blog/observing-rust-app-with-quickwit-jaeger-grafana\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDevOps vs SRE vs Platform Engineering | Clear Big Misconceptions - \u003ca href=\"https://www.youtube.com/watch?v=an8SrFtJBdM\"\u003ehttps://www.youtube.com/watch?v=an8SrFtJBdM\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDDD is just giving a $h!t about your Domain - \u003ca href=\"https://www.youtube.com/watch?v=i0aGAdgbG7A\"\u003ehttps://www.youtube.com/watch?v=i0aGAdgbG7A\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eBernard Kolobara – Lunatic - Erlang-inspired runtime for WebAssembly - Rust Vienna May 2023 - \u003ca href=\"https://www.youtube.com/watch?v=VhDUGLdj5hY\"\u003ehttps://www.youtube.com/watch?v=VhDUGLdj5hY\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDifferences between Apache Kafka and Redpanda: Bypass page cache \u0026amp; optimize for direct memory access - \u003ca href=\"https://www.youtube.com/watch?v=ugZkzonAaqs\"\u003ehttps://www.youtube.com/watch?v=ugZkzonAaqs\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eVertical Slice Architecture, not Layers! - \u003ca href=\"https://www.youtube.com/watch?v=L2Wnq0ChAIA\"\u003ehttps://www.youtube.com/watch?v=L2Wnq0ChAIA\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSending generated traces to Grafana Tempo - \u003ca href=\"https://www.youtube.com/watch?v=V5GtJRZtZ90\"\u003ehttps://www.youtube.com/watch?v=V5GtJRZtZ90\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eA Good Rust Stack - \u003ca href=\"https://www.youtube.com/watch?v=pocWrUj68tU\"\u003ehttps://www.youtube.com/watch?v=pocWrUj68tU\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMake invalid states unrepresentable - \u003ca href=\"https://geeklaunch.io/blog/make-invalid-states-unrepresentable/\"\u003ehttps://geeklaunch.io/blog/make-invalid-states-unrepresentable/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eBook Review: Nine Lies About Work - \u003ca href=\"https://www.daviddaly.me/2023/07/book-review-nine-lies-about-work.html\"\u003ehttps://www.daviddaly.me/2023/07/book-review-nine-lies-about-work.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eBuilding for Failure - \u003ca href=\"https://encore.dev/blog/building-for-failure\"\u003ehttps://encore.dev/blog/building-for-failure\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhy \u003ccode\u003efsync()\u003c/code\u003e: Losing unsynced data on a single node leads to global data loss - \u003ca href=\"https://redpanda.com/blog/why-fsync-is-needed-for-data-safety-in-kafka-or-non-byzantine-protocols?utm_source=twitter\u0026amp;utm_medium=social\u0026amp;utm_campaign=may16_social\u0026amp;utm_assettype=blog\u0026amp;utm_assetname=fsync\"\u003ehttps://redpanda.com/blog/why-fsync-is-needed-for-data-safety-in-kafka-or-non-byzantine-protocols?utm_source=twitter\u0026utm_medium=social\u0026utm_campaign=may16_social\u0026utm_assettype=blog\u0026utm_assetname=fsync\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe big picture: How Google Photos scaled rapidly on Spanner - \u003ca href=\"https://cloud.google.com/blog/products/databases/google-photos-builds-user-experience-on-spanner/\"\u003ehttps://cloud.google.com/blog/products/databases/google-photos-builds-user-experience-on-spanner/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eFull Circle - \u003ca href=\"https://taliaringer.wordpress.com/2023/07/22/full-circle/\"\u003ehttps://taliaringer.wordpress.com/2023/07/22/full-circle/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e6 SQL Joins you MUST know! (Animated + Practice) - \u003ca href=\"https://www.youtube.com/watch?v=Yh4CrPHVBdE\"\u003ehttps://www.youtube.com/watch?v=Yh4CrPHVBdE\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow This Expression Caused a Global Internet Outage - youtube.com/watch?v=DDe-S3uef2w\u003c/li\u003e\n\u003cli\u003eSquare vs. Stripe - \u003ca href=\"https://www.investopedia.com/articles/personal-finance/021715/square-vs-stripe.asp\"\u003ehttps://www.investopedia.com/articles/personal-finance/021715/square-vs-stripe.asp\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eQual a diferença entre Instituição de Pagamentos e Instituição Financeira?​ - \u003ca href=\"https://www.iugu.com/blog/instituicao-de-pagamentos\"\u003ehttps://www.iugu.com/blog/instituicao-de-pagamentos\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eO que são arranjos de pagamentos e para que eles servem? - \u003ca href=\"https://www.iugu.com/blog/o-que-sao-arranjos-de-pagamentos\"\u003ehttps://www.iugu.com/blog/o-que-sao-arranjos-de-pagamentos\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eEntenda o que é CIP e veja as mudanças para marketplaces - \u003ca href=\"https://www.iugu.com/blog/cip-camara-interbancaria-pagamentos-o-que-e\"\u003ehttps://www.iugu.com/blog/cip-camara-interbancaria-pagamentos-o-que-e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eBuilding an an Early Stage Startup: Lessons from Akita Software - \u003ca href=\"https://blog.pragmaticengineer.com/building-an-an-early-stage-startup/\"\u003ehttps://blog.pragmaticengineer.com/building-an-an-early-stage-startup/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eO que é uma instituição de pagamento regulamentada pelo BACEN? - \u003ca href=\"https://www.iugu.com/blog/instituicao-de-pagamento-regulamentada-bacen\"\u003ehttps://www.iugu.com/blog/instituicao-de-pagamento-regulamentada-bacen\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eComo funciona o mercado de Marketplace no Brasil? - \u003ca href=\"https://www.iugu.com/blog/mercado-de-marketplace-no-brasil\"\u003ehttps://www.iugu.com/blog/mercado-de-marketplace-no-brasil\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eToken triplo: o que é e como protege os pagamentos digitais? - \u003ca href=\"https://www.iugu.com/blog/token-triplo\"\u003ehttps://www.iugu.com/blog/token-triplo\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eInstituições de pagamento - \u003ca href=\"https://www.bcb.gov.br/estabilidadefinanceira/instituicaopagamento\"\u003ehttps://www.bcb.gov.br/estabilidadefinanceira/instituicaopagamento\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eArranjo de Pagamentos: O que sua Startup precisa saber sobre esse sistema - \u003ca href=\"https://ndmadvogados.com.br/artigos/arranjo-de-pagamentos-o-que-sua-startup-precisa-saber-sobre-esse-sistema\"\u003ehttps://ndmadvogados.com.br/artigos/arranjo-de-pagamentos-o-que-sua-startup-precisa-saber-sobre-esse-sistema\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eComo criar uma Fintech de Pagamentos para Apostas Esportivas? - \u003ca href=\"https://ndmadvogados.com.br/artigos/como-criar-uma-fintech-de-pagamentos-para-apostas-esportivas\"\u003ehttps://ndmadvogados.com.br/artigos/como-criar-uma-fintech-de-pagamentos-para-apostas-esportivas\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e23 Sistema de Pagamentos Brasileiro – SPB - \u003ca href=\"https://www.youtube.com/watch?v=1BT2l_REaBI\"\u003ehttps://www.youtube.com/watch?v=1BT2l_REaBI\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eInstituição de Pagamento: como obter autorização do Banco Central | NDM na Prática - \u003ca href=\"https://www.youtube.com/watch?v=F8Vt675A78w\"\u003ehttps://www.youtube.com/watch?v=F8Vt675A78w\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eImplementing a Regular Expression Engine - \u003ca href=\"https://deniskyashif.com/2019/02/17/implementing-a-regular-expression-engine/\"\u003ehttps://deniskyashif.com/2019/02/17/implementing-a-regular-expression-engine/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAmazon EC2 P5 Instances | Amazon Web Services - \u003ca href=\"https://www.youtube.com/watch?v=S8JR50sVong\"\u003ehttps://www.youtube.com/watch?v=S8JR50sVong\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eScaling your API with rate limiters - \u003ca href=\"https://stripe.com/blog/rate-limiters\"\u003ehttps://stripe.com/blog/rate-limiters\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eScaling your API with rate limiters - \u003ca href=\"https://gist.github.com/ptarjan/e38f45f2dfe601419ca3af937fff574d\"\u003ehttps://gist.github.com/ptarjan/e38f45f2dfe601419ca3af937fff574d\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eUsing load shedding to survive a success disaster—CRE life lessons - \u003ca href=\"https://cloud.google.com/blog/products/gcp/using-load-shedding-to-survive-a-success-disaster-cre-life-lessons\"\u003ehttps://cloud.google.com/blog/products/gcp/using-load-shedding-to-survive-a-success-disaster-cre-life-lessons\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTop 7 Ways to 10x Your API Performance - \u003ca href=\"https://www.youtube.com/watch?v=zvWKqUiovAM\"\u003ehttps://www.youtube.com/watch?v=zvWKqUiovAM\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMonitor behind a firewall w/ Private Data source Connect on Grafana Cloud (Grafana Office Hours #04) - \u003ca href=\"https://www.youtube.com/watch?v=9oPe1IICE80\"\u003ehttps://www.youtube.com/watch?v=9oPe1IICE80\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ePath to Event-Driven Architecture. Start capturing INTENT! - \u003ca href=\"https://www.youtube.com/watch?v=sPjj8tVKy6M\"\u003ehttps://www.youtube.com/watch?v=sPjj8tVKy6M\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eA Simpler Way to See Results - \u003ca href=\"https://www.youtube.com/watch?v=s5S2Ed5T-dc\"\u003ehttps://www.youtube.com/watch?v=s5S2Ed5T-dc\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e10 Postgres tips for beginners - \u003ca href=\"https://postgres.ai/blog/20230722-10-postgres-tips-for-beginners\"\u003ehttps://postgres.ai/blog/20230722-10-postgres-tips-for-beginners\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e10 Postgres tips for beginners - \u003ca href=\"https://postgres.ai/blog/20230722-10-postgres-tips-for-beginners\"\u003ehttps://postgres.ai/blog/20230722-10-postgres-tips-for-beginners\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow Large language Models Work - \u003ca href=\"https://www.youtube.com/watch?v=5sLYAQS9sWQ\"\u003ehttps://www.youtube.com/watch?v=5sLYAQS9sWQ\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eKubernetes Node Selector vs Node Affinity vs Pod Affinity vs Tains \u0026amp; Tolerations - \u003ca href=\"https://www.youtube.com/watch?v=rX4v_L0k4Hc\"\u003ehttps://www.youtube.com/watch?v=rX4v_L0k4Hc\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ewhy does polymorphism suck? - \u003ca href=\"https://www.youtube.com/watch?v=aq365yzrTVE\"\u003ehttps://www.youtube.com/watch?v=aq365yzrTVE\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow to read inference rules - \u003ca href=\"https://cohost.org/prophet/post/2248211-how-to-read-inferenc\"\u003ehttps://cohost.org/prophet/post/2248211-how-to-read-inferenc\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eLearning about distributed systems: where to start? - muratbuffalo.blogspot.com/2020/06/learning-about-distributed-systems.html\u003c/li\u003e\n\u003cli\u003eThe Enemy Within: Running Untrusted Code with gVisor - Ian Lewis, Google - \u003ca href=\"https://www.youtube.com/watch?v=1Ib-rfSzDuM\"\u003ehttps://www.youtube.com/watch?v=1Ib-rfSzDuM\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eI often hear people ask why Kubernetes and Firecracker (FC) can’t just be used together. It seems like an intuitive combination, Kubernetes is popular for orchestration, and Firecracker provides strong isolation boundaries. So why aren’t they compatible yet? Read on 🧵 - \u003ca href=\"https://threadreaderapp.com/thread/1238496944684597248.html\"\u003ehttps://threadreaderapp.com/thread/1238496944684597248.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eKata containers limitations - \u003ca href=\"https://github.com/kata-containers/kata-containers/blob/main/docs/Limitations.md\"\u003ehttps://github.com/kata-containers/kata-containers/blob/main/docs/Limitations.md\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eKata Containers, gVisor offer more secure container strategies - \u003ca href=\"https://www.techtarget.com/searchitoperations/tip/Kata-Containers-gVisor-offer-more-secure-container-strategies\"\u003ehttps://www.techtarget.com/searchitoperations/tip/Kata-Containers-gVisor-offer-more-secure-container-strategies\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHow to deploy Kubernetes with Firecracker? - \u003ca href=\"https://www.padok.fr/en/blog/deploy-kubernetes-firecracker\"\u003ehttps://www.padok.fr/en/blog/deploy-kubernetes-firecracker\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSecure Compute Part 2: gVisor Runtime on EKS - \u003ca href=\"https://www.verygoodsecurity.com/blog/posts/secure-compute-part-2\"\u003ehttps://www.verygoodsecurity.com/blog/posts/secure-compute-part-2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eFirecracker Executor for Apache Mesos - \u003ca href=\"https://www.aventer.biz/en/products/mesos-firecracker/\"\u003ehttps://www.aventer.biz/en/products/mesos-firecracker/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDynamoDB Users Need To Know About This Update - \u003ca href=\"https://www.youtube.com/watch?v=vizbUmohKKg\"\u003ehttps://www.youtube.com/watch?v=vizbUmohKKg\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ex64 Virtual Address Translation - \u003ca href=\"https://www.youtube.com/watch?v=W3o5jYHMh8s\"\u003ehttps://www.youtube.com/watch?v=W3o5jYHMh8s\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ePodman vs. Docker - \u003ca href=\"https://www.youtube.com/watch?v=Xx588nbshlM\"\u003ehttps://www.youtube.com/watch?v=Xx588nbshlM\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSo, you want to deploy on the edge? - \u003ca href=\"https://zknill.io/posts/edge-database/\"\u003ehttps://zknill.io/posts/edge-database/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTurbo docs: Concepts - \u003ca href=\"https://docs.turso.tech/concepts\"\u003ehttps://docs.turso.tech/concepts\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhat is a warrant canary? - \u003ca href=\"https://www.cloudflare.com/learning/privacy/what-is-warrant-canary/\"\u003ehttps://www.cloudflare.com/learning/privacy/what-is-warrant-canary/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhat is select skip locked for in postgresql 9.5 - \u003ca href=\"https://www.2ndquadrant.com/en/blog/what-is-select-skip-locked-for-in-postgresql-9-5/\"\u003ehttps://www.2ndquadrant.com/en/blog/what-is-select-skip-locked-for-in-postgresql-9-5/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSANDBOXING CONTAINERS RUN UNTRUSTED CODE IN A CONTAINER - \u003ca href=\"https://www.scip.ch/en/?labs.20211118\"\u003ehttps://www.scip.ch/en/?labs.20211118\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHigh-throughput stream processing in Rust - \u003ca href=\"https://noz.ai/hash-pipeline/\"\u003ehttps://noz.ai/hash-pipeline/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eBLAKE3 Is an Extremely Fast, Parallel Cryptographic Hash - \u003ca href=\"https://www.infoq.com/news/2020/01/blake3-fast-crypto-hash/\"\u003ehttps://www.infoq.com/news/2020/01/blake3-fast-crypto-hash/\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","title":"Reading list July 2023"},{"content":"Sending logs and traces from a Rust app to Grafana cloud Run the Grafana agent Put the Grafana agent config in grafana-agent/agent/agent.yaml. server: log_level: debug logs: configs: - name: default positions: filename: /tmp/positions.yaml scrape_configs: - job_name: varlogs static_configs: - targets: [localhost] labels: job: varlogs app: rust-grafana-metrics-logs-traces __path__: /var/log/app/*log clients: - url: \u0026lt;grafana-cloud-loki-url\u0026gt; traces: configs: - name: default receivers: otlp: protocols: grpc: remote_write: - endpoint: tempo-us-central1.grafana.net:443 insecure: false # only add this if TLS is not required basic_auth: username: \u0026lt;grafana-cloud-tempo-username\u0026gt; password: \u0026lt;grafana-cloud-tempo-password\u0026gt; batch: timeout: 5s send_batch_size: 100 Run the Grafana agent docker run \\ -v $PWD/grafana-agent/data:/etc/agent/data \\ -v $PWD/grafana-agent/agent.yaml:/etc/agent/agent.yaml \\ -v $PWD/log:/var/log/app \\ -p 4317:4317 \\ grafana/agent:v0.35.0 Dependencies being used Replace axum with whatever dependency you are using. The ones you\u0026rsquo;ll use no matter the framework are:\nopentelemetry opentelemetry-otlp opentelemetry_sdk tracing tracing-appender tracing-futures tracing-opentelemetry tracing-subscriber [dependencies] axum = \u0026#34;0.6.19\u0026#34; opentelemetry = { version = \u0026#34;0.19.0\u0026#34;, features = [\u0026#34;rt-tokio\u0026#34;] } opentelemetry-otlp = { version = \u0026#34;0.12.0\u0026#34;, features = [\u0026#34;grpc-tonic\u0026#34;, \u0026#34;reqwest-client\u0026#34;, \u0026#34;tls-roots\u0026#34;] } opentelemetry_sdk = \u0026#34;0.19.0\u0026#34; serde = { version = \u0026#34;1.0.172\u0026#34;, features = [\u0026#34;derive\u0026#34;] } serde_json = \u0026#34;1.0.103\u0026#34; tokio = { version = \u0026#34;1.29.1\u0026#34;, features = [\u0026#34;macros\u0026#34;, \u0026#34;rt-multi-thread\u0026#34;] } tower-http = { version = \u0026#34;0.4.3\u0026#34;, features = [\u0026#34;request-id\u0026#34;] } tracing = \u0026#34;0.1.37\u0026#34; tracing-appender = \u0026#34;0.2.2\u0026#34; tracing-futures = \u0026#34;0.2.5\u0026#34; tracing-opentelemetry = \u0026#34;0.19.0\u0026#34; tracing-subscriber = { version = \u0026#34;0.3.17\u0026#34;, features = [\u0026#34;env-filter\u0026#34;] } uuid = \u0026#34;1.4.1\u0026#34; Start by creating a main function and configuring tracing_appender to write log statements to a file called app.log asynchronously.\n#[tokio::main] async fn main() { let file_appender = tracing_appender::rolling::never(\u0026#34;./log\u0026#34;, \u0026#34;app.log\u0026#34;); let (non_blocking, _guard) = tracing_appender::non_blocking(file_appender); let app = Router::new() .route(\u0026#34;/users/:id\u0026#34;, get(handler)); let addr: SocketAddr = \u0026#34;0.0.0.0:3000\u0026#34;.parse().unwrap(); info!(?addr, \u0026#34;starting server\u0026#34;); axum::Server::bind(\u0026amp;addr) .serve(app.into_make_service()) .await .expect(\u0026#34;running http server\u0026#34;); } This is the request handler.\n#[tracing::instrument(name=\u0026#34;GET /users/:id\u0026#34;, skip_all, fields( request_id = %ctx.request_id, user_id = %id ))] async fn handler(ExtractContext(ctx): ExtractContext, Path(id): Path\u0026lt;u64\u0026gt;) -\u0026gt; Response { match get_user_by_id(id).await { Ok(user) =\u0026gt; match user { None =\u0026gt; (StatusCode::NOT_FOUND, StatusCode::NOT_FOUND.as_str()).into_response(), Some(user) =\u0026gt; Json(user).into_response(), }, Err(err) =\u0026gt; { let response = ( StatusCode::INTERNAL_SERVER_ERROR, StatusCode::INTERNAL_SERVER_ERROR.as_str(), ) .into_response(); error!(?err, ?id, ?response, \u0026#34;fetching user by id\u0026#34;); response } } } Pretend there\u0026rsquo;s some work being done.\n#[derive(Debug, serde::Serialize)] struct User { id: u64, name: String, } #[derive(Debug)] struct QueryTimeoutError; #[tracing::instrument(name=\u0026#34;get_user_by_id\u0026#34;, skip_all, fields( user_id = %id ))] async fn get_user_by_id(id: u64) -\u0026gt; Result\u0026lt;Option\u0026lt;User\u0026gt;, QueryTimeoutError\u0026gt; { match id { 1 =\u0026gt; Ok(Some(User { id: 1, name: \u0026#34;bob\u0026#34;.to_owned(), })), 2 =\u0026gt; Ok(Some(User { id: 1, name: \u0026#34;john\u0026#34;.to_owned(), })), 3 =\u0026gt; Ok(None), _ =\u0026gt; Err(QueryTimeoutError), } } Configure the open telemetry exporter.\n#[tokio::main] async fn main() { let file_appender = tracing_appender::rolling::never(\u0026#34;./log\u0026#34;, \u0026#34;app.log\u0026#34;); let (non_blocking, _guard) = tracing_appender::non_blocking(file_appender); let tracer = opentelemetry_otlp::new_pipeline() .tracing() .with_exporter( opentelemetry_otlp::new_exporter() .tonic() .with_timeout(Duration::from_secs(5)) .with_endpoint(\u0026#34;http://localhost:4317\u0026#34;), ) .with_trace_config( opentelemetry_sdk::trace::config() .with_max_events_per_span(64) .with_max_attributes_per_span(16) .with_max_events_per_span(16) .with_resource(Resource::new(vec![KeyValue::new( \u0026#34;service.name\u0026#34;, env!(\u0026#34;CARGO_PKG_NAME\u0026#34;), )])), ) .install_batch(opentelemetry::runtime::Tokio) .expect(\u0026#34;creating exporter\u0026#34;); tracing_subscriber::registry() .with(tracing_subscriber::EnvFilter::new(\u0026#34;INFO\u0026#34;)) .with(tracing_opentelemetry::layer().with_tracer(tracer)) .with(tracing_subscriber::fmt::layer().with_writer(non_blocking)) .init(); let app = Router::new() .route(\u0026#34;/users/:id\u0026#34;, get(handler)); ... } Use the propagate request id middleware.\n#[tokio::main] async fn main() { ... let app = Router::new() .layer(SetRequestIdLayer::new( HeaderName::from_static(constants::REQUEST_ID), RequestUuid::default(), )) // propagate `x-request-id` headers from request to response .layer(PropagateRequestIdLayer::new(HeaderName::from_static( constants::REQUEST_ID, ))) .route(\u0026#34;/users/:id\u0026#34;, get(handler)); ... } Run the app.\ncargo r curl localhost:3000/users/1 curl localhost:3000/users/2 curl localhost:3000/users/3 curl localhost:3000/users/4 curl localhost:3000/users/5 See the logs and traces on your grafana instance.\n","permalink":"https://poorlydefinedbehaviour.github.io/posts/rust_sending_logs_and_traces_to_grafana_cloud/","summary":"\u003ch1 id=\"sending-logs-and-traces-from-a-rust-app-to-grafana-cloud\"\u003eSending logs and traces from a Rust app to Grafana cloud\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/posts/rust_sending_logs_and_traces_to_grafana_cloud/images/grafana-cloud-logs-and-traces-1.png\"\u003e\u003c/p\u003e\n\u003ch2 id=\"run-the-grafana-agent\"\u003eRun the Grafana agent\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003ePut the Grafana agent config in \u003ccode\u003egrafana-agent/agent/agent.yaml\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eserver\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003elog_level\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003edebug\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003elogs\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003econfigs\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003edefault\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003epositions\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#f92672\"\u003efilename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e/tmp/positions.yaml\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003escrape_configs\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      - \u003cspan style=\"color:#f92672\"\u003ejob_name\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003evarlogs\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#f92672\"\u003estatic_configs\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          - \u003cspan style=\"color:#f92672\"\u003etargets\u003c/span\u003e: [\u003cspan style=\"color:#ae81ff\"\u003elocalhost]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#f92672\"\u003elabels\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e              \u003cspan style=\"color:#f92672\"\u003ejob\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003evarlogs\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e              \u003cspan style=\"color:#f92672\"\u003eapp\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003erust-grafana-metrics-logs-traces\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e              \u003cspan style=\"color:#f92672\"\u003e__path__\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e/var/log/app/*log\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003eclients\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      - \u003cspan style=\"color:#f92672\"\u003eurl\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e\u0026lt;grafana-cloud-loki-url\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003etraces\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003econfigs\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003edefault\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003ereceivers\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#f92672\"\u003eotlp\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#f92672\"\u003eprotocols\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          \u003cspan style=\"color:#f92672\"\u003egrpc\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003eremote_write\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      - \u003cspan style=\"color:#f92672\"\u003eendpoint\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003etempo-us-central1.grafana.net:443\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#f92672\"\u003einsecure\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e  \u003cspan style=\"color:#75715e\"\u003e# only add this if TLS is not required\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#f92672\"\u003ebasic_auth\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          \u003cspan style=\"color:#f92672\"\u003eusername\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e\u0026lt;grafana-cloud-tempo-username\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          \u003cspan style=\"color:#f92672\"\u003epassword\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e\u0026lt;grafana-cloud-tempo-password\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003ebatch\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#f92672\"\u003etimeout\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e5s\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#f92672\"\u003esend_batch_size\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e100\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eRun the Grafana agent\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-sh\" data-lang=\"sh\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edocker run \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e  -v $PWD/grafana-agent/data:/etc/agent/data \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e  -v $PWD/grafana-agent/agent.yaml:/etc/agent/agent.yaml \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e  -v $PWD/log:/var/log/app \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e  -p 4317:4317 \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e  grafana/agent:v0.35.0\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"dependencies-being-used\"\u003eDependencies being used\u003c/h2\u003e\n\u003cp\u003eReplace \u003ccode\u003eaxum\u003c/code\u003e with whatever dependency you are using. The ones you\u0026rsquo;ll use no matter the framework are:\u003c/p\u003e","title":"Sending logs and traces to Grafana cloud from your Rust application"},{"content":"\nIt feels like most people are not used to thinking about how things can fail, programming as if things always work as expected is the default modus operandi of most engineers i have talked to. Some examples that come to mind: http requests without handling responses that don\u0026rsquo;t have status 200, no timeouts, no retries, publishing a message to kafka and them updating a database, having a web client orchestrate a transaction across several systems without thinking: what if the user closes the browser tab?\nSince many things actually work as expected most of the time, it is easy to forget that something like the network is an unreliable system where messages can be delayed, lost1 and reordered2 and that most of the time it is the systems and protocols that run on top of the network that need to handle the work necessary to make the network seem reliable.\nDistributed systems literature usually refers to the network connecting two processes as a link. The simplest type of link is called a fair-loss link, when a process P1 send a message M to a process P2, the message is in one of three states: will be delivered in the future, delivered or lost.\nA fair-loss link does not offer any type of delivery guarantee or delivery confirmation because it is an unreliable link. The only thing the sender can do it to send a message and hope it is delivered, the receiver could send another message informing the sender that the message has been delivered but there\u0026rsquo;s no guarantee that the message will be delivered.\nThe two generals problem3 states that there are two friendly generals separated in different camps and they need to coordinate the time to attack because the only way to defeat the enemy is to combine their armies strength, attacking alone means losing the battle.\nA general that wants to attack at a specific time sends a message to the general in the other camp to let them know the time of the attack. The problem is that the message is being carried by a soldier that may be captured, get lost or die. The message is being sent over an unreliable link.\nA general that receives a message specifying the time of the attack needs to let the other general know that the message has been received. Acknowledgement happens by sending a message to the general that sent the first message but again there\u0026rsquo;s no guarantee that the message will ever be delivered because the link is unreliable.\nTurns out that there\u0026rsquo;s no way to guarantee that the generals will reach consensus about when to attack if messages can be completely lost because both generals are always one message away from knowing what the other general wants to do.\nhttps://en.wikipedia.org/wiki/Packet_loss\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://en.wikipedia.org/wiki/Out-of-order_delivery\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://en.wikipedia.org/wiki/Two_Generals%27_Problem\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://poorlydefinedbehaviour.github.io/posts/fair_loss_links_and_two_generals/","summary":"\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/posts/fair_loss_links_and_two_generals/images/spongebob_ol_reliable.jpg\"\u003e\u003c/p\u003e\n\u003cp\u003eIt feels like most people are not used to thinking about how things can fail, programming as if things always work as expected is the default modus operandi of most engineers i have talked to. Some examples that come to mind: http requests without handling responses that don\u0026rsquo;t have status 200, no timeouts, no retries, publishing a message to kafka and them updating a database, having a web client orchestrate a transaction across several systems without thinking: what if the user closes the browser tab?\u003c/p\u003e","title":"Thinking about failure, fair-loss links and two generals"},{"content":"\nA deadlock happens when there\u0026rsquo;s at least one resource that can be only acquired by one process at a time and there\u0026rsquo;s a process P1 that is waiting to acquire a resource currently held by a process P2 and P2 is waiting to acquire a resource currently held by P1.\nThe word process does not mean we are talking about just OS processes.\nThere are two processes: Process A wants to acquire a lock on resource 1 and then a lock on resource 2. Process B wants to acquire a lock on resource 2 and then a lock on resource 1.\nIn this specific execution process A acquires a lock on resource 1 and process B acquires a lock on resource 2, when process A tries to acquire a lock on resource 2 it blocks waiting for process B to release the lock that it is holding on resource 2. The problem is that the lock on resource 2 will never be released because process B is waiting for process A to release the lock on resource 1.\nDatabases are being used as an example but deadlocks and the solutions do not appear only in databases.\nProcess A Process B LOCK 1 LOCK 2 LOCK 2 LOCK 1 RELEASE 1 RELEASE 2 RELEASE 2 RELEASE 1 A table showing the operations performed by each process concurrently. Deadlock occurs at the second set of operations when process A tries to lock resource 2 and process B tries to lock resource 1.\nDeadlocks can be easily avoided in this case by having both processes try to acquire locks on resources in the same order.\nProcess A Process B LOCK 1 LOCK 1 LOCK 2 LOCK 2 RELEASE 1 RELEASE 1 RELEASE 2 RELEASE 2 By having both processes try to acquire the locks in the same order, the process that acquires the first lock will be able to proceed and acquire the other lock while the second process will block waiting for the first lock instead of acquiring another lock. When the first lock is released the process that is waiting for it will be able to proceed.\nProcess A acquires a lock on resource 1, process B tries to acquire the same lock but blocks because the resource is already locked, process A proceeds and acquires a lock on resource 2 while process B is still blocked waiting for the lock on resource 1. Process B will be able to acquire locks on resource 1 and resource 2 only after process A releases them.\n","permalink":"https://poorlydefinedbehaviour.github.io/posts/the_simple_way_to_avoid_deadlocks/","summary":"\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/posts/the_simple_way_to_avoid_deadlocks/images/regular_show_deadlock_1.jpg\"\u003e\u003c/p\u003e\n\u003cp\u003eA deadlock happens when there\u0026rsquo;s at least one resource that can be only acquired by one process at a time and there\u0026rsquo;s a process \u003ccode\u003eP1\u003c/code\u003e that is waiting to acquire a resource currently held by a process \u003ccode\u003eP2\u003c/code\u003e and \u003ccode\u003eP2\u003c/code\u003e is waiting to acquire a resource currently held by \u003ccode\u003eP1\u003c/code\u003e.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eThe word \u003ccode\u003eprocess\u003c/code\u003e does not mean we are talking about just OS processes.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/posts/the_simple_way_to_avoid_deadlocks/images/deadlock_example_1.png\"\u003e\u003c/p\u003e\n\u003cp\u003eThere are two processes: Process \u003ccode\u003eA\u003c/code\u003e wants to acquire a lock on \u003ccode\u003eresource 1\u003c/code\u003e and then a lock on \u003ccode\u003eresource 2\u003c/code\u003e. Process \u003ccode\u003eB\u003c/code\u003e wants to acquire a lock on \u003ccode\u003eresource 2\u003c/code\u003e and then a lock on \u003ccode\u003eresource 1\u003c/code\u003e.\u003c/p\u003e","title":"The simple way to avoid deadlocks"},{"content":"\nAnomalies An anomaly or read phenomena can happen when a transaction reads data that may have been modified by another concurrent transaction.\nDirty read A dirty read happens when a transaction T1 reads data that has been modified by a concurrent transaction T2 that has not has been committed or rolled back yet. T1 ends up working with stale data if T2 does not commit.\nT2 starts executing and sets x to a new value, T1 starts executing and reads x, the value of x is the value just set by T2, T2 rolls back, the value of x is not persisted to the database but T1 will move forward with the stale value of x that was written before T2 rolled back.\nNon-repeatable read A non-repeatable read happens when a transaction T1 reads a value x before and after it is modified by a transaction T2 and T2 has committed. If x has been assigned a new value by T2, T1 will have seen two different values for the same variable in a transaction.\nT1 reads x with value 0, T2 updates x to 1 and commits and then T1 reads x again but the value is now 1.\nPhantom reads A phantom read is almost like a non-repeatable read but it is said to happen when more than one row is being selected.\nA transaction T1 executes a statement to select a set of rows, a concurrent transaction T2 executes a statement that modifies, inserts or deletes a row and commits. T1 executes the first statement again hoping to select the same set of rows but a different set is returned.\nT1 starts executing and selects a set of rows from a, while T1 executing, T2 inserts a new row into a and commits, when T1 tries to read the same set of rows from a it gets a different set because a new element was added by T2.\nLost updates A lost update may happen when transactions T1 and T2 both read and try to update x using the just read value. Similarly to what happens when two threads try to update a variable without synchronization, one of the transactions may read x just a little bit before the other one updates it and end up working with a stale value.\nIn this example, there are two transactions T1and T2. Both are executing concurrently and both read x and increment its value by 1, if x had the value 0 the expectation would be that the new value of x would be 2 after both transactions commit but the reality is that the new value of x will be 1 because both transactions read 0 before incrementing it by 1.\nDirty writes A dirty write happens when a transaction reads an uncommitted value from another transaction, modifies and writes it.\nT1 and T2 are executing concurrently, T2 sets x to 1, T1 reads x with value 1, T2 rolls back, T1 increments x by 1 resulting in 2 and writes it. The value of x is 2 instead of its previous value increased by 1.\nWrite skew A write skew happens when concurrent transactions respect database invariants(e.g table.x \u0026gt; 0) but when committed break one or more invariants.\nAssuming that a.balance + b.balance \u0026gt; 0 is an invariant, both transactions T1 and T2 respect the invariant on their own and are allowed to commit, but after both transactions are committed the invariant is broken.\nIsolation levels Read and write anomalies can be avoided by choosing the right isolation level.\nRead uncomitted Dirty reads are allowed, transactions can read data that has been modified by other transactions even if they have not been committed yet.\nRead committed Allows transaction T1 to read data that has been committed by other transactions while T1 is still executing, repeatable reads are not guaranteed.\nRepeatable reads Same as read committed but reading x will always result in the same value.\nSerializable Each transaction behaves like they are executed to completion before other transactions starts executing.\nReferences Database internals\n","permalink":"https://poorlydefinedbehaviour.github.io/posts/isolation_levels/","summary":"\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/posts/isolation_levels/images/tom_1.png\"\u003e\u003c/p\u003e\n\u003ch2 id=\"anomalies\"\u003eAnomalies\u003c/h2\u003e\n\u003cp\u003eAn anomaly or read phenomena can happen when a transaction reads data that may have been modified by another concurrent transaction.\u003c/p\u003e\n\u003ch3 id=\"dirty-read\"\u003eDirty read\u003c/h3\u003e\n\u003cp\u003eA \u003ccode\u003edirty read\u003c/code\u003e happens when a transaction \u003ccode\u003eT1\u003c/code\u003e reads data that has been modified by a concurrent transaction \u003ccode\u003eT2\u003c/code\u003e that has not has been committed or rolled back yet. \u003ccode\u003eT1\u003c/code\u003e ends up working with stale data if \u003ccode\u003eT2\u003c/code\u003e does not commit.\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/posts/isolation_levels/images/dirty_read_1.png\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eT2\u003c/code\u003e starts executing and sets \u003ccode\u003ex\u003c/code\u003e to a new value, \u003ccode\u003eT1\u003c/code\u003e starts executing and reads \u003ccode\u003ex\u003c/code\u003e, the value of \u003ccode\u003ex\u003c/code\u003e is the value just set by \u003ccode\u003eT2\u003c/code\u003e, \u003ccode\u003eT2\u003c/code\u003e rolls back, the value of \u003ccode\u003ex\u003c/code\u003e is not persisted to the database but \u003ccode\u003eT1\u003c/code\u003e will move forward with the stale value of \u003ccode\u003ex\u003c/code\u003e that was written before \u003ccode\u003eT2\u003c/code\u003e rolled back.\u003c/p\u003e","title":"Database anomalies and isolation levels"},{"content":"The problem You are developing an application backed by a database, something happens and then several of your users try to access the same content. Several requests are sent to your backend at almost the same time and your backend hits the database once for each request to fetch the same data.\nFetching the data only once If N requests asking for the same data arrive at the backend at around the same time, the backend could hit the database to fetch the data when the first request arrives and force the other requests to await until the data is fetched. When a response to the request sent to the database arrives at the backend with the data, the data can be shared with the requests that are waiting for it.\nSeveral servers If there\u0026rsquo;s more than one server it is possible that the number of requests sent to the database is equal to the number of servers because requests are load balanced between the servers available.\nIf there\u0026rsquo;s a large number of servers, it may be desirable to route requests for the same data to the same server to decrease the number of requests sent to the database. In this case every request to GET X is routed to the first server.\nExample Given a route to fetch some data by its id, the id can be used to decide when a request can be deduplicated.\nasync fn handler(id: u64) -\u0026gt; Response { let data = deduplicator.dedup(id, fetch(id)).await; Response::new(data) } Example deduplicator implementation\nNotes This post was inspired by Discord\u0026rsquo;s How Discord stores trillions of messages\n","permalink":"https://poorlydefinedbehaviour.github.io/posts/request_coalescing/","summary":"\u003ch2 id=\"the-problem\"\u003eThe problem\u003c/h2\u003e\n\u003cp\u003eYou are developing an application backed by a database, something happens and then several of your users try to access the same content.\nSeveral requests are sent to your backend at almost the same time and your backend hits the database once for each request to fetch the same data.\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/posts/request_coalescing/images/users_hitting_backend_at_the_same_time_1.png\"\u003e\u003c/p\u003e\n\u003ch2 id=\"fetching-the-data-only-once\"\u003eFetching the data only once\u003c/h2\u003e\n\u003cp\u003eIf \u003ccode\u003eN\u003c/code\u003e requests asking for the same data arrive at the backend at around the same time, the backend could hit the database to fetch the data when the first request arrives and force the other requests to await until the data is fetched. When a response to the request sent to the database arrives at the backend with the data, the data can be shared with the requests that are waiting for it.\u003c/p\u003e","title":"Avoid overloading your systems: Request coalescing"},{"content":"Uber has adopted Go as its primary programming language for developing microservices and has a post on its blog called Data Race Patterns in Go where they talk about data races found in their Go codebase.\nI was reading it and thought to myself that many of the problems presented in the post would not even compile in Rust. Can Rust help us avoid writing code with common data races?\nExamples written in Rust are not meant do be idiomatic Rust and do not wait for outputs generated by tasks for simplicity because the examples written in Go do not wait as well.\nWhat is a data race A data race happens when a task tries to access memory while another task tries to write to it at the same time. The task that\u0026rsquo;s accessing memory may read a value that was just modified, is being modified or will be modified and end up processing an unexpected value.\nLoop index variable capture Go has the range loop to iterate over a collection.\nfor index, value := range list { ... } index is the index of the element in the list and value is the value at that index. The problem with it is that value is not a new variable at each iteration, it is just modified to have the value of the current iteration. This behaviour in combination with the fact that closures capture variables by reference instead of by copy can easily lead to concurrency bugs.\nWhile ProcessJob is running, the range loop will be updating the job variable which was captured by reference by ProcessJob, it is possible that by that ProcessJob gets to run, job will be a reference to the last job in jobs because the variable has been updated.\nfor _, job := range jobs { go func(){ ProcessJob(job) }() } There\u0026rsquo;s a proposal to change for range semantics in Go.\nRust provides concurrency through stackless coroutines, also known as async and await, the only thing we need to do is to choose a async runtime. I chose to use tokio which is the most popular runtime in the Rust ecosystem at the moment.\nWe can iterate through any collection that implements the Iterator trait by using the for in construct.\nfor job in jobs { tokio::spawn(process_job(job)); } for job in jobs is syntax sugar for for job in jobs.into_iter() \u0026ndash; it also is syntax sugar for advancing an iterator, but we don\u0026rsquo;t care about that \u0026ndash; which lets us iterate over the values in a collection by consuming the collection.\nWe could iterate over references to the values inside of the collection by using for job in jobs.iter() which creates an iterator that yields a reference to each value of the collection, if needed but the code would not compile in this case because a task(think goroutine) may run for longer than the amount of time the value being referenced by it lives for.\nerror[E0597]: `jobs` does not live long enough --\u0026gt; src/for_range_and_closures.rs:6:16 | 6 | for job in jobs.iter() { | ^^^^^^^^^^^ borrowed value does not live long enough 7 | tokio::spawn(process_job(job)); | ---------------- argument requires that `jobs` is borrowed for `\u0026#39;static` 8 | } 9 | } | - `jobs` dropped here while still borrowed There\u0026rsquo;s no need to use a closure but for completeness sake here it is and it would not compile as well.\nerror[E0597]: `jobs` does not live long enough --\u0026gt; src/for_range_and_closures.rs:14:16 | 14 | for job in jobs.iter() { | ^^^^^^^^^^^ borrowed value does not live long enough 15 | tokio::spawn((|| async { process_job(job) })()); | -------------------------- returning this value requires that `jobs` is borrowed for `\u0026#39;static` 16 | } 17 | } | - `jobs` dropped here while still borrowed Data race due to idiomatic err variable capture Errors are values in Go and failable functions usually return a tuple with two values, one value being the result if the function succeeded and the other being an error if the function failed.\nIn this example, processing is happening concurrently between the current function and a goroutine. We want to return an error if the goroutine or the current function fails, so they both try to assign to the err variable so the error can be returned to the caller of the current function.\nx, err := Foo() if err != nil { ... } go func() { var y int // Oops, err was captured by reference. y, err = Bar() if err != nil { ... } }() var z int // err is being written to by the goroutine as well. z, err = Baz() if err != nil { ... } This is an example of a data race because the err variable is being modified by the current function and by the goroutine without synchronization.\nAs expected, the same example does not compile in Rust for several reasons.\nerror[E0373]: async block may outlive the current function, but it borrows `result`, which is owned by the current function --\u0026gt; src/goroutine_var_reference_data_race.rs:41:24 | 41 | tokio::spawn(async { | ________________________^ 42 | | // Trying to assign to the `result` captured . 43 | | result = bar(); | | ------ `result` is borrowed here 44 | | if result.is_err() { 45 | | // ... 46 | | } 47 | | }); | |_____^ may outlive borrowed value `result` | = note: async blocks are not executed immediately and must either take a reference or ownership of outside variables they use help: to force the async block to take ownership of `result` (and any other referenced variables), use the `move` keyword | 41 | tokio::spawn(async move { | ++++ error[E0506]: cannot assign to `result` because it is borrowed --\u0026gt; src/goroutine_var_reference_data_race.rs:51:5 | 41 | tokio::spawn(async { | _____-__________________- | |_____| | || 42 | || // Trying to assign to the `result` captured . 43 | || result = bar(); | || ------ borrow occurs due to use in generator 44 | || if result.is_err() { 45 | || // ... 46 | || } 47 | || }); | ||_____-- argument requires that `result` is borrowed for `\u0026#39;static` | |_____| | borrow of `result` occurs here ... 51 | result = baz(); | ^^^^^^ assignment to borrowed `result` occurs here error[E0502]: cannot borrow `result` as immutable because it is also borrowed as mutable --\u0026gt; src/goroutine_var_reference_data_race.rs:52:8 | 41 | tokio::spawn(async { | _____-__________________- | |_____| | || 42 | || // Trying to assign to the `result` captured . 43 | || result = bar(); | || ------ first borrow occurs due to use of `result` in generator 44 | || if result.is_err() { 45 | || // ... 46 | || } 47 | || }); | ||_____-- argument requires that `result` is borrowed for `\u0026#39;static` | |_____| | mutable borrow occurs here ... 52 | if result.is_err() { | ^^^^^^^^^^^^^^^ immutable borrow occurs here We could try to translate the Go version to Rust and make it work by using atomic reference counting with Arc and a Mutex.\nlet result = foo(); if result.is_err() { // ... } let result = Arc::new(Mutex::new(result)); let result_clone = Arc::clone(\u0026amp;result); let task = tokio::spawn(async move { let mut result = result_clone.lock().await; *result = bar(); if result.is_err() { // ... } }); { let mut result = result.lock().await; *result = baz(); if result.is_err() { // ... } } task.await; Arc::try_unwrap(result).unwrap().into_inner() Bugs due to copies of a slice\u0026rsquo;s internal state Go slices are growable lists made of a pointer to a buffer, a capacity and a length. We can add elements to a slice by calling append, if the slice is full, it will grow to accommodate the new element.\nThe problem here is that by passing myResults as argument to the closure, we are copying the length, the capacity and the pointer to the buffer of the slice because function arguments are passed by copy in Go.\nWhen we try to append to myResults, the copy the goroutine holds may have the wrong length and capacity because myResults may have need to grow when another goroutine appended to it.\nfunc ProcessAll(uuids []string) { var myResults []string var mutex sync.Mutex safeAppend := func(res string) { mutex.Lock() myResults = append(myResults, res) mutex.Unlock() } for _, uuid := range uuids { go func(id string, results []string) { res := Foo(id) safeAppend(res) }(uuid, myResults) } } Like Go, Rust function arguments are passed by copy as well but unlike Go, Rust\u0026rsquo;s Vec, the growable array, is not passed by reference by default.\nIf we try to translate the Go code to Rust, it does not even compile. We create a closure safe_append to ensure the mutex is always locked before modyfing the list of results, it does not compile because we try to use the closure inside several tasks but the closure gets moved after the first loop iteration.\nfn process_all(uuids: Vec\u0026lt;String\u0026gt;) { let mut my_results = Vec::new(); let mutex = Mutex::new(()); let mut safe_append = |res: String| async move { mutex.lock().await; my_results.push(res); }; for uuid in uuids { tokio::spawn(async { let res = foo(uuid); safe_append(res); }); } } error[E0382]: use of moved value: `safe_append` --\u0026gt; src/mutex_slice_append.rs:34:28 | 34 | tokio::spawn(async { | ____________________________^ 35 | | let res = foo(uuid); 36 | | safe_append(res); | | ----------- use occurs due to use in generator 37 | | }); | |_________^ value moved here, in previous iteration of loop The solution is simple as well. Rust\u0026rsquo;s Mutex is meant to hold the data being protected instead of just acting like a type of flag. Use reference counting so each task can access the same mutex and modify the data held by it.\nfn process_all_2(uuids: Vec\u0026lt;String\u0026gt;) { let my_results = Arc::new(Mutex::new(Vec::new())); for uuid in uuids { let my_results_clone = Arc::clone(\u0026amp;my_results); tokio::spawn(async move { let res = foo(uuid); let mut my_results = my_results_clone.lock().await; my_results.push(res); }); } } The mutex is unlocked automatically on Drop thanks to RAII.\nData races because maps are not thread-safe In this example, orders are being processed concurrently and eventual errors are added to a map where the key is the order id and the error is the value so we can know which orders were not processed.\nThe problem is that the map is not thread-safe which means that since there are several goroutines modifying the map without synchronization it may end up in an unexpected state.\nfunc processOrders(uuids []string) error { var errMap = make(map[string]error) for _, uuid := range uuids { go func(uuid string) { orderHandle, err := GetOrder(uuid) if err != nil { // Data race errMap[uuid] = err return } ... }(uuid) } return combineErrors(errMap) } As expected, the same code does not compile in Rust because multiple tasks(think goroutine) may not have mutable access to a value at the same time without synchronization.\nfn process_orders(uuids: Vec\u0026lt;String\u0026gt;) -\u0026gt; Result\u0026lt;(), Box\u0026lt;dyn std::error::Error\u0026gt;\u0026gt; { let mut err_map = HashMap::new(); for uuid in uuids { tokio::spawn(async { match get_order(\u0026amp;uuid).await { Err(err) =\u0026gt; { err_map.insert(uuid, err); } Ok(value) =\u0026gt; { // ... } } }); } combine_errors(err_map) } error[E0499]: cannot borrow `err_map` as mutable more than once at a time --\u0026gt; src/thread_unsafe_hashmap.rs:23:28 | 23 | tokio::spawn(async { | _________-__________________^ | |_________| | || 24 | || match get_order(\u0026amp;uuid).await { 25 | || Err(err) =\u0026gt; { 26 | || err_map.insert(uuid, err); | || ------- borrows occur due to use of `err_map` in generator ... || 31 | || } 32 | || }); | ||_________^- argument requires that `err_map` is borrowed for `\u0026#39;static` | |_________| | `err_map` was mutably borrowed here in the previous iteration of the loop The correct version is also pretty simple in this case. Use a mutex to protect the data so it can be mutated by several tasks concurrently and reference counting to ensure the every task operates on the data guarded by the same mutex.\nfn process_orders_2(uuids: Vec\u0026lt;String\u0026gt;) -\u0026gt; Result\u0026lt;(), Box\u0026lt;dyn std::error::Error\u0026gt;\u0026gt; { let mut err_map = Arc::new(Mutex::new(HashMap::new())); for uuid in uuids { let err_map_clone = Arc::clone(\u0026amp;err_map); tokio::spawn(async move { match get_order(\u0026amp;uuid).await { Err(err) =\u0026gt; { let mut err_map = err_map_clone.lock().await; err_map.insert(uuid, err); } Ok(value) =\u0026gt; { // ... } } }); } combine_errors(\u0026amp;err_map) } Breaking a mutex by copying it around Function arguments are copied in Go. Its not uncommon to commit the mistake of passing a mutex by copy to multiple goroutines in order to synchronize access to a piece of data, the problem is that a mutex will be copied \u0026ndash; including its internal state \u0026ndash; when passed to a goroutine, which means each goroutine will have each its own mutex and all of them will be able to acquire it at the same time.\nvar a int func CriticalSection(m synx.Mutex) { m.Lock() a += 1 m.Unlock() } func main() { mutex := sync.Mutex{} go CriticalSection(mutex) // mutex is copied go CriticalSection(mutex) // mutex is copied } Rust mutexes are supposed to hold the data they protect instead of acting as a flag and when a variable is passed as argument to a function, we say that the value has been moved and it cannot be accessed using the old variable anymore, for this reason, the code does not compile.\nuse tokio::sync::Mutex; fn main() { let mutex = Mutex::new(0); tokio::spawn(critical_section(mutex)); tokio::spawn(critical_section(mutex)); } async fn critical_section(mutex: Mutex\u0026lt;i32\u0026gt;) { let mut value = mutex.lock().await; *value += 1; } --\u0026gt; src/mutex.rs:21:35 | 19 | let mutex = Mutex::new(0); | ----- move occurs because `mutex` has type `tokio::sync::Mutex\u0026lt;i32\u0026gt;`, which does not implement the `Copy` trait 20 | tokio::spawn(critical_section(mutex)); | ----- value moved here 21 | tokio::spawn(critical_section(mutex)); | ^^^^^ value used here after move The incorrect version does not compile and the correct version is pretty easy to write using reference couting to ensure every task uses the same mutex.\nfn main() { let mutex = Arc::new(Mutex::new(0)); tokio::spawn(critical_section(Arc::clone(\u0026amp;mutex))); tokio::spawn(critical_section(Arc::clone(\u0026amp;mutex))); } async fn critical_section(mutex: Arc\u0026lt;Mutex\u0026lt;i32\u0026gt;\u0026gt;) { let mut value = mutex.lock().await; *value += 1; } Conclusion Rust can not stop us from making every kind of mistake but it does seem like it can help us avoid at least some concurrency bugs.\n","permalink":"https://poorlydefinedbehaviour.github.io/posts/rust_compile_time_safety_1/","summary":"\u003cp\u003eUber has adopted \u003ca href=\"https://github.com/golang/go\"\u003eGo\u003c/a\u003e as its primary programming language for developing microservices and has a post on its blog called \u003ca href=\"https://www.uber.com/en-BR/blog/data-race-patterns-in-go/\"\u003eData Race Patterns in Go\u003c/a\u003e where they talk about data races found in their Go codebase.\u003c/p\u003e\n\u003cp\u003eI was reading it and thought to myself that many of the problems presented in the post would not even compile in Rust. Can Rust help us avoid writing code with common data races?\u003c/p\u003e\n\u003cp\u003eExamples written in Rust are not meant do be idiomatic Rust and do not wait for outputs generated by tasks for simplicity because the examples written in Go do not wait as well.\u003c/p\u003e","title":"Do Go programs with common data races compile in Rust?"},{"content":"What is a log A log is just a immutable sequence of records wih strong ordering semantics that can be used to provide durability, replication and to model consensus. It is usually a 0 indexed file that new entries are appended to because expensive disk seeks can usually be avoided when appending to a file1.\nNot to be confused with the type of logs most people are used to: application logs that are meant to be read by humans although application logs are a degenerative case of the log we are talking about2.\nWhat i called a record is a entry in the log. The entry can be anything in any format.\nYou have seen a log before Databases Postgres uses a write-ahead log to ensure data is not lost if a crash happens3, to enable replication and change data capture. Tables and indexes are modified only after the change been written to the log in which case if a crash happens, the log can be used to go back to a valid state.\nDatomic takes it to the next level by being a log-centric database4.\nFile systems Some file systems known as journaling file systems5 write changes to a log before actually applying them to the internal file system structures to enable crash recovery and avoid data corruption.\nDistributed systems Distributed systems such as Kafka which considers a message as accepted by the cluster after the quorum of in-sync replicas(configuration dependent) have written the message to their log6\nConsensus Consensus algorithms such as Raft7 aka replicated state machines8.\nOperating systems: Three easy pieces - Hard Disk Drives\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nI Love logs\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nPostgres write-ahead log\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nRich Hickey: Deconstructing the Database\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nJournaling file-system\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nKafka: The Definitive Guide: Real-Time Data and Stream Processing at Scale\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nIn Search of an Understandable Consensus Algorithm\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nReplicated state machines\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://poorlydefinedbehaviour.github.io/posts/logs/","summary":"\u003ch1 id=\"what-is-a-log\"\u003eWhat is a log\u003c/h1\u003e\n\u003cp\u003eA log is just a immutable sequence of records wih strong ordering semantics that can be used to provide durability, replication and to model consensus. It is usually a 0 indexed file that new entries are appended to because expensive disk seeks can usually be avoided when appending to a file\u003csup id=\"fnref:1\"\u003e\u003ca href=\"#fn:1\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e1\u003c/a\u003e\u003c/sup\u003e.\u003c/p\u003e\n\u003cp align=\"center\"\u003e\n\u003cimg src=\"https://user-images.githubusercontent.com/17282221/168452116-a751154f-ec58-4a65-91f5-a90269529963.png\" /\u003e\n\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eNot to be confused with the type of logs most people are used to: application logs that are meant to be read by humans although application logs are a degenerative case of the log we are talking about\u003csup id=\"fnref:2\"\u003e\u003ca href=\"#fn:2\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e2\u003c/a\u003e\u003c/sup\u003e.\u003c/p\u003e","title":"Logs"},{"content":"Contributing for the first time I have been trying to force myself to do harder things lately in order to practice and learn new things. Since i\u0026rsquo;m doing Rust full time now, i thought it would be a good a idea to contribute to the ecosystem, so i went and enabled notifications for a bunch of Rust related projects and for the Rust project itself.\nI thought i would be able to keep up with the notifications. I was wrong. (obviously) I actually go through a few notifications each day in hope to find something to work on.\nFirst tokio contribution Rust supports async await but it does not come with a runtime by default. It is left for the user to define which runtime their program will use and tokio is the most popular one.\nI was going through my notifications as usual and one issue caught my attention: someone wanted to add a method to get the address the UdpSocket is connected to.\nIt seemed easy enough so i went and claimed it:\nThe implementation was actually pretty simple since mio already had a method that does exact what i needed.\nFrom mio Github repository: Mio is a fast, low-level I/O library for Rust focusing on non-blocking APIs and event notification for building high performance I/O apps with as little overhead as possible over the OS abstractions.\nEverything went as expected and my change got released on tokio 1.18.0.\nFirst Rust contribution A few days went by and a Rust issue caught my attention: a compiler message was incorrect, it turns out, fixing compiler messages is one of the main ways people start contributing to the Rust compiler.\nAnyway, Rust is known for its nice error messages, it does have good error messages indeed but they come at a development cost. The Rust compiler has several functions and methods just to decide which error message to show the user.\nThe offender It is actually valid to add : after a type variable\nfn foo\u0026lt;T:\u0026gt;(t: T) { t.clone(); } note the : after T\nThe compiler would then complain that Clone is not impleted for T and suggest it to be implemented\nerror[E0599]: no method named `clone` found for type parameter `T` in the current scope --\u0026gt; src/lib.rs:2:7 | 2 | t.clone(); | ^^^^^ method not found in `T` | = help: items from traits can only be used if the type parameter is bounded by the trait help: the following trait defines an item `clone`, perhaps you need to restrict type parameter `T` with it: | 1 | fn foo\u0026lt;T: Clone:\u0026gt;(t: T) { | ~~~~~~~~ note there is an extra : after Clone in the suggestion\nI thought it was easy enough and decided to fix it.\nTesting that the compiler error messages are correct is pretty easy, Rust calls this type of test an ui test.\nAll i needed to do was to add a file containing the code that\u0026rsquo;s supposed to error to the ui folder.\n~src/test/ui/traits/issue-95898.rs // Test for #95898: The trait suggestion had an extra `:` after the trait. // edition:2021 fn foo\u0026lt;T:\u0026gt;(t: T) { t.clone(); //~^ ERROR no method named `clone` found for type parameter `T` in the current scope } fn main() {} ~^ ERROR tells the test runner that the error is expected and the test fails if the error does not occur\nand a .stderr file containing the expected error message\n~src/test/ui/traits/issue-95898.stderr error[E0599]: no method named `clone` found for type parameter `T` in the current scope --\u0026gt; $DIR/issue-95898.rs:5:7 | LL | t.clone(); | ^^^^^ method not found in `T` | = help: items from traits can only be used if the type parameter is bounded by the trait help: the following trait defines an item `clone`, perhaps you need to restrict type parameter `T` with it: | LL | fn foo\u0026lt;T: Clone\u0026gt;(t: T) { | ~~~~~~~~ error: aborting due to previous error For more information about this error, try `rustc --explain E0599`. Note that we expect the suggestion to be correct in the .stderr file\nIt took me some time to get used to the compiler but the fix was really easy thanks to WaffleLapkin who was working on a similar issue.\nSecond tokio contribution tokio has the join! macro that can be used when we want to wait for several futures to complete before doing something.\nThink Promise.all if javascript is your thing.\nasync fn process_something_1() { ... } async fn process_something_2() { ... } #[tokio::main] async fn main() { let (result_1, result_2) = tokio::join!(result_1, result_2); ... } Future based concurrency is a cooperative model, it is pretty easy for one task to monopolize processing time if we are not careful. One way to work around this problem is to not allow a task to run forever without being interrupted by giving each task a budget and force the task to yield control back to the runtime whenever its budget is exceeded.\nTask and Future will be used interchangeably\ntokio does the budget think per task and each time a task interacts with a resource, its budget is decreased until it reaches 0 and control is yielded back to the scheduler.\nEach task starts with a budget of 128 and the budget is consumed when interacting with a resource (a Semaphore, for example)\nuse std::sync::Arc; use std::time::Duration; use tokio::sync::Semaphore; async fn foo() { // Consuming a resource decreases the budget by 1. tokio::time::sleep(Duration).await; } async fn foo() { // Consuming a resource decreases the budget by 1. let _permit = permits.clone().acquire_owned().await.unwrap(); } #[tokio::main] async fn main() { let permits = Arc::new(Semaphore::new(1)); // NOTE: join! creates a new task with a budget of 128 let _ = tokio::join!( foo(), bar(Arc::clone(\u0026amp;permits)), ); } The point of giving a budget to each task to stop bad tasks from starving other tasks but it turns out, it is still possible for one task to starve other tasks because join! polls every future inside the same task which means every future passed to join! shares the same task budget of 128.\nNote that join! creates a new task\nA task can starve other tasks by just consuming the whole budget of the task that invoked join! so by the time the other tasks passed to join! are polled, the budget is already 0 which causes them to yield control back to the runtime.\nuse std::sync::Arc; use tokio::sync::Semaphore; #[tokio::main] async fn main() { let permits = Arc::new(Semaphore::new(1)); // join! polls futures in the order they are passed to it. tokio::join!( // This future will be polled first. non_cooperative_task(Arc::clone(\u0026amp;permits)), // This future will be polled second. poor_little_task(permits) ); } async fn non_cooperative_task(permits: Arc\u0026lt;Semaphore\u0026gt;) { // This future will yield back to the runtime after the loop runs 128 times. loop { let _permit = permits.clone().acquire_owned().await.unwrap(); } } // `non_cooperative_task` has been polled and now it is this futures turn. // The bad thing is that `non_cooperative_task` consumed the whole budget // and there\u0026#39;s nothing left for this future to spend. async fn poor_little_task(permits: Arc\u0026lt;Semaphore\u0026gt;) { loop { // Even though this future should be able to acquire the Semaphore, // acquire_owned().await will return Poll::Pending because the budget of // the current task is 0. let _permit = permits.clone().acquire_owned().await.unwrap(); // This println! never gets to run. println!(\u0026#34;Hello!\u0026#34;) } } Poll is the type returned when the runtime checks if a Future is completed. Poll::pending means the Future is not ready. In this case, the Future is actually ready but since it has no budget to spend, it pretends it isn\u0026rsquo;t ready.\nFirst try At first i thought we would just be able to give each future passed to join! its own budget instead of letting them share the current task budget.\nBy current task budget, i mean the budget of the task that invoked join!\njoin! is implemented as declarative macro\nmacro_rules! join { (@ { // One `_` for each branch in the `join!` macro. This is not used once // normalization is complete. ( $($count:tt)* ) // Normalized join! branches $( ( $($skip:tt)* ) $e:expr, )* }) =\u0026gt; {{ use $crate::macros::support::{maybe_done, poll_fn, Future, Pin}; use $crate::macros::support::Poll::{Ready, Pending}; // Safety: nothing must be moved out of `futures`. This is to satisfy // the requirement of `Pin::new_unchecked` called below. let mut futures = ( $( maybe_done($e), )* ); poll_fn(move |cx| { let mut is_pending = false; $( // Extract the future for this branch from the tuple. let ( $($skip,)* fut, .. ) = \u0026amp;mut futures; // Safety: future is stored on the stack above // and never moved. let mut fut = unsafe { Pin::new_unchecked(fut) }; // Try polling if fut.poll(cx).is_pending() { is_pending = true; } )* if is_pending { Pending } else { Ready(($({ // Extract the future for this branch from the tuple. let ( $($skip,)* fut, .. ) = \u0026amp;mut futures; // Safety: future is stored on the stack above // and never moved. let mut fut = unsafe { Pin::new_unchecked(fut) }; fut.take_output().expect(\u0026#34;expected completed future\u0026#34;) },)*)) } }).await }}; // ===== Normalize ===== (@ { ( $($s:tt)* ) $($t:tt)* } $e:expr, $($r:tt)* ) =\u0026gt; { $crate::join!(@{ ($($s)* _) $($t)* ($($s)*) $e, } $($r)*) }; // ===== Entry point ===== ( $($e:expr),* $(,)?) =\u0026gt; { $crate::join!(@{ () } $($e,)*) }; } So i went on and just gave each future its own budget before polling them.\nmacro_rules! join { ... $( // Extract the future for this branch from the tuple. let ( $($skip,)* fut, .. ) = \u0026amp;mut futures; // Safety: future is stored on the stack above // and never moved. let mut fut = unsafe { Pin::new_unchecked(fut) }; // Try polling if crate::coop::budget(|| fut.poll(cx)).is_pending() { is_pending = true; } )* ... } Note that i added crate::coop::budget\nTurns out this doesn\u0026rsquo;t work. It is still pretty easy to create a future that never yields even though it consumes its whole budget:\n... loop { tokio::join!(sem.acquire()); } The future would spend its budget but not the budget of the surrounding task, causing it to never yield.\nSecond try Each time the task created by join! is polled, poll a different future first so as time goes by, every future gets a chance to make progress.\nI took a look at select! and it is able to do just that (up to 64 branches) so i took note and modified join!.\nmacro_rules! join { ... let mut start = 0; ... // BRANCHES is the number of futures passed to join!. for i in 0..BRANCHES { let branch; #[allow(clippy::modulo_one)] { branch = (start + i) % BRANCHES; } match { $( // $crate::count! will return the number of tokens passed to it // up to 64 tokens. $crate::count!( $($skip)* ) =\u0026gt; { // Extract the future for this branch from the tuple. let ( $($skip,)* fut, .. ) = \u0026amp;mut futures; // Safety: future is stored on the stack above // and never moved. let mut fut = unsafe { Pin::new_unchecked(fut) }; // Try polling if fut.poll(cx).is_pending() { is_pending = true; } } )* } #[allow(clippy::modulo_one)] { start = (start + 1) % BRANCHES; } ... } This actually works but $crate::count! can only count up to 64:\n#[macro_export] #[doc(hidden)] macro_rules! count { () =\u0026gt; { 0 }; (_) =\u0026gt; { 1 }; (_ _) =\u0026gt; { 2 }; (_ _ _) =\u0026gt; { 3 }; ... // up to 64 } aaaand\u0026hellip; join! accepts up to 125 futures without changing the recursion limit so this solution wasn\u0026rsquo;t accepted because it would be a breaking change.\nThird try Start the polling round in a different future each time still seems like a good idea. To bypass $crate::count!\u0026rsquo;s limitation, i decided to use a procedural macro.\nNot actually showing code for this one because it is too long\nTurns out people don\u0026rsquo;t like procedural macros very much and it was not accepted.\nFourth try Still the same solution but implemented in a different way. What if instead of using $crate::count! inside the macro to get the index of a future, we counted up front?\njoin! already does some normalization before actually processing the input, so i modified the normalization branches to pair the future index with the future itself.\nmacro_rules! join { (@ { // One `_` for each branch in the `join!` macro. This is not used once // normalization is complete. ( $($count:tt)* ) // The expression `0+1+1+ ... +1` equal to the number of branches. ( $($total:tt)* ) // Normalized join! branches $( ( $($skip:tt)* ) ( $($branch_index:tt)* ) $e:expr, )* }) =\u0026gt; {{ ... let mut start = 0; ... // BRANCHES is the number of futures passed to join!. for i in 0..BRANCHES { let branch; #[allow(clippy::modulo_one)] { branch = (start + i) % BRANCHES; } $( { const INDEX: u32 = $($branch_index)*; if branch == INDEX { // Extract the future for this branch from the tuple. let ( $($skip,)* fut, .. ) = \u0026amp;mut futures; // Safety: future is stored on the stack above // and never moved. let mut fut = unsafe { Pin::new_unchecked(fut) }; // Try polling if fut.poll(cx).is_pending() { is_pending = true; } } } )* } #[allow(clippy::modulo_one)] { start = (start + 1) % BRANCHES; } ... }}; // ===== Normalize ===== (@ { ( $($s:tt)* ) ( $($n:tt)* ) $($t:tt)* } $e:expr, $($r:tt)* ) =\u0026gt; { // i\u0026#39;m new ▼ $crate::join!(@{ ($($s)* _) ($($n)* + 1) $($t)* ($($s)*) ($($n)*) $e, } $($r)*) }; // ===== Entry point ===== ( $($e:expr),* $(,)?) =\u0026gt; { // i\u0026#39;m new ▼ $crate::join!(@{ () (0) } $($e,)*) }; } It works but could be faster. Say we pass 5 futures to join!, how many times would the if statements that check if it is the future\u0026rsquo;s turn to be polled conditions be checked?\nFifth try (the last one) PR\nThe same idea still, poll a different future first every time, except we avoid checking if statement conditions without necessity.\nmacro_rules! join { (@ { // One `_` for each branch in the `join!` macro. This is not used once // normalization is complete. ( $($count:tt)* ) // The expression `0+1+1+ ... +1` equal to the number of branches. ( $($total:tt)* ) // Normalized join! branches $( ( $($skip:tt)* ) $e:expr, )* }) =\u0026gt; {{ use $crate::macros::support::{maybe_done, poll_fn, Future, Pin}; use $crate::macros::support::Poll::{Ready, Pending}; // Safety: nothing must be moved out of `futures`. This is to satisfy // the requirement of `Pin::new_unchecked` called below. let mut futures = ( $( maybe_done($e), )* ); // Each time the future created by poll_fn is polled, a different future will be polled first // to ensure every future passed to join! gets a chance to make progress even if // one of the futures consumes the whole budget. // // This is number of futures that will be skipped in the first loop // iteration the next time. let mut skip_next_time: u32 = 0; poll_fn(move |cx| { const COUNT: u32 = $($total)*; let mut is_pending = false; let mut to_run = COUNT; // The number of futures that will be skipped in the first loop iteration. let mut skip = skip_next_time; skip_next_time = if skip + 1 == COUNT { 0 } else { skip + 1 }; // This loop runs twice and the first `skip` futures // are not polled in the first iteration. loop { $( if skip == 0 { if to_run == 0 { // Every future has been polled break; } to_run -= 1; // Extract the future for this branch from the tuple. let ( $($skip,)* fut, .. ) = \u0026amp;mut futures; // Safety: future is stored on the stack above // and never moved. let mut fut = unsafe { Pin::new_unchecked(fut) }; // Try polling if fut.poll(cx).is_pending() { is_pending = true; } } else { // Future skipped, one less future to skip in the next iteration skip -= 1; } )* } if is_pending { Pending } else { Ready(($({ // Extract the future for this branch from the tuple. let ( $($skip,)* fut, .. ) = \u0026amp;mut futures; // Safety: future is stored on the stack above // and never moved. let mut fut = unsafe { Pin::new_unchecked(fut) }; fut.take_output().expect(\u0026#34;expected completed future\u0026#34;) },)*)) } }).await }}; } Thanks Honestly, i had a lot of help from Darksonn.\n","permalink":"https://poorlydefinedbehaviour.github.io/posts/contributing_to_tokio/","summary":"\u003ch1 id=\"contributing-for-the-first-time\"\u003eContributing for the first time\u003c/h1\u003e\n\u003cp\u003eI have been trying to force myself to do harder things lately in order to practice and learn new things. Since i\u0026rsquo;m doing \u003ca href=\"https://www.rust-lang.org/\"\u003eRust\u003c/a\u003e full time now, i thought it would be a good a idea to contribute to the ecosystem, so i went and enabled notifications for a bunch of \u003ca href=\"https://www.rust-lang.org/\"\u003eRust\u003c/a\u003e related projects and for the \u003ca href=\"https://www.rust-lang.org/\"\u003eRust\u003c/a\u003e project itself.\u003c/p\u003e\n\u003cp align=\"center\"\u003e\n  \u003cimg src=\"https://user-images.githubusercontent.com/17282221/167045101-fc8e894d-d5e6-4b75-9963-c97cc48fd557.png\" /\u003e\n\u003c/p\u003e\n\u003cp align=\"center\"\u003e\n  \u003ci\u003eI thought i would be able to keep up with the notifications. I was wrong. (obviously)\u003c/i\u003e\n\u003c/p\u003e","title":"Contributing to Rust and tokio"},{"content":"Why Rc cannot be sent between threads We get a compile error if we try to send Rc\u0026lt;T\u0026gt; to another thread:\nuse std::rc::Rc; fn main() { let rc = Rc::new(1); std::thread::spawn(|| { println!(\u0026#34;{}\u0026#34;, *rc); }) .join(); } error[E0277]: `Rc\u0026lt;i32\u0026gt;` cannot be shared between threads safely --\u0026gt; src/main.rs:5:3 | 5 | std::thread::spawn(|| { | ^^^^^^^^^^^^^^^^^^ `Rc\u0026lt;i32\u0026gt;` cannot be shared between threads safely | = help: the trait `Sync` is not implemented for `Rc\u0026lt;i32\u0026gt;` = note: required because of the requirements on the impl of `Send` for `\u0026amp;Rc\u0026lt;i32\u0026gt;` = note: required because it appears within the type `[closure@src/main.rs:5:22: 7:4]` note: required by a bound in `spawn` --\u0026gt; /home/bruno/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/thread/mod.rs:625:8 | 625 | F: Send + \u0026#39;static, | ^^^^ required by this bound in `spawn` For more information about this error, try `rustc --explain E0277`. The compile error is triggered because the closure passed to std::thread::spawn must be Send. Types that implement Send are types that can be transferred across thread boundaries.\nRc primer Rc\u0026lt;T\u0026gt; is a smart pointer that can be used to hold multiple references to T when T is owned by several objects. It kinda looks like a std::shared_ptr from C++ except it does not increment and decrement the reference count atomically, if you need thread safe reference counting in Rust take a look at Arc.\nA value contained in an Rc\u0026lt;T\u0026gt; will be dropped when the last reference to it is dropped. It is possible to create reference cycles and leak memory as well.\nIf we need a new reference to a T, the Rc\u0026lt;T\u0026gt; can just be cloned:\nlet a = Rc::new(1); let b = Rc::clone(\u0026amp;a); Rc internals If we take a look at the Rc\u0026lt;T\u0026gt; source code we will see that it is actually kinda simple:\npub struct Rc\u0026lt;T: ?Sized\u0026gt; { ptr: NonNull\u0026lt;RcBox\u0026lt;T\u0026gt;\u0026gt;, phantom: PhantomData\u0026lt;RcBox\u0026lt;T\u0026gt;\u0026gt;, } ?Sized means the size of T does not need to be known at compile-time. It\u0026rsquo;s fine to accept a T that\u0026rsquo;s not Sized because Rc\u0026lt;T\u0026gt; is Sized.\nA Rc\u0026lt;T\u0026gt; pretty much boils down to a struct with two counters and a pointer to a value of type T. In the Rc\u0026lt;T\u0026gt; source code, the struct is called RcBox\u0026lt;T\u0026gt;:\n// Note that Cell is used for internal mutability. struct RcBox\u0026lt;T: ?Sized\u0026gt; { /// How many references we have to this value. strong: Cell\u0026lt;usize\u0026gt;, // Weak ref? We\u0026#39;ll ignore it for now. weak: Cell\u0026lt;usize\u0026gt;, /// The actual value value: T, } When a Rc\u0026lt;T\u0026gt; is created, its strong count will be 1 because there is only one reference to the value inside of it. If we need more references (the point of using Rc\u0026lt;T\u0026gt;) we can just clone the Rc\u0026lt;T\u0026gt;\nlet a: Rc\u0026lt;String\u0026gt; = Rc::new(String::from(\u0026#34;hello world\u0026#34;)); let b: Rc\u0026lt;String\u0026gt; = a.clone(); Cloning an Rc\u0026lt;T\u0026gt; means increasing its strong count and creating a copy of the RcBox\u0026lt;T\u0026gt;.\nimpl\u0026lt;T: ?Sized\u0026gt; Clone for Rc\u0026lt;T\u0026gt; { #[inline] fn clone(\u0026amp;self) -\u0026gt; Rc\u0026lt;T\u0026gt; { unsafe { // inner() returns the \u0026amp;RcBox\u0026lt;T\u0026gt; that\u0026#39;s in the Rc\u0026lt;T\u0026gt; struct. self.inner().inc_strong(); Self::from_inner(self.ptr) } } } inc_strong literally just increments the strong counter besides some safety checks:\n#[inline] fn inc_strong(\u0026amp;self) { let strong = self.strong(); // We want to abort on overflow instead of dropping the value. // The reference count will never be zero when this is called; // nevertheless, we insert an abort here to hint LLVM at // an otherwise missed optimization. if strong == 0 || strong == usize::MAX { abort(); } self.strong_ref().set(strong + 1); } and from_inner just copies the pointer to RcBox\u0026lt;T\u0026gt;:\nunsafe fn from_inner(ptr: NonNull\u0026lt;RcBox\u0026lt;T\u0026gt;\u0026gt;) -\u0026gt; Self { Self { ptr, phantom: PhantomData } } After the clone, this is how things look like:\nThe strong count is decremented in the Rc\u0026lt;T\u0026gt; Drop implementation and the memory is freed if there\u0026rsquo;s no references left.\nunsafe impl\u0026lt;#[may_dangle] T: ?Sized\u0026gt; Drop for Rc\u0026lt;T\u0026gt; { fn drop(\u0026amp;mut self) { unsafe { self.inner().dec_strong(); if self.inner().strong() == 0 { // destroy the contained object ptr::drop_in_place(Self::get_mut_unchecked(self)); // remove the implicit \u0026#34;strong weak\u0026#34; pointer now that we\u0026#39;ve // destroyed the contents. self.inner().dec_weak(); if self.inner().weak() == 0 { Global.deallocate( self.ptr.cast(), Layout::for_value(self.ptr.as_ref()) ); } } } } } #[may_dangle] has to do with drop check\nWhy Rc is not Send after all? Every time a Rc\u0026lt;T\u0026gt; is cloned, its strong count is incremented. If we had two or more threads trying to clone a Rc\u0026lt;T\u0026gt; at the same time, there would be a race condition since access to the strong count that\u0026rsquo;s in the RcBox\u0026lt;T\u0026gt; is not synchronized.\nReferences https://github.com/rust-lang/rust\nhttps://doc.rust-lang.org/std/marker/trait.Send.html\nhttps://doc.rust-lang.org/nomicon/send-and-sync.html\nhttps://doc.rust-lang.org/std/rc/struct.Rc.html\nhttps://doc.rust-lang.org/std/sync/struct.Arc.html\nhttps://doc.rust-lang.org/std/ptr/struct.NonNull.html\n","permalink":"https://poorlydefinedbehaviour.github.io/posts/why_rc_is_not_send/","summary":"\u003ch1 id=\"why-rc-cannot-be-sent-between-threads\"\u003eWhy Rc\u003cT\u003e cannot be sent between threads\u003c/h1\u003e\n\u003cp\u003eWe get a compile error if we try to send \u003ccode\u003eRc\u0026lt;T\u0026gt;\u003c/code\u003e to another thread:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003euse\u003c/span\u003e std::rc::Rc;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e rc \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Rc::new(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  std::thread::spawn(\u003cspan style=\"color:#f92672\"\u003e||\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eprintln!\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e{}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003erc);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  })\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  .join();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eerror[E0277]: \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e`\u003c/span\u003eRc\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003ei32\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e`\u003c/span\u003e cannot be shared between threads safely\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e-\u0026gt; \u003cspan style=\"color:#a6e22e\"\u003esrc\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003emain.rs:\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e:\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e   \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e   std::thread::spawn(\u003cspan style=\"color:#f92672\"\u003e||\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e   \u003cspan style=\"color:#f92672\"\u003e^^^^^^^^^^^^^^^^^^\u003c/span\u003e \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e`\u003c/span\u003eRc\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003ei32\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e`\u003c/span\u003e cannot be shared between threads safely\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e help: \u003cspan style=\"color:#a6e22e\"\u003ethe\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003etrait\u003c/span\u003e \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e`\u003c/span\u003eSync\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e`\u003c/span\u003e is not implemented \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e`\u003c/span\u003eRc\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003ei32\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e`\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e note: \u003cspan style=\"color:#a6e22e\"\u003erequired\u003c/span\u003e because of the requirements on the \u003cspan style=\"color:#66d9ef\"\u003eimpl\u003c/span\u003e of \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e`\u003c/span\u003eSend\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e`\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e`\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003eRc\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003ei32\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e`\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e note: \u003cspan style=\"color:#a6e22e\"\u003erequired\u003c/span\u003e because it appears within the \u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e`\u003c/span\u003e[closure\u003cspan style=\"color:#f92672\"\u003e@\u003c/span\u003esrc\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003emain.rs:\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e:\u003cspan style=\"color:#ae81ff\"\u003e22\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e:\u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e]\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e`\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enote: \u003cspan style=\"color:#a6e22e\"\u003erequired\u003c/span\u003e by a bound \u003cspan style=\"color:#66d9ef\"\u003ein\u003c/span\u003e \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e`\u003c/span\u003espawn\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e`\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e-\u0026gt; \u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003ehome\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003ebruno\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e.rustup\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003etoolchains\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003estable\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003ex86_64\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003eunknown\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003elinux\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003egnu\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003elib\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003erustlib\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003esrc\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003erust\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003elibrary\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003estd\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003esrc\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003ethread\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003emod\u003c/span\u003e.rs:\u003cspan style=\"color:#ae81ff\"\u003e625\u003c/span\u003e:\u003cspan style=\"color:#ae81ff\"\u003e8\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e625\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e     F: Send \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u0026#39;static,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e        \u003cspan style=\"color:#f92672\"\u003e^^^^\u003c/span\u003e required by this bound \u003cspan style=\"color:#66d9ef\"\u003ein\u003c/span\u003e \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e`\u003c/span\u003espawn\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e`\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eFor more information about this error, \u003cspan style=\"color:#66d9ef\"\u003etry\u003c/span\u003e \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e`\u003c/span\u003erustc \u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003eexplain E0277\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e`\u003c/span\u003e.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe compile error is triggered because the closure passed to \u003ca href=\"https://doc.rust-lang.org/std/thread/fn.spawn.html\"\u003estd::thread::spawn\u003c/a\u003e must be \u003ca href=\"https://doc.rust-lang.org/std/marker/trait.Send.html\"\u003eSend\u003c/a\u003e. Types that implement \u003ccode\u003eSend\u003c/code\u003e are types that can be transferred across thread boundaries.\u003c/p\u003e","title":"Why Rc\u003cT\u003e is not Send"},{"content":"Intro Token bucket is an algorithm that can be used to rate limit requests made or received by a service.\nHow it works The algorithm is called token bucket because of the way it works: imagine we have a bucket with x tokens where each accepted request consumes one token from the bucket and a token is added back to the bucket at an interval.\nA bucket with 1 token that is refilled each second means the service accepts one request per second.\nA bucket with 5 tokens where a token is added to the bucket every 1/5 seconds means the service accepts 5 requests per second.\nA bucket with x tokens where a token is added to the bucket every 1/x seconds means the service accepts x requests per second.\nRequests that are received when the bucket is empty can just be dropped or enqueued to be handled later.\nImplementation in Rust The source code can be found here.\nThe bucket will accept x requests per second.\n#[derive(Debug)] struct Config { /// The number of requests that can be accepted every second. requests_per_second: usize, } #[derive(Debug)] struct Bucket { config: Config, /// How many requests we can accept at this time. tokens: AtomicUsize, /// Sends are actually never made in this channel. /// It is used only for the worker thread to know when the bucket /// has been dropped and exit. close_channel_sender: Sender\u0026lt;()\u0026gt;, } A thread is spawned to refill the bucket every 1/Config::requests_per_second, at this rate the bucket will accept around Config::requests_per_second requests per second.\nimpl Bucket { pub fn new(config: Config) -\u0026gt; Arc\u0026lt;Self\u0026gt; { let (sender, receiver) = crossbeam_channel::unbounded::\u0026lt;()\u0026gt;(); let tokens = AtomicUsize::new(1); let bucket = Arc::new(Self { config, tokens, close_channel_sender: sender, }); let bucket_clone = Arc::downgrade(\u0026amp;bucket); std::thread::spawn(move || Bucket::add_tokens_to_bucket_on_interval( bucket_clone, receiver ) ); bucket } fn add_tokens_to_bucket_on_interval(bucket: Weak\u0026lt;Bucket\u0026gt;, receiver: Receiver\u0026lt;()\u0026gt;) { let interval = { match bucket.upgrade() { None =\u0026gt; { error!( \u0026#34;unable to define interval to add tokens to bucket because bucket has been dropped\u0026#34; ); return; } Some(bucket) =\u0026gt; Duration::from_secs_f64(1.0 / (bucket.config.requests_per_second as f64)), } }; debug!(?interval, \u0026#34;will add tokens to bucket at interval\u0026#34;); let ticker = crossbeam_channel::tick(interval); loop { select! { recv(ticker) -\u0026gt; _ =\u0026gt; match bucket.upgrade() { None =\u0026gt; { debug!(\u0026#34;cannot upgrade Weak ref to Arc, exiting\u0026#34;); return; } Some(bucket) =\u0026gt; { let _ = bucket .tokens .fetch_update(Ordering::SeqCst, Ordering::SeqCst, |tokens| { Some(std::cmp::min(tokens + 1, bucket.config.requests_per_second)) }); } }, recv(receiver) -\u0026gt; message =\u0026gt; { // An error is returned when we try to received from a // channel that has been closed and this channel // will only be closed when the bucket is dropped. if message == Err(RecvError) { debug!(\u0026#34; bucket has been dropped, won\u0026#39;t try to add tokens to the bucket anymore\u0026#34; ); return; } } } } } } And a function can be called to find out if there\u0026rsquo;s enough tokens in the bucket to accept a request. A token is consumed if the request is accepted.\nimpl Bucket { ... /// Returns true if there\u0026#39;s enough tokens in the bucket. pub fn acquire(\u0026amp;self) -\u0026gt; bool { self .tokens .fetch_update(Ordering::SeqCst, Ordering::SeqCst, |tokens| { Some(if tokens \u0026gt; 0 { tokens - 1 } else { tokens }) }) .map(|tokens_in_the_bucket| tokens_in_the_bucket \u0026gt; 0) .unwrap_or(false) } } References https://en.wikipedia.org/wiki/Token_bucket\n","permalink":"https://poorlydefinedbehaviour.github.io/posts/token_bucket/","summary":"\u003ch1 id=\"intro\"\u003eIntro\u003c/h1\u003e\n\u003cp\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Token_bucket\"\u003eToken bucket\u003c/a\u003e is an algorithm that can be used to rate limit requests made or received by a service.\u003c/p\u003e\n\u003ch1 id=\"how-it-works\"\u003eHow it works\u003c/h1\u003e\n\u003cp\u003eThe algorithm is called token bucket because of the way it works: imagine we have a bucket with \u003ccode\u003ex\u003c/code\u003e tokens where each accepted request consumes one token from the bucket and a token is added back to the bucket at an interval.\u003c/p\u003e\n\u003cp\u003eA bucket with \u003ccode\u003e1\u003c/code\u003e token that is refilled each second means the service accepts one request per second.\u003c/p\u003e","title":"Token bucket"},{"content":"Replicated And Fault Tolerant Raft is a consensus algorithm for managing a replicated log.\nThe authors claim Raft to be more understandable than Paxos because Raft separates the key elements of consensus\nLeader election Log replication Safety and enforces a stronger degree of coherency to reduce the number of states that must be considered.\nRaft also includes a new mechanism for changing cluster membership.\nWhat is a consensus algorithm Consensus algorithms allow a collection of machines to work as a coherent group that can survive the failures of some of its members.\nWhy Raft was created Paxos, another consensus algorithm, is the most popular algorithm when talking about consensus algorithms. Most implementations of consensus are based on Paxos or influenced by it.\nThe problem is that Paxos is hard to understand and its architecture does not support pratical systems without modifications.\nThe point of Raft is to be a consensus algorithm that is as efficient as Paxos but easier to understand and implement.\nWhat is unique about Raft Raft is similar in many ways to existing consensus algorithms (most notably, Oki and Liskov\u0026rsquo;s Viewstamped Replication), but it has several new features:\nStrong leader: Raft uses a stronger form of leadership than other consensus algorithms. For example, log entries only flow from the leader to other servers. This simplifies the management of the replicated log.\nLeader election: Raft uses randomized timers to elect leaders. This makes conflicts easier and faster to resolve.\nMembership changes: Raft\u0026rsquo;s mechanism for changing the set of servers in the cluster uses a new joint consensus approach where the majorities of two different configurations overlap during transitions. This allows the cluster to continue operating normally during configuration changes.\nRaft in the wild https://github.com/tikv/raft-rs\nhttps://github.com/hashicorp/raft\nhttps://github.com/sofastack/sofa-jraft\nhttps://github.com/eBay/NuRaft\nReplicated state machines States machines on a collection of servers compute identical copies of the same state and can continue operating even if some of the servers are down. Replicated state machines are used to solve a variety of fault tolerance problems in distributed systems.\nHow the consensus algorithms work with replicated state machines Replicated state machines are typically implemented using a replicated log.\nThe consensus algorithm manages a replicated log containg state machine commands from clients. The state machines process identical sequences of commands fro the logs, so they produce the same outputs.\nThe consensus algorithm module on the server receives commands from clients and adds them to its log. It communicates with the consensus algorithm modules on other servers to ensure that every log eventually contains the commands in the same order even if some of the servers fail.\nOnce commands are properly replicated (every server has the same commands in the same order), each server\u0026rsquo;s state machine processes them and the outputs are returned to the clients. As a result, the servers appear to form a single, highly reliable state machine.\nTypical properties of consensus algorithms Safety: They ensure that an incorrect result is never returned under all non-Byzantine conditions, including networks delays, partitions, and packet lost, duplication and reordering.\nAvailability: They are fully functional as the majority of the servers are functional. For example, a cluster of five servers can tolerate the failure of two servers. Servers that failed may rejoin the cluster after recovering.\nConsistency: They do not depend on timing to ensure the consistency of the logs.\nPerformance: A command can complete as soon as a majority of the cluster has responded has accepted the command.\nExamples of replicated state machines https://www.cs.cornell.edu/courses/cs6464/2009sp/lectures/16-chubby.pdf\nhttps://github.com/apache/zookeeper\nPaxos Created by Leslie Lamport, Paxos first defines a protocol capable of reaching agreement on a single decision, such as a single replicated log entry. This is known as single-decree Paxos. Paxos then combines multiple instances of this protocol to facilitate a series of decisions such as a log. This is known as multi-Paxos.\nPaxos criticism Paxos is difficult to understand. The full explanation is opaque and because of that a lot of effort is necessary to understand it and only a few people succeed in understanding it.\nBecause of its difficulty, there have been several attempts to simplify Paxos explanation. These explanation focus on the single-decree subset and even then, they are still hard to understand.\nThe second problem with Paxos is that there is no widely agreed-upon algorithm for multi-Paxos. Lamport\u0026rsquo;s descriptions are mostly about single-decree Paxos.\nThe third problem is that Paxos uses a peer-to-peer approach at its core. If a series of decisions must be made, it is simpler and faster to first elect a leader, then have the leader coordinate the decisions.\nBecause of these problems, pratical systems implementations begin with Paxos, discover the difficulties in implementing, and then develop a significantly different architecture.\nThe Raft consensus algorithm Raft implements consensus by first electing a distinguished leader, then giving the leader complete responsibility for managing the replicated log. The leader accepts log entries from clients, replicates them on other servers, and tells servers when it is safe to apply log entries to their state machines. A leader can fail or become disconnected from the other servers, in which case a new leader is elected.\nRaft decomposes the consensus problem into three subproblems:\nLeader election: A new leader must be chosen when an existing leader fails.\nLog replication: The leader must accept log entries from clients and replicate them accross the cluster, forcing the other logs to agree with its own.\nSafety: If any server has applied a particular log entry to its state machine, then no other server may apply a different command for the same log index.\nRaft basics A raft cluster contains several servers, five is a typical number, which allows the system to tolerate two failures. At any given time each server is in one of three states: leader, follower or candidate.\nleader: In normal operation there is exactly one leader and all of the other servers are followers. The leader handles all client requests.\nfollower: Followers simply respond to requests from leaders and candidates, if a client contacts a follower, the request is redirected to the leader.\ncandidate: A candidate is a follower that wants to become a leader.\nRaft divides time into terms of arbitraty length numbered with consecutive integers. Each term begins with an election, in which one or more candidates attempt to become leader. If a candidate wins the election, then it serves as leader for the rest of the term. If the election results in a split vote, the term ends with no leader and a new term with a new election begins shortly.\nEach server stores a current term number, which increases monotonically over time. Current terms are exchanged whenever servers communicate and if one server\u0026rsquo;s current term is smaller than the other\u0026rsquo;s, then it updates its current term to the larger value. If a candidate or leader discovers that is term is out of date, it immediately reverts to follower state. If a server receives a request with a stale term number, it rejects the request.\nRaft servers communication with remote procedure calls Raft servers coomunicate using remote procedure calls. The basic consensus algorithm requires two types of RPCs:\nRequestVote: RequestVote RPCs are initiated by candidates during elections.\nAppendEntries: AppendEntries RPCs are initiated by leaders to replicate log entries and to provide a form of heartbeat.\nServers retry RPCs if they do not receive a response in a timely manner.\nLeader election Raft uses a heartbeat mechanism to trigger leader election. When servers start up, they begin as followers and remain in the follower state as long as it receives valid RPCs from a leader or candidate. Leaders send periodic heartbeats (AppendEntries RPCs that carry no log entries) to all followers in order to maintain their authority. If a follower receives no communication over a period of time called the election timeout, then it assumes there is no viable leader and begins an election to choose a new leader.\nTo begin an election, a follower increments its current term and transitions to candidate state. It then votes for itself and issues RequestVote RPCs in parallel to each server in the cluster. A candidate continues in the candidate state until one of three things happens:\nWins election: The candidate wins the election and becomes the new leader.\nA candidate wins an election if it receives votes from a majority of the servers in the full cluster for the same term. Each server votes for at most one candidate in a given term, on a first-come-first-served basis. Once a candidate wins an election, it becomes the leader and sends heartbeat messages to all of the other servers to establish its authority and prevent new elections.\nOther server wins election: Another candidate wins the election and becomes the new leader.\nDuring an election, a candidate may receive an AppendEntries RPC from another server claiming to be the leader. If the leader\u0026rsquo;s term is at least as large as the candidate\u0026rsquo;s current term, then the candidate recognizes the leader as legitimate and returns to follower state. If the request term is smaller than the candidate\u0026rsquo;s current term, the request is rejected as described in Raft basics.\nElection timeout: A period of time goes by with no winner.\nIf many followers become candidates at the same time, votes could be split so that no candidate obtains a majority. When this happens, each candidate will time out and start a new election by increasing its term and iniating another round of RequestVote RPCs.\nElections timeouts are chosen randomly from the range like 150..300ms to ensure that split votes are rare and that hey are resolved quickly.\nEach candidate gets a randomized election timeout at the start of an election, and it waits for the timeout to elapse before starting a new election.\nElection restriction Raft uses the voting process to prevent a candidate from winning an election unless its log contains all commited entries from previous terms. When a RequestVote RPC is made, the candidate includes the index and term of the last entry in its log, the server that receives the request (aka the voter) denies the request if its own log is more up-to-date than of the candidate. If the logs have last entries with different terms, then the log with the later term is more up-to-date. If the logs end with the same term, then whichever log is longer is more up-to-date.\nLog replication Once a leader has been elected, it begins servicing client requests that each contain a command to be executed by the replicated state machines. When a request is received, the leader appends the command to its log as a new entry, then issues AppendEntries RPCs in parallel to each of the servers to replicate the entry. Only after the entry has been replicated, the leader applies the entry to its state machine and returns the result of that execution to the client. The leader retries AppendEntries RPCs until all followers eventually store all log entries.\nLogs are composed of sequentially numbered entries. Each entry contains the term in which it was created and a command for the state machine. The leader decides when it is safe to apply a log entry to the state machines, entries that have been applied to the state machines are called committed. Raft guarantees that committed entries are durable and will eventually be executed by all of the available state machines. A log entry is commited once the leader that created the entry has replicated it on a majority of the servers. The leader keeps track of the highest index it knows to be committed, and it includes that index in future AppendEntries RPCs so that other server eventually find out. Once a follower learns that a log entry is committed, it applies every entry up to the entry to its local state machine.\ncommand term │ │ │ │ 0 1 2 3 4 5 6 7 log index │ │ ┌────┬────┬────┬────┬────┬────┬────┬────┐ │ ├─► 1 │ 1 │ 1 │ 2 │ 3 │ 3 │ 3 │ 3 │ │ └──────┴─►x=3 │y=1 │y=9 │x=2 │x=0 │y=7 │x=5 │x=4 │ │ leader └────┴────┴────┴────┴────┴────┴────┴────┘ ┌────┬────┬────┬────┬────┐ │ 1 │ 1 │ 1 │ 2 │ 3 │ │ │x=3 │y=1 │y=9 │x=2 │x=0 │ │ └────┴────┴────┴────┴────┘ │ │ ┌────┬────┬────┬────┬────┬────┬────┬────┐ │ │ 1 │ 1 │ 1 │ 2 │ 3 │ 3 │ 3 │ 3 │ │ │x=3 │y=1 │y=9 │x=2 │x=0 │y=7 │x=5 │x=4 │ │ └────┴────┴────┴────┴────┴────┴────┴────┘ │ │ followers ┌────┬────┐ │ │ 1 │ 1 │ │ │x=3 │y=1 │ │ └────┴────┘ │ │ ┌────┬────┬────┬────┬────┬────┬────┐ │ │ 1 │ 1 │ 1 │ 2 │ 3 │ 3 │ 3 │ │ │x=3 │y=1 │y=9 │x=2 │x=0 │y=7 │x=5 │ │ └────┴────┴────┴────┴────┴────┴────┘ │ │ └──────────────────────────────────┘ committed entries Raft mantains the following properties:\nIf two entries in different logs have the same index and term, then they store the same command.\nIf two entries in different logs have the same index and term, then the logs are identical in all preceding entries.\nHow log inconsistencies are handled TLDR: Leader overwrites follower logs if they are out of sync.\nIn Raft, the leader handles inconsistencies by forcing the follower\u0026rsquo;s logs to duplicate its own. This means that conflicting entries in follower logs will be overwritten with entries from the leader\u0026rsquo;s log. To bring a follower\u0026rsquo;s log into consistency with its own, the leader must find the latest log entry where the two logs agree, delete any entries in the follower\u0026rsquo;s log after that point, and send the follower all of the leader\u0026rsquo;s entries after that point. The leader maintains a nextIndex for each follower, which is the index of the next log the leader will send to that follower. When a leader first comes to power, it initializes all nextIndex values to the index just after the last one in its log.\nSafety TLDR: Only servers that contain all of the entries commited in previous terms may become leader at any given term.\nThere\u0026rsquo;s a problem with the Raft description so far:\nFor example, a follower might be unavailable while the leader commits several log entries, then it could be elected leader and overwrite these entries with new ones. As a result, different state machines might execute different command sequences. This is fixed by adding a restriction on which servers may be elected leader. The restriction ensures that the leader for any given term contains all of the entries commited in previous terms.\nRestriction on committing logs Raft never commits log entries from previous terms by counting replicas. Only log entries from the leader\u0026rsquo;s current term are commited by counting replicas.\nFollower and candidate crashes If a follower or candidate crashes, then future RequestVote and AppendEntries RPCs sent to it will fail. Raft handles these failures by retrying indefinitely, if the crashed server restarts, then the RPC will complete successfully. If a server crashes after completing an RPC but before responding, then it will receive the same RPC again after it restarts. Raft RPCS are idempotent, so this causes no harm. If a follower receives an AppendEntries request that includes log entries already present in its log, it ignores those entries in the new request.\nTiming and availability Raft will be able to elect and maintain a steady leader as long as the system satifies the following timing requirement:\nbroadcast_time \u0026lt;= election_timeout \u0026lt;= MTBF\nbroad_cast_time is the average time it takes a server to send RPCs in parallel to every server in the cluster and receive their responses.\nelection_timeout is the election timeout described in Leader election.\nMTBF is the average time between failures for a single server.\nThe broadcast time should be an order of magnitude less than the election timeout so that leaders can reliably send the heartbet messages required to keep followers from starting elections.\nThe election timeout should be a few orders of magnitude less than MTBF so that the system makes steady progress.\nCluster membership changes Configuration changes are incorporated into the Raft consensus algorithm. In Raft the cluster first switches to a transitional configuration called joint consensus, once the joint consensus has been committed, the system then transitions to the new configuration.\nThe join consensus combines both the old an new configurations:\nLog entries are replicated to all servers in both configurations. Any server from either configuration may serve as leader. Agreement for elections and entry commitment requires separate majorities from both the old and new configurations. The joint consensus allows individual servers to transition between configurations at different times without compromising safety.\nHow cluster configurations are stored and communicated Cluster configurations are stored and communicated using special entries in the replicated log. When the leader receives a request to change the configuration from config_old (the current configuration) to config_new (the new configuration), it stores a tuple (config_old, config_new) as a log entry and replicates that entry. Once a given server adds the new configuration entry to its log, it uses that configuration for all future decisions even if the entry has not been committed yet.\nLog compaction TLDR: We don\u0026rsquo;t have infinite memory, discard logs that aren\u0026rsquo;t needed anymore.\nRaft\u0026rsquo;s log grows during normal operation to incorporate more client requests, but in a practical system, it cannot grow without bound. As the log grows longer, it occupies more spaces and takes more time to replay.\nSnapshotting is the simplest approach to compaction. In snapshotting the entire current system state is written to a snapshot on stable storage, then the tire log up to that point is discarded. Snapshotting is used in Chubby and ZooKeeper and in Raft as well.\nThe basic idea of snapshotting in Raft: TLDR: Add the current machine state to the log and delete all logs used to get to this state. The snapshot should also be written to stable storage.\nEach server takes snapshots independently, covering just the commited entries in its log. Most of the work consists of the state machine writing its current state to the snapshot. Raft also includes a small amount of metadata in the snapshot: the last included index which is the index of the last entry in the log that the snapshot replaces (the last entry the state machine had applied), and the last included term which is the term of the entry. The snapshot also includes the latest configuration. Once a server completes a snapshot, it may delete all log entries up through the last included index, as well as any prior snapshot.\n0 1 2 3 4 5 6 log index ┌────┬────┬────┬────┬────┬────┬────┐ │ 1 │ 1 │ 1 │ 2 │ 3 │ 3 │ 3 │ │ before snapshot │x=3 │y=1 │y=9 │x=2 │x=0 │y=7 │x=5 │ │ └────┴────┴────┴────┴────┴────┴────┘ snapshot ┌────────────────────────┬────┬────┐ │last included index: 4 │ 3 │ 3 │ │ │last included term: 3 │y=7 │x=5 │ │ │state machine state: ├────┴────┘ │ after snapshot │ x = 0 │ │ │ y = 9 │ │ └────────────────────────┘ │ │ └────────────────────────┘ committed entries When a new follower joins the cluster The way to bring a new foller up-to-date is for the leader to send it a snapshot over the network. The leader uses a new RPC called InstallSnapShot to send snapshots to followers that are too far behind because they are new or because they are too slow.\nWhen a follower receives a snapshot with this RPC:\nIf the snapshot contains new information on in the follower\u0026rsquo;s log, the follower discards and replaces its log with the snapshot.\nIf the snapshot contains only a prefix of its log, then log entries covered by the snapshot are deleted bu entries following the snapshot are still valid and must be retained.\nClient interaction Clients of Raft send all of their requests to the leader.\nHow clients find the leader When a client starts up, it connects to a randomly-chosen server. If the client\u0026rsquo;s choice is not the leader, that server will reject the client\u0026rsquo;s request and supply information about the most recent leader it has heard from.\nCommand deduplication For example, if the leader crashes after committing the log entry but before responding to the client, the client will retry the command with a new leader, causing to be executed a second time.\nThe solution is for clients to assign unique serial numbers to every command. Then, the state machine tracks the latest serial number processed for each client, along with the associated response. If it receives a command whose serial number ha already been executed, it responses immediatelly without re-executing the request.\nRead-only operations should not return stale data When a leader responds to a request, its log could be outdated with a new leader had been elected in the meantime.\nTo avoid this situation:\nA leader must have the latest information on which entries are committed. Because of that, each leader commits a blank no-op entry into the log at the start of its term.\nA leader must check whether it has been deposed before processing a read-only request. Raft handles this by having the leader exchange heartbeat messages with a majority of the cluster before responding to read-only request.\nReferences In Search of an Understandable Consensus Algorithm (Extended Version) - https://raft.github.io/raft.pdf\nDesigning for Understandability: The Raft Consensus Algorithm - https://www.youtube.com/watch?v=vYp4LYbnnW8 \u0026ldquo;Raft - The Understandable Distributed Protocol\u0026rdquo; by Ben Johnson (2013) - https://www.youtube.com/watch?v=ro2fU8_mr2w\nhttps://github.com/hashicorp/raft\nMIT 6.824: Distributed Systems (Spring 2020) Lecture 6: Fault Tolerance: Raft - https://www.youtube.com/watch?v=64Zp3tzNbpE\u0026list=PLrw6a1wE39_tb2fErI4-WkMbsvGQk9_UB\u0026index=6\n","permalink":"https://poorlydefinedbehaviour.github.io/posts/raft_notes/","summary":"\u003ch1 id=\"replicated-and-fault-tolerant\"\u003e\u003cstrong\u003eR\u003c/strong\u003eeplicated \u003cstrong\u003eA\u003c/strong\u003end \u003cstrong\u003eF\u003c/strong\u003eault \u003cstrong\u003eT\u003c/strong\u003eolerant\u003c/h1\u003e\n\u003cp\u003eRaft is a consensus algorithm for managing a replicated log.\u003c/p\u003e\n\u003cp\u003eThe authors claim Raft to be more understandable than Paxos\nbecause Raft separates the key elements of consensus\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eLeader election\u003c/li\u003e\n\u003cli\u003eLog replication\u003c/li\u003e\n\u003cli\u003eSafety\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eand enforces a stronger degree of coherency to reduce the number of states\nthat must be considered.\u003c/p\u003e\n\u003cp\u003eRaft also includes a new mechanism for changing cluster membership.\u003c/p\u003e\n\u003ch2 id=\"what-is-a-consensus-algorithm\"\u003eWhat is a consensus algorithm\u003c/h2\u003e\n\u003cp\u003eConsensus algorithms allow a collection of machines to work as a coherent group\nthat can survive the failures of some of its members.\u003c/p\u003e","title":"Notes taken from the Raft paper"},{"content":"What\u0026rsquo;s a Bloom filter A bloom filter is a data-structure that can be used to check if a set contains an element. It uses way less memory than a conventional set data-structure by sacrificing accuracy.\nExample Say we are building a log-structured merge-tree, we can use a bloom filter to find out if the LSM-tree contains a particular key in O(1) time in most cases, the downside is that sometimes the bloom filter would say that the LSM-tree contains a key, but it actually does not and we would go searching for the value that\u0026rsquo;s mapped to the key and never actually find it.\nIt is used in a lot of places.\nHow it works A bloom filter is just a bit-set that uses n deterministic hash functions to add elements to it.\nempty bit-set\nAdding elements to the set To add the key bob to the set, we run the key through each of the n hash functions and map the hash function output to one of the positions in the bit-set and for each position, we flip the bit to 1.\nbit-set after bob was added to the bloom filter Finding out if the set contains an element To find out if the set contains the key bob, we run the key through each of the n hash functions again \u0026ndash; since the hash functions must be deterministic they will always map to the same position in the bit-set \u0026ndash; and check if the bit is set to 1 for each of the bit-set positions we reached after running the key through the hash functions. If every hash function maps to a bit set to 1, it means the key is in the set.\nbob is in the set because every hash function mapped it to a bit set to 1 alice is not in the set because not every hash function mapped to a bit set to 1 False positives Since collisions can happen some keys will be mapped to bits that were set to 1 when other keys were added to the set. In this case, the bloom filter will say that it contains the key even though it does not.\nthe bit-set after bob was added to it since john maps to the same bits as bob and the bits were set to 1 after bob was added to the set, we got a false positive Removing an element from the set As it stands, removing an element from the set is not actually possible. If we had a bloom filter that uses 3 hash functions that looks like this after adding alice and bob to it:\nbloom filter after adding alice and bob to it with 3 hash functions Note that alice and bob hash to the same position in the bit-set for some of the hash functions\nbits shared between alice and bob are in white The naive solution is to remove alice from the bloom filter by setting the bits mapped by hashi(alice) to 0:\nbits that were flipped to 0 are in white Now, let\u0026rsquo;s check if alice is in the set, for a key to be in the set hashi(key) must map to bits set to 1\nhashi(alice) maps to bits set to 0 which means alice is not in the set alice is not in the set as expected. Let\u0026rsquo;s see if bob is still in the set, it should be since we didn\u0026rsquo;t remove it.\nnot every hashi(bob) maps to bits set to 1 which means bob is not in the set, bits set to 0 after removing alice from the set are in white bob is not in the set anymore, even though we didn\u0026rsquo;t remove it. The problem is that since keys may share the positions in the bit-set, we cannot just flip bits back to 0 to remove a key from the set because in doing so we may flip bits that are used by other keys.\nCounting bloom filter Since we cannot flip bits back to 0 to remove a key from the set, we could maintain a counter instead of a single bit. When a key is added to the set, the counter is incremented and when a key is removed from the set, the counter is decremented. If the counter reaches 0, it means no keys are mapped to the position.\nPositions that have more than one key mapped to it will have a counter greater than 1.\npositions in white are shared between two or more keys and have a counter greater than 1 removing alice from the set by decrementing the counters mapped by hashi(alice) After decrementing the counters, not every hashi(alice) maps to a counter greater than 0 which means alice is not in the set anymore. Unlike the bloom filter that uses only bits, hashi(bob) still maps to counters that are greater than 0 which means bob is still in the set.\nExample in Rust https://github.com/PoorlyDefinedBehaviour/bloom_filter/\nReferences Network Applications of Bloom Filters: A Survey - https://www.eecs.harvard.edu/~michaelm/postscripts/im2005b.pdf\nDesigning Data-Intensive Applications: The Big Ideas Behind Reliable, Scalable, and Maintainable Systems - Martin Kleppmann\n","permalink":"https://poorlydefinedbehaviour.github.io/posts/bloom_filter/","summary":"\u003ch1 id=\"whats-a-bloom-filter\"\u003eWhat\u0026rsquo;s a Bloom filter\u003c/h1\u003e\n\u003cp\u003eA bloom filter is a data-structure that can be used to check if a set contains an element. It uses way less memory than a \u003ca href=\"https://en.wikipedia.org/wiki/Set_%28abstract_data_type%29#Implementations\"\u003econventional set data-structure\u003c/a\u003e by sacrificing accuracy.\u003c/p\u003e\n\u003ch2 id=\"example\"\u003eExample\u003c/h2\u003e\n\u003cp\u003eSay we are building a \u003ca href=\"https://www.cs.umb.edu/~poneil/lsmtree.pdf\"\u003elog-structured merge-tree\u003c/a\u003e, we can use a bloom filter to find out if the LSM-tree contains a particular key in O(1) time in most cases, the downside is that sometimes the bloom filter would say that the LSM-tree contains a key, but it actually does not and we would go searching for the value that\u0026rsquo;s mapped to the key and never actually find it.\u003c/p\u003e","title":"Bloom filter"},{"content":"","permalink":"https://poorlydefinedbehaviour.github.io/posts/deterministic_simulation_testing_coroutines/","summary":"","title":""}]